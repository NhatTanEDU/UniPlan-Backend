/**
 * useProjects Hook
 * -------------------
 * - Qu·∫£n l√Ω state danh s√°ch projects (loading, error, data)
 * - Cung c·∫•p c√°c h√†m: fetchProjects, createProject, updateProject, deleteProject, restoreProject
 * - H·ªó tr·ª£ optimistic updates v√† th√¥ng b√°o th√†nh c√¥ng/l·ªói
 * - T·ª± ƒë·ªông c·∫≠p nh·∫≠t UI sau m·ªói thao t√°c CRUD
 * - Pattern t∆∞∆°ng t·ª± useTeams nh∆∞ng d√†nh cho project management
 */
import { useState, useEffect, useCallback, useRef } from "react";
import { Project } from "../../../../../types/project";
import { getProjects, createProject, softDeleteProject, restoreProject, updateProject } from "../../../../../services/api";

export function useProjects() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const hasFetchedRef = useRef(false);

  /**
   * fetchProjects()
   *  - G·ªçi API getProjects()
   *  - C·∫≠p nh·∫≠t state: projects, loading, error
   */
  const fetchProjects = useCallback(async () => {
    console.log("üîÑ useProjects: fetchProjects called");
    setLoading(true);
    setError(null);
    try {
      const data = await getProjects();
      console.log("‚úÖ useProjects: API response received", { 
        projectsCount: Array.isArray(data) ? data.length : 'Not an array', 
        dataType: typeof data,
        isArray: Array.isArray(data),
        data: data
      });
      
      // üöÄ DEFENSIVE: ƒê·∫£m b·∫£o data l√† array
      const safeData = Array.isArray(data) ? data : [];
      setProjects(safeData);
      console.log("‚úÖ useProjects: State updated with new projects");
    } catch (err: any) {
      console.error("‚ùå useProjects: Error fetching projects", err);
      let msg = "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch d·ª± √°n";
      if (err?.response?.data?.message) {
        msg = err.response.data.message;
      } else if (err.message) {
        msg = err.message;
      }
      setError(msg);
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * createProjectWithOptimisticUpdate(data)
   *  - Optimistic Update: Th√™m project t·∫°m v√†o state ngay l·∫≠p t·ª©c
   *  - G·ªçi API createProject()
   *  - Replace project t·∫°m b·∫±ng project th·∫≠t t·ª´ API
   *  - Rollback n·∫øu c√≥ l·ªói
   *  - Return result { success, message }
   */
  const createProjectWithOptimisticUpdate = async (projectData: {
    project_name: string;
    description: string;
    start_date: string;
    end_date: string;
    status?: string;
    priority?: string;
    project_type_id: string;
  }) => {
    console.log("üîÑ useProjects: createProject called with data:", projectData);
    
    try {
      // 1. Optimistic update: Th√™m project t·∫°m v√†o state ngay l·∫≠p t·ª©c
      const tempId = `temp_${Date.now()}`;
      const tempProject: Project = {
        _id: tempId,
        project_name: projectData.project_name,
        description: projectData.description,
        start_date: projectData.start_date,
        end_date: projectData.end_date,
        status: projectData.status || 'Planning',
        priority: projectData.priority || 'Medium',
        project_type_id: { _id: projectData.project_type_id, name: "ƒêang t·∫£i..." },
        created_by: "",
        created_at: new Date().toISOString(),
        is_deleted: false,
        deleted_at: null
      };
      
      setProjects(prev => [...prev, tempProject]);
      console.log("‚úÖ useProjects: Optimistic update applied - temp project added");

      // 2. G·ªçi API
      const response = await createProject(projectData);
      console.log("‚úÖ useProjects: API response received:", response);
      
      // 3. Replace temp project v·ªõi real project
      setProjects(prev => prev.map(project => 
        project._id === tempId ? response.project : project
      ));
      console.log("‚úÖ useProjects: Real project replaced temp project");
      
      return { success: true, message: "Th√™m d·ª± √°n th√†nh c√¥ng" };
      
    } catch (err: any) {
      // 4. Rollback: X√≥a project t·∫°m n·∫øu c√≥ l·ªói
      setProjects(prev => prev.filter(project => !project._id.startsWith('temp_')));
      console.error("‚ùå useProjects: Error creating project, rollback applied", err);
      
      let errorMessage = "L·ªói khi t·∫°o d·ª± √°n";
      if (err?.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      return { success: false, message: errorMessage };
    }
  };
  /**
   * updateProjectWithOptimisticUpdate(id, data)
   *  - Optimistic Update: C·∫≠p nh·∫≠t project trong state ngay l·∫≠p t·ª©c
   *  - G·ªçi API updateProject()
   *  - Replace v·ªõi data th·∫≠t t·ª´ API
   *  - Rollback n·∫øu c√≥ l·ªói
   *  - Return result { success, message }
   */
  const updateProjectWithOptimisticUpdate = async (id: string, updatedData: Partial<Project>) => {
    console.log("üîÑ useProjects: updateProject called", { id, updatedData });
    
    // L∆∞u tr·∫°ng th√°i c≈© cho rollback
    const oldProjects = [...projects];
    
    try {
      // 1. Optimistic update
      setProjects(prev => prev.map(project => 
        project._id === id ? { ...project, ...updatedData } : project
      ));
      console.log("‚úÖ useProjects: Optimistic update applied");

      // 2. Chu·∫©n b·ªã data cho API (lo·∫°i b·ªè c√°c field undefined v√† ch·ªâ g·ª≠i nh·ªØng field c·∫ßn thi·∫øt)
      const updatePayload: any = {};
      if (updatedData.project_name !== undefined) updatePayload.project_name = updatedData.project_name;
      if (updatedData.description !== undefined) updatePayload.description = updatedData.description;
      if (updatedData.start_date !== undefined) updatePayload.start_date = updatedData.start_date;
      if (updatedData.end_date !== undefined) updatePayload.end_date = updatedData.end_date;
      if (updatedData.status !== undefined) updatePayload.status = updatedData.status;
      if (updatedData.priority !== undefined) updatePayload.priority = updatedData.priority;
      if (updatedData.project_type_id !== undefined) updatePayload.project_type_id = updatedData.project_type_id;

      // 3. G·ªçi API
      const response = await updateProject(id, updatePayload);
      console.log("‚úÖ useProjects: API response received:", response);
      
      // 4. Replace v·ªõi data th·∫≠t t·ª´ API
      setProjects(prev => prev.map(project => 
        project._id === id ? response.project : project
      ));
      console.log("‚úÖ useProjects: Real data replaced optimistic data");
      
      return { success: true, message: "C·∫≠p nh·∫≠t d·ª± √°n th√†nh c√¥ng" };
      
    } catch (err: any) {
      // 5. Rollback
      setProjects(oldProjects);
      console.error("‚ùå useProjects: Error updating project, rollback applied", err);
      
      let errorMessage = "L·ªói khi c·∫≠p nh·∫≠t d·ª± √°n";
      if (err?.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      return { success: false, message: errorMessage };
    }
  };

  /**
   * deleteProjectWithOptimisticUpdate(id)
   *  - Optimistic Update: ƒê√°nh d·∫•u project l√† ƒë√£ x√≥a
   *  - G·ªçi API softDeleteProject()
   *  - Rollback n·∫øu c√≥ l·ªói
   *  - Return result { success, message }
   */
  const deleteProjectWithOptimisticUpdate = async (id: string) => {
    console.log("üîÑ useProjects: deleteProject called", { id });
    
    // L∆∞u tr·∫°ng th√°i c≈© cho rollback
    const oldProjects = [...projects];
    
    try {
      // 1. Optimistic update: ƒê√°nh d·∫•u l√† ƒë√£ x√≥a
      setProjects(prev => prev.map(project => 
        project._id === id ? { 
          ...project, 
          is_deleted: true, 
          deleted_at: new Date().toISOString() 
        } : project
      ));
      console.log("‚úÖ useProjects: Optimistic delete applied");

      // 2. G·ªçi API
      await softDeleteProject(id);
      console.log("‚úÖ useProjects: API call successful");
      
      return { success: true, message: "X√≥a d·ª± √°n th√†nh c√¥ng" };
      
    } catch (err: any) {
      // 3. Rollback
      setProjects(oldProjects);
      console.error("‚ùå useProjects: Error deleting project, rollback applied", err);
      
      let errorMessage = "L·ªói khi x√≥a d·ª± √°n";
      if (err?.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      return { success: false, message: errorMessage };
    }
  };

  /**
   * restoreProjectWithOptimisticUpdate(id)
   *  - Optimistic Update: Kh√¥i ph·ª•c project
   *  - G·ªçi API restoreProject()
   *  - Rollback n·∫øu c√≥ l·ªói
   *  - Return result { success, message }
   */
  const restoreProjectWithOptimisticUpdate = async (id: string) => {
    console.log("üîÑ useProjects: restoreProject called", { id });
    
    // L∆∞u tr·∫°ng th√°i c≈© cho rollback
    const oldProjects = [...projects];
    
    try {
      // 1. Optimistic update: Kh√¥i ph·ª•c
      setProjects(prev => prev.map(project => 
        project._id === id ? { 
          ...project, 
          is_deleted: false, 
          deleted_at: null 
        } : project
      ));
      console.log("‚úÖ useProjects: Optimistic restore applied");

      // 2. G·ªçi API
      await restoreProject(id);
      console.log("‚úÖ useProjects: API call successful");
      
      return { success: true, message: "Kh√¥i ph·ª•c d·ª± √°n th√†nh c√¥ng" };
      
    } catch (err: any) {
      // 3. Rollback
      setProjects(oldProjects);
      console.error("‚ùå useProjects: Error restoring project, rollback applied", err);
      
      let errorMessage = "L·ªói khi kh√¥i ph·ª•c d·ª± √°n";
      if (err?.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      return { success: false, message: errorMessage };
    }
  };

  // Auto-fetch projects khi hook ƒë∆∞·ª£c mount (ch·ªâ 1 l·∫ßn)
  useEffect(() => {
    if (!hasFetchedRef.current) {
      hasFetchedRef.current = true;
      fetchProjects();
    }
  }, [fetchProjects]);

  return {
    // State
    projects,
    loading,
    error,
    
    // Actions v·ªõi optimistic updates
    fetchProjects,
    createProject: createProjectWithOptimisticUpdate,
    updateProject: updateProjectWithOptimisticUpdate,
    deleteProject: deleteProjectWithOptimisticUpdate,
    restoreProject: restoreProjectWithOptimisticUpdate,
  };
}
