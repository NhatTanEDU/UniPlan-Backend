/**
 * useTeamMembers Hook
 * --------------------
 * - Qu·∫£n l√Ω state danh s√°ch th√†nh vi√™n c·ªßa 1 team
 * - Cung c·∫•p c√°c h√†m: fetch, addMembers, updateRole, removeMember
 * - Socket.IO real-time updates for team member role changes
 */
import { useState, useEffect, useCallback, useContext } from "react";
import { teamMemberApi, TeamMember, AddMemberData, UpdateMemberRoleData } from "../../../../../services/teamMemberApi";
import { socket, joinTeamRoom, leaveTeamRoom } from "../../../../../services/socket";
import { AuthContext } from "../../../../context/AuthContext";

export function useTeamMembers(teamId: string) {
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [userRole, setUserRole] = useState<"Admin" | "Editor" | "Member" | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ AuthContext
  const { userId } = useContext(AuthContext);
  /**
   * fetchMembers()
   *  - G·ªçi API getTeamMembers(teamId)
   *  - C·∫≠p nh·∫≠t state members
   */  const fetchMembers = useCallback(async () => {
    if (!teamId) return;
    setLoading(true);
    setError(null);
    try {
      const membersArray = await teamMemberApi.getTeamMembers(teamId);
      console.log('üêõ useTeamMembers - API Response:', JSON.stringify(membersArray, null, 2));
      
      // --- FIX IS HERE ---
      // API service now returns the members array directly, not an object with members property
      if (Array.isArray(membersArray)) {
        console.log('üêõ useTeamMembers - Members array:', JSON.stringify(membersArray, null, 2));
        if (membersArray.length > 0) {
          console.log('üêõ useTeamMembers - First member structure:', JSON.stringify(membersArray[0], null, 2));
        }
        setMembers(membersArray); // Set state with the members array directly
      } else {
        console.warn('üêõ useTeamMembers - API response is not an array. Setting to empty.');
        setMembers([]); // Fallback to an empty array if the structure is wrong
      }
    } catch (err: any) {
      console.error('üêõ useTeamMembers - API Error:', err);
      setError(err.message || "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch th√†nh vi√™n");
    } finally {
      setLoading(false);
    }
  }, [teamId]);

  /**
   * fetchUserRole()
   *  - G·ªçi API getUserTeamRole(teamId)
   *  - C·∫≠p nh·∫≠t state userRole
   */  const fetchUserRole = useCallback(async () => {
    try {
      console.log('üîç Fetching user role for teamId:', teamId);
      const roleData = await teamMemberApi.getUserTeamRole(teamId);
      console.log('‚úÖ Fetched userRole data:', roleData);
      console.log('üìã Setting userRole to:', roleData.userRole);
      setUserRole(roleData.userRole);
    } catch (err: any) {
      console.error('üêõ useTeamMembers - Role API Error:', err);
      console.error('üîç Error details:', {
        message: err.message,
        status: err.response?.status,
        statusText: err.response?.statusText,
        responseData: err.response?.data
      });
      // Kh√¥ng set error cho role fetch v√¨ kh√¥ng critical
      setUserRole(null);
    }
  }, [teamId]);

  /**
   * addMembers(list)
   *  - G·ªçi API bulkAddMembers, sau ƒë√≥ refetch
   */
  const addMembers = async (list: AddMemberData[]) => {
    await teamMemberApi.bulkAddMembers(teamId, list);
    await fetchMembers();
  };

  /**
   * updateMemberRole(memberId, data)
   *  - G·ªçi API updateMemberRole
   *  - Socket event s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t state, kh√¥ng c·∫ßn fetchMembers()
   */
  const updateRole = async (memberId: string, data: UpdateMemberRoleData) => {
    // Ch·ªâ c·∫ßn g·ªçi API, kh√¥ng c·∫ßn fetch l·∫°i
    // Server s·∫Ω ph√°t s·ª± ki·ªán socket v√† tr√¨nh l·∫Øng nghe trong useEffect s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t state
    await teamMemberApi.updateMemberRole(teamId, memberId, data);
  };

  /**
   * removeMember(memberId)
   *  - G·ªçi API removeMember, sau ƒë√≥ refetch
   */
  const removeMember = async (memberId: string) => {
    await teamMemberApi.removeMember(teamId, memberId);
    await fetchMembers();
  };
  // Auto fetch khi teamId thay ƒë·ªïi
  useEffect(() => {
    if (teamId) {
      fetchMembers();
      fetchUserRole();
      
      // Join team room for real-time updates
      joinTeamRoom(teamId);
      console.log(`üîî Joined team room: ${teamId}`);
      
      // Listen for team member updates
      const handleTeamMemberUpdate = (updatedMember: TeamMember) => {
        console.log('üîî [SOCKET] Received team member update:', updatedMember);
        
        // Update the specific member in the list
        setMembers(prevMembers => 
          prevMembers.map(member => 
            member._id === updatedMember._id ? updatedMember : member
          )
        );

        // =================================================================
        // ===== B·∫ÆT ƒê·∫¶U LOGIC QUAN TR·ªåNG C·∫¶N TH√äM V√ÄO ======================
        // =================================================================
        
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ ph·∫£i l√† ng∆∞·ªùi v·ª´a b·ªã thay ƒë·ªïi vai tr√≤ kh√¥ng
        // X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p user_id l√† object v√† string
        const updatedUserId = typeof updatedMember.user_id === 'object' 
          ? updatedMember.user_id._id 
          : updatedMember.user_id;
          
        if (updatedUserId === userId) {
          console.log('üëë [SOCKET] Your role has been changed! Reloading page to apply new permissions.');
          console.log('üîç [SOCKET] Details:', {
            updatedMemberUserId: updatedUserId,
            currentUserId: userId,
            newRole: updatedMember.role,
            memberName: updatedMember.user_id?.full_name || 'Unknown'
          });
          
          // Th√¥ng b√°o cho ng∆∞·ªùi d√πng (t√πy ch·ªçn nh∆∞ng n√™n c√≥)
          alert(`Vai tr√≤ c·ªßa b·∫°n trong nh√≥m ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh "${updatedMember.role}". Trang s·∫Ω ƒë∆∞·ª£c t·∫£i l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t quy·ªÅn h·∫°n.`);

          // T·∫£i l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t to√†n b·ªô context v√† quy·ªÅn h·∫°n
          window.location.reload();
        }
        // =================================================================
        // ===== K·∫æT TH√öC LOGIC QUAN TR·ªåNG C·∫¶N TH√äM V√ÄO  ======================
        // =================================================================
      };

      socket.on('team:member_updated', handleTeamMemberUpdate);

      // Cleanup on unmount or teamId change
      return () => {
        socket.off('team:member_updated', handleTeamMemberUpdate);
        leaveTeamRoom(teamId);
        console.log(`üîå Left team room: ${teamId}`);
      };
    }
  }, [fetchMembers, fetchUserRole, teamId, userId]); // << TH√äM userId V√ÄO DEPENDENCY ARRAY

  return { members, userRole, loading, error, fetchMembers, addMembers, updateRole, removeMember };
} 