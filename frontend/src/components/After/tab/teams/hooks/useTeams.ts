/**
 * useTeams Hook
 * -------------------
 * - Qu·∫£n l√Ω state danh s√°ch teams (loading, error, data)
 * - Cung c·∫•p c√°c h√†m: fetchTeams, createTeam, updateTeam, deleteTeam
 * - H·ªó tr·ª£ optimistic updates v√† th√¥ng b√°o th√†nh c√¥ng/l·ªói
 * - T·ª± ƒë·ªông c·∫≠p nh·∫≠t UI sau m·ªói thao t√°c CRUD
 */
import { useState, useEffect, useCallback } from "react";
import { teamApi, Team } from "../../../../../services/teamApi"; // Adjusted path based on typical folder structure

export function useTeams() {
  const [teams, setTeams] = useState<Team[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  /**
   * fetchTeams()
   *  - G·ªçi API getTeams()
   *  - C·∫≠p nh·∫≠t state: teams, loading, error
   */
  const fetchTeams = useCallback(async () => {
    console.log("üîÑ useTeams: fetchTeams called");
    setLoading(true);
    setError(null);
    try {
      const res = await teamApi.getTeams();
      console.log("‚úÖ useTeams: API response received", { teamsCount: res.teams?.length });
      setTeams(res.teams);
      console.log("‚úÖ useTeams: State updated with new teams");
    } catch (err: any) {
      console.error("‚ùå useTeams: Error fetching teams", err);
      setError(err.message || "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch nh√≥m");
    } finally {
      setLoading(false);
    }
  }, []);
  /**
   * createTeam(data)
   *  - G·ªçi API t·∫°o team m·ªõi
   *  - Optimistic update: th√™m team m·ªõi v√†o state ngay l·∫≠p t·ª©c
   *  - N·∫øu th·∫•t b·∫°i: rollback v√† hi·ªÉn th·ªã l·ªói
   *  - Tr·∫£ v·ªÅ { success: boolean, message: string }
   */
  const createTeam = async (data: { name: string; description?: string; type: "Public" | "Private" }) => {
    try {
      console.log("üîÑ useTeams: createTeam called", data);      // Optimistic update: t·∫°o temporary team v·ªõi ID ng·∫´u nhi√™n
      const tempId = `temp_${Date.now()}`;
      const tempTeam: Team = {
        _id: tempId,
        name: data.name,
        description: data.description || '',
        type: data.type,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      // Th√™m v√†o state ngay l·∫≠p t·ª©c
      setTeams(prev => [...prev, tempTeam]);
      console.log("‚úÖ useTeams: Temporary team added to state");
      
      // G·ªçi API th·ª±c t·∫ø
      const response = await teamApi.createTeam(data);
      console.log("‚úÖ useTeams: API create successful", response);
      
      // Thay th·∫ø temp team b·∫±ng team th·ª±c t·ª´ server
      setTeams(prev => prev.map(team => 
        team._id === tempId ? { ...response.team } : team
      ));
      
      return { success: true, message: "Th√™m nh√≥m th√†nh c√¥ng" };
    } catch (err: any) {
      console.error("‚ùå useTeams: Error creating team", err);
      
      // Rollback: x√≥a temp team kh·ªèi state
      setTeams(prev => prev.filter(team => !team._id.startsWith('temp_')));
      
      return { 
        success: false, 
        message: err.message || "Kh√¥ng th·ªÉ t·∫°o nh√≥m m·ªõi" 
      };
    }
  };  /**
   * updateTeam(id, data)
   *  - G·ªçi API c·∫≠p nh·∫≠t team theo id
   *  - Optimistic update: c·∫≠p nh·∫≠t state tr∆∞·ªõc khi g·ªçi API
   *  - N·∫øu th·∫•t b·∫°i: rollback v√† hi·ªÉn th·ªã l·ªói
   *  - Tr·∫£ v·ªÅ { success: boolean, message: string }
   */
  const updateTeam = async (id: string, data: { name?: string; description?: string; type?: "Public" | "Private" }) => {
    // L∆∞u l·∫°i team c≈© ƒë·ªÉ rollback n·∫øu c·∫ßn TR∆Ø·ªöC KHI update
    const oldTeam = teams.find(team => team._id === id);
    if (!oldTeam) {
      return { 
        success: false, 
        message: "Kh√¥ng t√¨m th·∫•y nh√≥m ƒë·ªÉ c·∫≠p nh·∫≠t" 
      };
    }
    
    try {
      console.log("üîÑ useTeams: updateTeam called", { id, data });
        // Optimistic update: c·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c
      setTeams(prev => prev.map(team => 
        team._id === id 
          ? { ...team, ...data, updatedAt: new Date() }
          : team
      ));
      console.log("‚úÖ useTeams: Optimistic update applied");
      
      // G·ªçi API th·ª±c t·∫ø
      const response = await teamApi.updateTeam(id, data);
      console.log("‚úÖ useTeams: API update successful", response);
      
      // C·∫≠p nh·∫≠t l·∫°i v·ªõi d·ªØ li·ªáu ch√≠nh x√°c t·ª´ server
      setTeams(prev => prev.map(team => 
        team._id === id ? { ...response.team } : team
      ));
      
      return { success: true, message: "Ch·ªânh s·ª≠a nh√≥m th√†nh c√¥ng" };
    } catch (err: any) {
      console.error("‚ùå useTeams: Error updating team", err);
      
      // Rollback: kh√¥i ph·ª•c team c≈©
      setTeams(prev => prev.map(team => 
        team._id === id ? oldTeam : team
      ));
      
      return { 
        success: false, 
        message: err.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√≥m" 
      };
    }
  };/**
   * deleteTeam(id)
   *  - G·ªçi API x√≥a team
   *  - Optimistic update: x√≥a kh·ªèi state ngay l·∫≠p t·ª©c
   *  - N·∫øu th·∫•t b·∫°i: rollback v√† hi·ªÉn th·ªã l·ªói
   *  - Tr·∫£ v·ªÅ { success: boolean, message: string }
   */
  const deleteTeam = async (id: string) => {
    // L∆∞u l·∫°i team c≈© ƒë·ªÉ rollback n·∫øu c·∫ßn TR∆Ø·ªöC KHI x√≥a
    const oldTeam = teams.find(team => team._id === id);
    if (!oldTeam) {
      return { 
        success: false, 
        message: "Kh√¥ng t√¨m th·∫•y nh√≥m ƒë·ªÉ x√≥a" 
      };
    }
    
    try {
      console.log("üîÑ useTeams: deleteTeam called", id);
      
      // Optimistic update: x√≥a kh·ªèi state ngay l·∫≠p t·ª©c
      setTeams(prev => prev.filter(team => team._id !== id));
      console.log("‚úÖ useTeams: Team removed from state optimistically");
      
      // G·ªçi API th·ª±c t·∫ø
      await teamApi.deleteTeam(id);
      console.log("‚úÖ useTeams: API delete successful");
      
      return { success: true, message: "X√≥a nh√≥m th√†nh c√¥ng" };
    } catch (err: any) {
      console.error("‚ùå useTeams: Error deleting team", err);
      
      // Rollback: th√™m l·∫°i team v√†o v·ªã tr√≠ c≈©
      setTeams(prev => [...prev, oldTeam].sort((a, b) => 
        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      ));
      
      return { 
        success: false, 
        message: err.message || "Kh√¥ng th·ªÉ x√≥a nh√≥m" 
      };
    }
  };

  // Khi component mount, t·ª± ƒë·ªông fetch l·∫ßn ƒë·∫ßu
  useEffect(() => {
    fetchTeams();
  }, [fetchTeams]);

  return { teams, loading, error, fetchTeams, createTeam, updateTeam, deleteTeam };
}