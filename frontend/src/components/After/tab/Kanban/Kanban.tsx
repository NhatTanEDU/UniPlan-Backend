import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { DragDropContext, Droppable, Draggable, DropResult } from '@hello-pangea/dnd';
import Header from "../../Header";
import Sidebar from "../../Sidebar";
import Footer from "../../../Footer";
import TopButton from "../../../TopButton";
import Breadcrumb from "../../Breadcrumb";
import { UserCircle, Clock, Pin, Edit, Trash, AlertCircle, Paperclip, FileText, Trash2, Calendar } from "lucide-react";
import { projectApi } from "../../../../services/projectApi";
import { kanbanApi, KanbanTask, ProjectMember, Document as KanbanDocument } from "../../../../services/kanbanApi";
import { teamMemberApi } from "../../../../services/teamMemberApi";
import { userPermissionsApi } from "../../../../services/userPermissionsApi";
import DocumentUpload from "../../../common/DocumentUpload";
import { socket, joinKanbanRoom, leaveKanbanRoom } from "../../../../services/socket";

// Helper function ƒë·ªÉ l√†m s·∫°ch t√™n d·ª± √°n, lo·∫°i b·ªè ID
const cleanProjectName = (projectName: string): string => {
  if (!projectName) return projectName;
  
  // Lo·∫°i b·ªè c√°c pattern ID ph·ªï bi·∫øn:
  // - " - 123456789" (d·∫•u g·∫°ch ngang + s·ªë)
  // - " 123456789" (ch·ªâ s·ªë ·ªü cu·ªëi)
  // - C√°c ID d√†i h∆°n 8 k√Ω t·ª±
  return projectName
    .replace(/\s*-\s*\d{8,}$/g, '') // Lo·∫°i b·ªè " - 123456789" ·ªü cu·ªëi
    .replace(/\s+\d{8,}$/g, '') // Lo·∫°i b·ªè " 123456789" ·ªü cu·ªëi
    .trim();
};

const STATUS = ["C·∫ßn l√†m", "ƒêang l√†m", "Ho√†n th√†nh"];

const Kanban = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const [tasks, setTasks] = useState<KanbanTask[]>([]);
  const [showForm, setShowForm] = useState(false);  const [editingTask, setEditingTask] = useState<KanbanTask | null>(null);
  const [projectMembers, setProjectMembers] = useState<ProjectMember[]>([]);
  const [teamMembers, setTeamMembers] = useState<any[]>([]);
  const [currentProject, setCurrentProject] = useState<any>(null);
  const [currentKanban, setCurrentKanban] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  // Permission state
  const [currentUserRole, setCurrentUserRole] = useState<string>('');
  const [userPermissions, setUserPermissions] = useState<string[]>([]);
  const [isLoadingPermissions, setIsLoadingPermissions] = useState(true);
  const [permissionsError, setPermissionsError] = useState<string>('');
  // Document management state
  const [taskDocuments, setTaskDocuments] = useState<KanbanDocument[]>([]);
  const [loadingDocs, setLoadingDocs] = useState(false);

  const [form, setForm] = useState({
    title: "",
    description: "",
    start_date: "",
    due_date: "",
    priority: "Trung b√¨nh" as "Th·∫•p" | "Trung b√¨nh" | "Cao",
    status: "C·∫ßn l√†m" as "C·∫ßn l√†m" | "ƒêang l√†m" | "Ho√†n th√†nh",    assigned_to: "",
    color: "#ffffff",  });
  // Debug useEffect to monitor showForm state changes
  useEffect(() => {
    console.log("üîç DEBUG: showForm state changed to:", showForm);
  }, [showForm]);

  // Debug useEffect to monitor currentProject state changes
  useEffect(() => {
    console.log("üîç DEBUG: currentProject state changed to:", currentProject);  }, [currentProject]);

  // ...existing code...

  // Debug useEffect to monitor loading state changes
  useEffect(() => {
    console.log("üîç DEBUG: loading state changed to:", loading);
  }, [loading]);

  // Debug useEffect to monitor tasks and STATUS
  useEffect(() => {
    console.log("üîç DEBUG: tasks length:", tasks.length);
    console.log("üîç DEBUG: STATUS array:", STATUS);
    console.log("üîç DEBUG: tasks by status:", STATUS.map(status => ({
      status,
      count: tasks.filter(t => t.status === status).length
    })));
  }, [tasks]);

  // Debug useEffect to log when DragDropContext is rendered
  useEffect(() => {
    console.log("üîç DEBUG: Component mounted, DragDropContext should be rendered");
    console.log("üîç DEBUG: Available droppableIds:", STATUS);
  }, []);

  // Load project and kanban data when component mounts
  useEffect(() => {
    const loadData = async () => {
      try {
        console.log("üîç DEBUG: loadData called");
        console.log("üîç DEBUG: projectId from useParams:", projectId);
        setLoading(true);
        setError('');
        
        // Use projectId from URL params, fall back to localStorage if needed
        const currentProjectId = projectId 
          || new URLSearchParams(window.location.search).get('projectId') 
          || localStorage.getItem('selectedProjectId');
        
        console.log("üîç DEBUG: currentProjectId resolved to:", currentProjectId);        
        if (currentProjectId) {
          console.log("üîç DEBUG: currentProjectId exists, proceeding with data loading");          // Fetch project details
          const projectDetails = await projectApi.getProject(currentProjectId);
          console.log("üîç DEBUG: projectDetails loaded:", projectDetails);
          setCurrentProject(projectDetails);
            // Load project members
          try {
            console.log("üîç DEBUG: Loading project members for projectId:", currentProjectId);
            const members = await kanbanApi.getProjectMembers(currentProjectId);
            console.log("üîç DEBUG: projectMembers loaded:", members);
            setProjectMembers(members);
          } catch (memberError) {
            console.warn('Could not load project members:', memberError);
            setProjectMembers([]);
          }          // Load team members if project belongs to a team
          if (projectDetails.team_id) {
            try {
              console.log("üîç DEBUG: Loading team members for teamId:", projectDetails.team_id);
              const teamMembersResponse = await teamMemberApi.getTeamMembers(projectDetails.team_id);
              console.log("üîç DEBUG: teamMembers loaded:", teamMembersResponse);
              // API service ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp
              setTeamMembers(teamMembersResponse || []);
            } catch (teamMemberError) {
              console.warn('Could not load team members:', teamMemberError);
              setTeamMembers([]);
            }
          } else {
            console.log("üîç DEBUG: Project does not belong to any team, using project members");
            setTeamMembers([]);
          }
            // ‚úÖ LOGIC M·ªöI: T√åM TR∆Ø·ªöC, T·∫†O SAU N·∫æU C·∫¶N (ƒë·ªÉ tr√°nh l·ªói 409 Conflict)
          let kanbanId: string;
          let kanbanData: any;
          let tasks: KanbanTask[] = [];
          
          console.log("üîç DEBUG: B·∫Øt ƒë·∫ßu logic 'find-first, create-if-not-found' cho project:", currentProjectId);
          
          // B∆∞·ªõc 1: T√¨m Kanban hi·ªán c√≥ cho d·ª± √°n n√†y
          try {
            console.log("üîç DEBUG: [STEP 1] T√¨m Kanban hi·ªán c√≥ cho d·ª± √°n...");
            const findResult = await kanbanApi.findKanbanByProject(currentProjectId);
            console.log("üîç DEBUG: findKanbanByProject result:", findResult);
            
            if (findResult.success && findResult.found) {
              // ƒê√£ t√¨m th·∫•y Kanban hi·ªán c√≥
              kanbanData = findResult.data;
              kanbanId = kanbanData.kanban._id;
              tasks = kanbanData.tasks || [];
              
              console.log("‚úÖ DEBUG: [FOUND] ƒê√£ t√¨m th·∫•y Kanban hi·ªán c√≥:", {
                kanbanId,
                tasksCount: tasks.length,
                projectName: kanbanData.project_name
              });
              
              setCurrentKanban(kanbanData.kanban);
              // C·∫≠p nh·∫≠t localStorage ƒë·ªÉ ƒë·ªìng b·ªô
              localStorage.setItem(`kanban_${currentProjectId}`, kanbanId);
              
            } else if (findResult.success && !findResult.found) {
              // Ch∆∞a c√≥ Kanban, t·∫°o m·ªõi
              console.log("üìù DEBUG: [NOT FOUND] Ch∆∞a c√≥ Kanban, t·∫°o m·ªõi...");
              const newKanban = await kanbanApi.createKanban({
                project_id: currentProjectId,
                name: `Kanban - ${projectDetails.project_name}`,
                description: 'B·∫£ng qu·∫£n l√Ω c√¥ng vi·ªác ch√≠nh'
              });
              
              kanbanId = newKanban._id!;
              kanbanData = { kanban: newKanban };
              tasks = [];
              
              console.log("‚úÖ DEBUG: [CREATED] ƒê√£ t·∫°o Kanban m·ªõi:", {
                kanbanId,
                name: newKanban.name
              });
              
              setCurrentKanban(newKanban);
              localStorage.setItem(`kanban_${currentProjectId}`, kanbanId);
              
            } else {
              // L·ªói API
              throw new Error(findResult.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t√¨m Kanban');
            }
            
          } catch (kanbanError: any) {
            console.error("‚ùå DEBUG: L·ªói trong qu√° tr√¨nh find-first, create-if-not-found:", kanbanError);
            throw new Error('Kh√¥ng th·ªÉ t·∫£i ho·∫∑c t·∫°o b·∫£ng Kanban cho d·ª± √°n n√†y: ' + kanbanError.message);
          }          // ‚úÖ B∆Ø·ªöC 2: X·ª¨ L√ù TASKS
          // N·∫øu ƒë√£ c√≥ tasks t·ª´ findKanbanByProject, s·ª≠ d·ª•ng lu√¥n
          // N·∫øu kh√¥ng c√≥ (Kanban m·ªõi t·∫°o), tasks ƒë√£ ƒë∆∞·ª£c set = []
          console.log("üîç DEBUG: [STEP 2] X·ª≠ l√Ω tasks, s·ªë l∆∞·ª£ng hi·ªán t·∫°i:", tasks.length);
            if (tasks.length > 0) {
            console.log("‚úÖ DEBUG: S·ª≠ d·ª•ng tasks c√≥ s·∫µn t·ª´ API findKanbanByProject");
            // Tasks already have documents populated from backend
            setTasks(tasks);
          } else {
            console.log("üìù DEBUG: Kh√¥ng c√≥ tasks, set tasks = []");
            setTasks([]);
          }
        } else {
          console.log("üîç DEBUG: No projectId found");
          setError('Kh√¥ng t√¨m th·∫•y d·ª± √°n. Vui l√≤ng ch·ªçn d·ª± √°n tr∆∞·ªõc.');
        }
      } catch (error: any) {
        console.error('Error loading data:', error);
        setError(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu');
      } finally {
        setLoading(false);
      }    };    loadData();
  }, [projectId]); // Add projectId dependency

  // Debug useEffect to monitor showForm state changes
  useEffect(() => {
    console.log("üîç DEBUG: showForm state changed to:", showForm);
  }, [showForm]);

  // Socket management useEffect
  useEffect(() => {
    if (currentKanban?._id) {
      console.log('üîå Joining Kanban room:', currentKanban._id);
      joinKanbanRoom(currentKanban._id);

      // Set up socket event listener - ch·ªâ c·∫ßn 1 listener duy nh·∫•t
      const handleKanbanUpdated = (fullTaskListFromServer: KanbanTask[]) => {
        console.log('üîå Received full kanban update. Tasks count:', fullTaskListFromServer.length);
        setTasks(fullTaskListFromServer);
      };

      // Register socket event listener
      socket.on('kanban:updated', handleKanbanUpdated);

      // Cleanup function
      return () => {
        console.log('üîå Leaving Kanban room:', currentKanban._id);
        leaveKanbanRoom(currentKanban._id);
        socket.off('kanban:updated', handleKanbanUpdated);
      };
    }
  }, [currentKanban]);

  // Utility functions
  const resetForm = () => {
    console.log("üîç DEBUG: resetForm called");
    console.log("üîç DEBUG: Current form state before reset:", form);
      setForm({
      title: "",
      description: "",
      start_date: "",
      due_date: "",
      priority: "Trung b√¨nh" as "Th·∫•p" | "Trung b√¨nh" | "Cao",
      status: "C·∫ßn l√†m" as "C·∫ßn l√†m" | "ƒêang l√†m" | "Ho√†n th√†nh",
      assigned_to: "",
      color: "#ffffff",
    });
    setEditingTask(null);
    setTaskDocuments([]); // Reset documents state
    setLoadingDocs(false); // Reset loading state
    
    console.log("üîç DEBUG: Form reset completed, editingTask set to null");
  };
  // Get assignable members - prioritize team members if available, fallback to project members
  const getAssignableMembers = () => {
    if (currentProject?.team_id && teamMembers && teamMembers.length > 0) {
      console.log("üîç DEBUG: Using team members for assignment:", teamMembers.length);
      return teamMembers.map(teamMember => ({
        _id: teamMember.user?.id || teamMember.user?.id,
        name: teamMember.user?.full_name || teamMember.user?.name || 'Unknown User',
        email: teamMember.user?.email || '',
        role: teamMember.role
      }));
    } else {
      console.log("üîç DEBUG: Using project members for assignment:", projectMembers?.length || 0);
      return projectMembers || [];
    }
  };

  const showSuccessMessage = (message: string) => {
    setSuccess(message);
    setTimeout(() => setSuccess(''), 3000);
  };

  const showErrorMessage = (message: string) => {
    setError(message);
    setTimeout(() => setError(''), 5000);
  };

  // Validate form data
  const validateForm = () => {
    if (!form.title.trim()) {
      showErrorMessage('T√™n c√¥ng vi·ªác kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      return false;
    }

    if (form.start_date && form.due_date) {
      const startDate = new Date(form.start_date);
      const dueDate = new Date(form.due_date);
      
      if (startDate > dueDate) {
        showErrorMessage('Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c');
        return false;
      }
    }

    // Validate against project dates
    if (currentProject) {
      const projectStartDate = new Date(currentProject.start_date);
      const projectEndDate = new Date(currentProject.end_date);
      
      if (form.start_date) {
        const taskStartDate = new Date(form.start_date);
        if (taskStartDate < projectStartDate) {
          showErrorMessage('Ng√†y b·∫Øt ƒë·∫ßu c√¥ng vi·ªác kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu d·ª± √°n');
          return false;
        }
      }
      
      if (form.due_date) {
        const taskDueDate = new Date(form.due_date);
        if (taskDueDate > projectEndDate) {
          showErrorMessage('Ng√†y k·∫øt th√∫c c√¥ng vi·ªác kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c d·ª± √°n');
          return false;
        }
      }
    }

    return true;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    console.log("üîç DEBUG: handleSubmit called");
    console.log("üîç DEBUG: currentProject:", currentProject);
    console.log("üîç DEBUG: currentKanban:", currentKanban);
    
    // Ensure we have required data
    if (!currentProject || !currentKanban) {
      showErrorMessage('D·ªØ li·ªáu d·ª± √°n ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
      return;
    }
    
    if (!validateForm()) return;

    try {
      setSaving(true);
      setError('');      // ƒê·∫£m b·∫£o assigned_to l√† string ID ho·∫∑c null/undefined
      const assignedToId = form.assigned_to && typeof form.assigned_to === 'object' 
        ? (form.assigned_to as any)._id 
        : form.assigned_to;

      if (editingTask && editingTask._id) {        // Update existing task - ch·ªâ g·ª≠i c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
        const taskDataForUpdate = {
          title: form.title,
          description: form.description,
          start_date: form.start_date || undefined,
          due_date: form.due_date || undefined,
          priority: form.priority,
          status: form.status,
          assigned_to: assignedToId || undefined,
          color: form.color
        };
        
        console.log("üîç DEBUG: Data being sent for UPDATE:", taskDataForUpdate);
        const updatedTask = await kanbanApi.updateTask(editingTask._id, taskDataForUpdate);
        setTasks(tasks.map(task => task._id === editingTask._id ? updatedTask : task));
        showSuccessMessage('C·∫≠p nh·∫≠t c√¥ng vi·ªác th√†nh c√¥ng');
      } else {        // Create new task
        const taskDataForCreate = {
          ...form,
          assigned_to: assignedToId || undefined,
          kanban_id: currentKanban._id,
          project_id: currentProject._id,
          is_pinned: false
        };
        
        console.log("üîç DEBUG: Data being sent for CREATE:", taskDataForCreate);
        const newTask = await kanbanApi.createTask(taskDataForCreate);
        setTasks([...tasks, newTask]);
        showSuccessMessage('T·∫°o c√¥ng vi·ªác th√†nh c√¥ng');
      }

      setShowForm(false);
      resetForm();
    } catch (error: any) {
      console.error('Error saving task:', error);
      
      // Logic x·ª≠ l√Ω l·ªói m·ªõi
      if (error.response && error.response.status === 403) {
        // N·∫øu l√† l·ªói 403, hi·ªÉn th·ªã th√¥ng b√°o t·ª´ backend
        showErrorMessage(error.response.data.message || 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.');
      } else {
        // ƒê·ªëi v·ªõi c√°c l·ªói kh√°c, gi·ªØ th√¥ng b√°o chung
        showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi l∆∞u c√¥ng vi·ªác');
      }
    } finally {
      setSaving(false);
    }  };
  
  // Task management functions
  const handleEditTask = async (task: KanbanTask) => {
    setEditingTask(task);
    
    // ƒê·∫£m b·∫£o assigned_to ƒë∆∞·ª£c set ƒë√∫ng ƒë·ªãnh d·∫°ng (string ID)
    const assignedToId = task.assigned_to && typeof task.assigned_to === 'object' 
      ? (task.assigned_to as any)._id 
      : task.assigned_to;
    
    setForm({
      title: task.title,
      description: task.description || "",
      start_date: task.start_date ? new Date(task.start_date).toISOString().split('T')[0] : "",
      due_date: task.due_date ? new Date(task.due_date).toISOString().split('T')[0] : "",
      priority: task.priority,
      status: task.status,
      assigned_to: assignedToId || "",
      color: task.color || "#ffffff",
    });
    setShowForm(true);

    // T·∫£i danh s√°ch t√†i li·ªáu cho task n√†y
    if (task._id) {
      setLoadingDocs(true);
      try {
        const documents = await kanbanApi.getTaskDocuments(task._id);
        setTaskDocuments(documents);
      } catch (error) {
        console.error("L·ªói khi t·∫£i t√†i li·ªáu c·ªßa task:", error);
        setTaskDocuments([]); // Reset n·∫øu c√≥ l·ªói
      } finally {
        setLoadingDocs(false);
      }
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¥ng vi·ªác n√†y?')) return;

    try {
      await kanbanApi.deleteTask(taskId);
      setTasks(tasks.filter(task => task._id !== taskId));
      showSuccessMessage('X√≥a c√¥ng vi·ªác th√†nh c√¥ng');
    } catch (error: any) {
      console.error('Error deleting task:', error);
      
      // Logic x·ª≠ l√Ω l·ªói m·ªõi
      if (error.response && error.response.status === 403) {
        showErrorMessage(error.response.data.message || 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.');
      } else {
        showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi x√≥a c√¥ng vi·ªác');
      }
    }
  };
  const handleTogglePin = async (taskId: string) => {
    try {
      const updatedTask = await kanbanApi.toggleTaskPin(taskId);
      setTasks(tasks.map(task => task._id === taskId ? updatedTask : task));
      showSuccessMessage(updatedTask.is_pinned ? 'ƒê√£ ghim c√¥ng vi·ªác' : 'ƒê√£ b·ªè ghim c√¥ng vi·ªác');
    } catch (error: any) {
      console.error('Error toggling pin:', error);
      showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi ghim/b·ªè ghim c√¥ng vi·ªác');
    }  };
  
  const handleDeleteDocument = async (documentId: string) => {
    if (!editingTask?._id || !window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i li·ªáu n√†y?')) {
      return;
    }

    try {
      await kanbanApi.deleteTaskDocument(editingTask._id, documentId);
      // C·∫≠p nh·∫≠t l·∫°i UI
      setTaskDocuments(prev => prev.filter(doc => doc._id !== documentId));
      // C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng document tr√™n task card
      setTasks(prevTasks => prevTasks.map(t => 
          t._id === editingTask._id 
            ? { ...t, documents: t.documents?.filter((doc: any) => doc._id !== documentId) } 
            : t
      ));
      showSuccessMessage('ƒê√£ x√≥a t√†i li·ªáu.');
    } catch (error: any) {
      console.error('L·ªói khi x√≥a t√†i li·ªáu:', error);
      showErrorMessage('Kh√¥ng th·ªÉ x√≥a t√†i li·ªáu.');
    }
  };
  
  // Drag and Drop Handler
  const handleOnDragEnd = async (result: DropResult) => {
    console.log("üîç DEBUG: handleOnDragEnd called with result:", result);
    const { destination, source, draggableId } = result;

    console.log("üîç DEBUG: Available STATUS array:", STATUS);
    console.log("üîç DEBUG: Source droppableId:", source.droppableId);
    console.log("üîç DEBUG: Destination droppableId:", destination?.droppableId);
    console.log("üîç DEBUG: DraggableId:", draggableId);

    // N·∫øu kh√¥ng c√≥ destination ho·∫∑c v·ªã tr√≠ kh√¥ng thay ƒë·ªïi
    if (!destination || 
        (destination.droppableId === source.droppableId && destination.index === source.index)) {
      console.log("üîç DEBUG: Early return - no destination or same position");
      return;
    }

    try {
      // L·∫•y task ƒë∆∞·ª£c k√©o
      const draggedTask = tasks.find(task => task._id === draggableId);
      if (!draggedTask) return;

      // T·∫°o b·∫£n copy c·ªßa tasks ƒë·ªÉ c·∫≠p nh·∫≠t UI optimistically
      const newTasks = [...tasks];
      
      // L·ªçc ra tasks theo column
      const sourceColumnTasks = newTasks.filter(task => task.status === source.droppableId);
      const destColumnTasks = newTasks.filter(task => task.status === destination.droppableId);

      // N·∫øu di chuy·ªÉn trong c√πng column
      if (source.droppableId === destination.droppableId) {
        // S·∫Øp x·∫øp l·∫°i th·ª© t·ª± trong c√πng column
        const reorderedTasks = Array.from(sourceColumnTasks);
        const [movedTask] = reorderedTasks.splice(source.index, 1);
        reorderedTasks.splice(destination.index, 0, movedTask);

        // C·∫≠p nh·∫≠t order cho c√°c tasks trong column
        const updatedTasksData = reorderedTasks.map((task, index) => ({
          _id: task._id!,
          status: source.droppableId,
          order: index + 1
        }));

        // C·∫≠p nh·∫≠t UI optimistically
        const allTasksUpdated = newTasks.map(task => {
          const updatedData = updatedTasksData.find(updated => updated._id === task._id);
          return updatedData ? { ...task, order: updatedData.order } : task;
        });
        setTasks(allTasksUpdated);

        // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t backend
        await kanbanApi.reorderTasks({ tasks: updatedTasksData });
        showSuccessMessage('ƒê√£ c·∫≠p nh·∫≠t th·ª© t·ª± c√¥ng vi·ªác');

      } else {
        // Di chuy·ªÉn gi·ªØa c√°c column kh√°c nhau
        
        // X√≥a task kh·ªèi source column
        const sourceTasksAfterRemoval = sourceColumnTasks.filter(task => task._id !== draggableId);
        
        // C·∫≠p nh·∫≠t task v·ªõi status m·ªõi v√† th√™m v√†o destination column
        const updatedDraggedTask = { ...draggedTask, status: destination.droppableId as any };
        destColumnTasks.splice(destination.index, 0, updatedDraggedTask);

        // T√≠nh to√°n l·∫°i order cho c·∫£ 2 columns
        const sourceUpdatedData = sourceTasksAfterRemoval.map((task, index) => ({
          _id: task._id!,
          status: source.droppableId,
          order: index + 1
        }));

        const destUpdatedData = destColumnTasks.map((task, index) => ({
          _id: task._id!,
          status: destination.droppableId,
          order: index + 1
        }));

        // K·∫øt h·ª£p t·∫•t c·∫£ updates
        const allUpdatedData = [...sourceUpdatedData, ...destUpdatedData];

        // C·∫≠p nh·∫≠t UI optimistically
        const allTasksUpdated = newTasks.map(task => {
          const updatedData = allUpdatedData.find(updated => updated._id === task._id);
          if (updatedData) {
            return { 
              ...task, 
              status: updatedData.status as any, 
              order: updatedData.order 
            };
          }
          return task;
        });
        setTasks(allTasksUpdated);

        // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t backend
        await kanbanApi.reorderTasks({ tasks: allUpdatedData });
        showSuccessMessage(`ƒê√£ chuy·ªÉn c√¥ng vi·ªác "${draggedTask.title}" sang ${destination.droppableId}`);
      }

    } catch (error: any) {
      console.error('Error handling drag and drop:', error);
      showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi di chuy·ªÉn c√¥ng vi·ªác');
      
      // Reload tasks ƒë·ªÉ ƒë·ªìng b·ªô l·∫°i v·ªõi backend n·∫øu c√≥ l·ªói
      if (currentKanban?._id) {
        try {
          const refreshedTasks = await kanbanApi.getTasks(currentKanban._id);
          setTasks(refreshedTasks);
        } catch (refreshError) {
          console.error('Error refreshing tasks:', refreshError);
        }
      }
    }
  };

  const handleStatusChange = async (taskId: string, newStatus: "C·∫ßn l√†m" | "ƒêang l√†m" | "Ho√†n th√†nh") => {
    try {
      // Ch·ªâ g·ª≠i field status khi c·∫≠p nh·∫≠t tr·∫°ng th√°i
      const updateData = { status: newStatus };
      console.log("üîç DEBUG: Status change data:", updateData);
      
      const updatedTask = await kanbanApi.updateTask(taskId, updateData);
      setTasks(tasks.map(task => task._id === taskId ? updatedTask : task));
      showSuccessMessage('C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng');
    } catch (error: any) {
      console.error('Error updating status:', error);
      showErrorMessage(error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');
    }
  };
  
  const handleCreateNewTask = () => {
    console.log("üîç DEBUG: handleCreateNewTask called");
    console.log("üîç DEBUG: showForm before reset:", showForm);
    console.log("üîç DEBUG: currentProject:", currentProject);
    console.log("üîç DEBUG: currentKanban:", currentKanban);
    
    // Ensure we have required data before allowing task creation
    if (!currentProject || !currentKanban) {
      console.log("üîç DEBUG: Missing required data - cannot create task");
      showErrorMessage('D·ªØ li·ªáu d·ª± √°n ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
      return;
    }
    
    resetForm();
    setShowForm(true);
    
    console.log("üîç DEBUG: setShowForm(true) called");
    console.log("üîç DEBUG: Expected showForm to be true after setState");
  };

  // Debug effect to ensure proper mounting
  useEffect(() => {
    if (!loading && currentKanban) {
      console.log("üîç DEBUG: Kanban is ready, currentKanban:", currentKanban._id);
      console.log("üîç DEBUG: Tasks loaded:", tasks.length);
      
      // Force a small delay to ensure DOM is ready
      setTimeout(() => {
        console.log("üîç DEBUG: DOM should be ready for drag and drop");
        const droppables = document.querySelectorAll('[data-rbd-droppable-id]');
        console.log("üîç DEBUG: Found droppable elements:", Array.from(droppables).map(el => el.getAttribute('data-rbd-droppable-id')));
      }, 100);
    }
  }, [loading, currentKanban, tasks.length]);  // Load user permissions from server
  useEffect(() => {
    const loadUserPermissions = async () => {
      if (!projectId) return;
      
      try {
        setIsLoadingPermissions(true);
        setPermissionsError('');
        
        const permissions = await userPermissionsApi.getUserPermissions(projectId);
        
        setCurrentUserRole(permissions.userRole);
        setUserPermissions(permissions.permissions);
        
        console.log('üîê Permissions loaded from server:', {
          role: permissions.userRole,
          permissions: permissions.permissions,
          isOwner: permissions.isOwner
        });
        
      } catch (error: any) {
        console.error('Failed to load user permissions:', error);
        setPermissionsError('Kh√¥ng th·ªÉ t·∫£i quy·ªÅn ng∆∞·ªùi d√πng');
        
        // Fallback to viewer permissions on error
        setCurrentUserRole('Ng∆∞·ªùi xem');
        setUserPermissions(['move']);
      } finally {
        setIsLoadingPermissions(false);
      }
    };

    loadUserPermissions();
  }, [projectId]);

  // Permission helper functions
  const canPerformAction = (action: string): boolean => {
    return userPermissions.includes(action);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex">
        <Sidebar />
        <div className="flex-1 flex flex-col overflow-hidden">
          <Header />
          <Breadcrumb items={["Dashboard", "D·ª± √Ån", "B·∫£ng Kanban"]} />
          <main className="flex-1 overflow-y-auto p-4">
            <div className="flex justify-center items-center h-64">
              <div className="text-lg text-gray-600 dark:text-gray-300">ƒêang t·∫£i...</div>
            </div>
          </main>
          <Footer onFooterClick={(item: string) => console.log(`Clicked ${item}`)} />
          <TopButton />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex">
      <Sidebar />
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header />
        <Breadcrumb items={["Dashboard", "D·ª± √Ån", "B·∫£ng Kanban"]} />
        <main className="flex-1 overflow-y-auto p-4">          <div className="mb-4 flex justify-between items-center">
            <h1 className="text-2xl font-bold text-gray-800 dark:text-gray-100">
              B·∫£ng Kanban {currentProject?.project_name && `- ${cleanProjectName(currentProject.project_name)}`}
            </h1><div className="flex items-center gap-4">              {loading && (
                <div className="flex items-center text-gray-600 dark:text-gray-300">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500 mr-2"></div>
                  ƒêang t·∫£i d·ªØ li·ªáu...
                </div>
              )}

              {isLoadingPermissions && (
                <div className="flex items-center text-gray-600 dark:text-gray-300">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-green-500 mr-2"></div>
                  ƒêang t·∫£i quy·ªÅn...
                </div>
              )}

              {!loading && (!currentProject || !currentKanban) && (
                <div className="text-sm text-yellow-600 dark:text-yellow-400">
                  D·ªØ li·ªáu ch∆∞a s·∫µn s√†ng
                </div>
              )}              {/* Permission Status Indicator */}
              {currentUserRole && !isLoadingPermissions && (
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Vai tr√≤: <span className="font-semibold">{currentUserRole}</span>
                </div>
              )}              {/* Gantt Chart Button - Show for all users */}
              {projectId && (() => {
                // Get userId from localStorage
                const user = localStorage.getItem('user');
                const userId = user ? JSON.parse(user).id : null;
                
                if (userId) {
                  return (
                    <Link
                      to={`/dashboard/${userId}?view=gantt&projectId=${projectId}`}
                      className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:opacity-50 flex items-center gap-2"
                      title="Xem d·∫°ng bi·ªÉu ƒë·ªì Gantt"
                    >
                      <Calendar size={16} />
                      Xem d·∫°ng Gantt
                    </Link>
                  );
                } else {
                  return (
                    <button
                      className="bg-gray-400 text-white px-4 py-2 rounded cursor-not-allowed disabled:opacity-50 flex items-center gap-2"
                      disabled
                      title="Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem bi·ªÉu ƒë·ªì Gantt"
                    >
                      <Calendar size={16} />
                      Xem d·∫°ng Gantt
                    </button>
                  );
                }
              })()}
              
              {/* Create Task Button - Only show for Admin and Editor */}
              {canPerformAction('create') && (
                <button
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
                  onClick={() => {
                    console.log("üîç DEBUG: + T·∫°o Task button clicked");
                    console.log("üîç DEBUG: saving state:", saving);
                    console.log("üîç DEBUG: currentProject exists:", !!currentProject);
                    console.log("üîç DEBUG: currentKanban exists:", !!currentKanban);
                    handleCreateNewTask();
                  }}
                  disabled={saving || !currentProject || !currentKanban}
                  title={(!currentProject || !currentKanban) ? "D·ªØ li·ªáu d·ª± √°n ch∆∞a s·∫µn s√†ng" : ""}
                >
                  + T·∫°o Task
                </button>
              )}
              {/* Permission denied message for viewers */}
              {!canPerformAction('create') && currentUserRole === 'Ng∆∞·ªùi xem' && (
                <div className="text-sm text-gray-500 dark:text-gray-400 italic">
                  Ch·ªâ c√≥ th·ªÉ xem v√† di chuy·ªÉn tasks
                </div>
              )}
            </div>
          </div>

          {success && (
            <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4 flex items-center">
              <AlertCircle size={20} className="mr-2" />
              {success}
              <button
                className="ml-auto text-green-500 hover:text-green-700"
                onClick={() => setSuccess('')}
              >
                √ó
              </button>
            </div>
          )}          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4 flex items-center">
              <AlertCircle size={20} className="mr-2" />
              {error}
              <button
                className="ml-auto text-red-500 hover:text-red-700"
                onClick={() => setError('')}
              >
                √ó
              </button>
            </div>          )}

          {permissionsError && (
            <div className="bg-orange-100 border border-orange-400 text-orange-700 px-4 py-3 rounded mb-4 flex items-center">
              <AlertCircle size={20} className="mr-2" />
              {permissionsError}
              <button
                className="ml-auto text-orange-500 hover:text-orange-700"
                onClick={() => setPermissionsError('')}
              >
                √ó
              </button>
            </div>
          )}
            {/* DEBUG LOG FOR FORM RENDERING */}
          {(() => {
            console.log("üîç DEBUG: Render check - showForm:", showForm);
            console.log("üîç DEBUG: Render check - currentProject:", !!currentProject);
            console.log("üîç DEBUG: Render check - currentKanban:", !!currentKanban);
            console.log("üîç DEBUG: Render check - loading:", loading);
            return null;
          })()}
          
          {showForm && (!currentProject || !currentKanban) && (
            <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4 flex items-center">
              <AlertCircle size={20} className="mr-2" />
              D·ªØ li·ªáu d·ª± √°n ch∆∞a ƒë∆∞·ª£c t·∫£i ho√†n ch·ªânh. Vui l√≤ng ƒë·ª£i ho·∫∑c t·∫£i l·∫°i trang.
              <button
                className="ml-auto text-yellow-500 hover:text-yellow-700"
                onClick={() => setShowForm(false)}
              >
                √ó
              </button>
            </div>
          )}
          
          {showForm && currentProject && currentKanban && (
            <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 p-6 rounded shadow mb-4">
              {(() => {
                console.log("üîç DEBUG: Form is being rendered with data!");
                console.log("üîç DEBUG: Project name:", currentProject.project_name);
                console.log("üîç DEBUG: Kanban name:", currentKanban.name);
                return null;
              })()}
              <h3 className="text-lg font-bold mb-4 text-gray-800 dark:text-gray-100">
                {editingTask ? 'C·∫≠p nh·∫≠t c√¥ng vi·ªác' : 'T·∫°o c√¥ng vi·ªác m·ªõi'}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {/* Task Title */}
                <div className="md:col-span-2">
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    T√™n c√¥ng vi·ªác *
                  </label>
                  <input
                    name="title"
                    value={form.title}
                    onChange={handleChange}
                    required
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Nh·∫≠p t√™n c√¥ng vi·ªác"
                  />
                </div>

                {/* Description */}
                <div className="md:col-span-2">
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    M√¥ t·∫£
                  </label>
                  <textarea
                    name="description"
                    value={form.description}
                    onChange={handleChange}
                    rows={3}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="M√¥ t·∫£ c√¥ng vi·ªác"
                  />
                </div>

                {/* Start Date */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Ng√†y b·∫Øt ƒë·∫ßu
                  </label>
                  <input
                    type="date"
                    name="start_date"
                    value={form.start_date}
                    onChange={handleChange}
                    min={currentProject?.start_date ? new Date(currentProject.start_date).toISOString().split('T')[0] : ''}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                {/* Due Date */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Ng√†y k·∫øt th√∫c
                  </label>
                  <input
                    type="date"
                    name="due_date"
                    value={form.due_date}
                    onChange={handleChange}
                    min={form.start_date || (currentProject?.start_date ? new Date(currentProject.start_date).toISOString().split('T')[0] : '')}
                    max={currentProject?.end_date ? new Date(currentProject.end_date).toISOString().split('T')[0] : ''}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                {/* Priority */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    ƒê·ªô ∆∞u ti√™n
                  </label>
                  <select
                    name="priority"
                    value={form.priority}
                    onChange={handleChange}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Th·∫•p">Th·∫•p</option>
                    <option value="Trung b√¨nh">Trung b√¨nh</option>
                    <option value="Cao">Cao</option>
                  </select>
                </div>

                {/* Status */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Tr·∫°ng th√°i
                  </label>
                  <select
                    name="status"
                    value={form.status}
                    onChange={handleChange}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="C·∫ßn l√†m">C·∫ßn l√†m</option>
                    <option value="ƒêang l√†m">ƒêang l√†m</option>
                    <option value="Ho√†n th√†nh">Ho√†n th√†nh</option>
                  </select>
                </div>                {/* Assigned To */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Ng∆∞·ªùi ƒë∆∞·ª£c giao
                  </label>                  <select
                    name="assigned_to"
                    value={form.assigned_to}
                    onChange={handleChange}
                    className="w-full border rounded px-3 py-2 dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Ch∆∞a giao</option>
                    {getAssignableMembers().map((member) => (
                      <option key={member._id} value={member._id}>
                        {member.name} ({member.email})
                      </option>
                    ))}
                  </select>
                </div>                {/* Color */}
                <div>
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    M√†u s·∫Øc
                  </label>
                  <input
                    type="color"
                    name="color"
                    value={form.color}
                    onChange={handleChange}
                    className="w-full h-10 border rounded dark:bg-gray-700 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>                {/* Document Upload Section */}
                <div className="md:col-span-2">
                  <label className="block font-medium text-gray-700 dark:text-gray-300 mb-1">
                    T√†i li·ªáu ƒë√≠nh k√®m
                  </label>
                  
                  {/* HI·ªÇN TH·ªä DANH S√ÅCH FILE ƒê√É UPLOAD */}
                  {editingTask && (
                    <div className="mb-4 space-y-2">
                      {loadingDocs && <p>ƒêang t·∫£i danh s√°ch t√†i li·ªáu...</p>}
                      {!loadingDocs && taskDocuments.map(doc => (
                        <div key={doc._id} className="flex items-center justify-between bg-gray-50 dark:bg-gray-700 p-2 rounded">
                          <div className="flex items-center gap-2">
                            <FileText size={16} />
                            <a href={doc.fileUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                              {doc.fileName}
                            </a>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-xs text-gray-500">{(doc.fileSize / 1024).toFixed(1)} KB</span>
                            <button
                              type="button"
                              onClick={() => handleDeleteDocument(doc._id)}
                              className="p-1 text-red-500 hover:bg-red-100 rounded"
                              title="X√≥a t√†i li·ªáu"
                            >
                              <Trash2 size={16} />
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  <DocumentUpload
                    taskId={editingTask?._id}
                    projectId={currentProject?._id}
                    teamId={currentProject?.team_id}
                    onDocumentsUpdate={async () => {
                      if (editingTask?._id) {
                        const documents = await kanbanApi.getTaskDocuments(editingTask._id);
                        setTaskDocuments(documents);
                      }
                    }}
                    className="mt-2"
                  />
                </div>
              </div>

              <div className="flex gap-2 mt-6 justify-end">
                <button
                  type="button"
                  className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400"
                  onClick={() => {
                    setShowForm(false);
                    resetForm();
                  }}
                  disabled={saving}
                >
                  H·ªßy
                </button>
                <button 
                  type="submit" 
                  className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50 flex items-center"
                  disabled={saving}
                >
                  {saving ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      ƒêang l∆∞u...
                    </>
                  ) : (
                    editingTask ? 'C·∫≠p nh·∫≠t' : 'T·∫°o'
                  )}
                </button>
              </div>
            </form>          )}          {!loading && currentKanban && (
            <DragDropContext 
              key={`kanban-dnd-${currentKanban?._id || 'default'}`}
              onDragEnd={handleOnDragEnd}
            >
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {STATUS.map((status) => (
                  <div
                    key={status}
                    className="bg-gray-100 dark:bg-gray-800 rounded p-3 min-h-[300px]"
                  >
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="text-lg font-bold text-gray-800 dark:text-gray-100">{status}</h3>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        ({tasks.filter((t) => t.status === status).length})
                      </span>
                    </div>
                    
                    <Droppable droppableId={status}>
                      {(provided, snapshot) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.droppableProps}
                          className={`space-y-2 min-h-[200px] transition-colors ${
                            snapshot.isDraggingOver ? 'bg-blue-50 dark:bg-blue-900/20 rounded-lg' : ''
                          }`}
                        >
                        {tasks
                          .filter((t) => t.status === status)
                          .sort((a, b) => {
                            // Pinned tasks first, then by order
                            if (a.is_pinned && !b.is_pinned) return -1;
                            if (!a.is_pinned && b.is_pinned) return 1;
                            return (a.order || 0) - (b.order || 0);                          })
                          .map((task, index) => {
                            const assignableMembers = getAssignableMembers();
                            const assignedMember = assignableMembers.find(m => m._id === task.assigned_to);
                            const isOverdue = task.due_date && new Date(task.due_date) < new Date() && task.status !== 'Ho√†n th√†nh';                            return (
                              <Draggable
                                key={`task-${task._id}`}
                                draggableId={task._id!}
                                index={index}
                                isDragDisabled={task.is_pinned || !canPerformAction('move')} // Disable drag for pinned tasks or users without move permission
                              >
                                {(provided, snapshot) => (
                                  <div
                                    ref={provided.innerRef}
                                    {...provided.draggableProps}
                                    {...provided.dragHandleProps}
                                    className={`bg-white dark:bg-gray-700 rounded shadow p-3 cursor-pointer hover:shadow-md transition-all relative border-l-4 group ${
                                      isOverdue ? 'border-red-500 bg-red-50 dark:bg-red-900/20' : ''
                                    } ${
                                      snapshot.isDragging ? 'rotate-2 shadow-lg scale-105' : ''
                                    } ${
                                      task.is_pinned || !canPerformAction('move') ? 'opacity-75 cursor-not-allowed' : ''
                                    }`}
                                    style={{ 
                                      backgroundColor: task.color !== '#ffffff' ? task.color : undefined,
                                      borderLeftColor: task.priority === 'Cao' ? '#ef4444' : 
                                                      task.priority === 'Trung b√¨nh' ? '#f59e0b' : '#10b981',
                                      ...provided.draggableProps.style
                                    }}
                                    title={!canPerformAction('move') ? 'B·∫°n kh√¥ng c√≥ quy·ªÅn di chuy·ªÉn task n√†y' : ''}
                                  >
                                    {/* Task Header */}
                                    <div className="flex justify-between items-start mb-2">
                                      <div className="flex items-center gap-2 flex-1">
                                        {task.is_pinned && (
                                          <Pin size={14} className="text-blue-500 fill-current" />
                                        )}
                                        <span className="font-bold text-gray-800 dark:text-gray-100 flex-1">
                                          {task.title}
                                        </span>
                                      </div>
                                        {/* Action Buttons */}
                                      <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                        {/* Pin Button - Only for Admin and Editor */}
                                        {canPerformAction('pin') && (
                                          <button
                                            onClick={(e) => {
                                              e.stopPropagation();
                                              handleTogglePin(task._id || '');
                                            }}
                                            className={`p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-600 ${
                                              task.is_pinned ? 'text-blue-500' : 'text-gray-400'
                                            }`}
                                            title={task.is_pinned ? 'B·ªè ghim' : 'Ghim'}
                                          >
                                            <Pin size={14} />
                                          </button>
                                        )}
                                        {/* Edit Button - Only for Admin and Editor */}
                                        {canPerformAction('edit') && (
                                          <button
                                            onClick={(e) => {
                                              e.stopPropagation();
                                              handleEditTask(task);
                                            }}
                                            className="p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-400 hover:text-blue-500"
                                            title="Ch·ªânh s·ª≠a"
                                          >
                                            <Edit size={14} />
                                          </button>
                                        )}
                                        {/* Delete Button - Only for Admin and Editor */}
                                        {canPerformAction('delete') && (
                                          <button
                                            onClick={(e) => {
                                              e.stopPropagation();
                                              handleDeleteTask(task._id || '');
                                            }}
                                            className="p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-400 hover:text-red-500"
                                            title="X√≥a"
                                          >
                                            <Trash size={14} />
                                          </button>
                                        )}
                                        {/* Permission indicator for viewers */}
                                        {!canPerformAction('edit') && currentUserRole === 'Ng∆∞·ªùi xem' && (
                                          <span className="text-xs text-gray-400 px-2 py-1 rounded bg-gray-100 dark:bg-gray-600" title="Ch·ªâ c√≥ th·ªÉ xem">
                                            üëÅÔ∏è
                                          </span>
                                        )}
                                      </div>
                                    </div>
                                    
                                    {/* Description */}
                                    {task.description && (
                                      <div className="text-sm text-gray-600 dark:text-gray-300 mb-2 line-clamp-2">
                                        {task.description}
                                      </div>
                                    )}
                                    
                                    {/* Dates */}
                                    <div className="text-xs space-y-1 mb-2">
                                      {task.start_date && (
                                        <div className="flex items-center text-gray-500 dark:text-gray-400">
                                          <Clock size={12} className="mr-1" />
                                          B·∫Øt ƒë·∫ßu: {new Date(task.start_date).toLocaleDateString('vi-VN')}
                                        </div>
                                      )}
                                      {task.due_date && (
                                        <div className={`flex items-center ${
                                          isOverdue ? 'text-red-600 font-medium' : 'text-gray-500 dark:text-gray-400'
                                        }`}>
                                          <Clock size={12} className="mr-1" />
                                          H·∫°n: {new Date(task.due_date).toLocaleDateString('vi-VN')}
                                          {isOverdue && <span className="ml-1 text-xs">(Qu√° h·∫°n)</span>}
                                        </div>
                                      )}
                                    </div>
                                      {/* Footer */}
                                    <div className="flex justify-between items-center">
                                      <div className="flex items-center space-x-2">
                                        {/* Priority Badge */}
                                        <span className={`text-xs px-2 py-1 rounded ${
                                          task.priority === 'Cao' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :
                                          task.priority === 'Trung b√¨nh' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                                          'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                        }`}>
                                          {task.priority}
                                        </span>
                                          {/* Document Count - TH√äM ƒêO·∫†N N√ÄY */}
                                        {task.documents && task.documents.length > 0 && (
                                          <span className="text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1">
                                            <Paperclip size={12} />
                                            {task.documents.length}
                                          </span>
                                        )}
                                      </div>
                                      
                                      {/* Assigned Member */}
                                      {assignedMember && (
                                        <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                                          <UserCircle size={14} className="mr-1" />
                                          <span className="truncate max-w-20" title={assignedMember.name}>
                                            {assignedMember.name}
                                          </span>
                                        </div>
                                      )}
                                    </div>
                                    
                                    {/* Quick Status Change */}
                                    {task.status !== status && (
                                      <div className="mt-2 pt-2 border-t border-gray-200 dark:border-gray-600">
                                        <select
                                          value={task.status}
                                          onChange={(e) => handleStatusChange(task._id || '', e.target.value as any)}
                                          className="w-full text-xs border rounded px-2 py-1 dark:bg-gray-600 dark:border-gray-500 dark:text-white"
                                          onClick={(e) => e.stopPropagation()}
                                        >
                                          <option value="C·∫ßn l√†m">C·∫ßn l√†m</option>
                                          <option value="ƒêang l√†m">ƒêang l√†m</option>
                                          <option value="Ho√†n th√†nh">Ho√†n th√†nh</option>
                                        </select>
                                      </div>
                                    )}
                                  </div>
                                )}
                              </Draggable>
                            );
                          })}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                </div>
              ))}            </div>
          </DragDropContext>
          )}

          {loading && (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
              <span className="ml-3 text-gray-600 dark:text-gray-400">ƒêang t·∫£i...</span>
            </div>
          )}
        </main>
        <Footer onFooterClick={(item: string) => console.log(`Clicked ${item}`)} />
        <TopButton />
      </div>
    </div>
  );
};

export default Kanban;
