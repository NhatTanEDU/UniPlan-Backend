// backend/services/notificationService.js
const nodemailer = require('nodemailer');
const Notification = require('../models/notification.model');
const User = require('../models/user.model');

class NotificationService {
    constructor() {
        // Setup email transporter (skip trong test mode)
        try {
            this.emailTransporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: process.env.EMAIL_USER,
                    pass: process.env.EMAIL_PASS
                }
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è Email transporter setup failed, email features disabled:', error.message);
            this.emailTransporter = null;
        }
    }

    /**
     * L·∫•y danh s√°ch th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
     * @param {String} userId ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {Promise<Array>} Danh s√°ch th√¥ng b√°o
     */
    async getNotifications(userId) {
        try {
            if (!userId) {
                throw new Error('User ID is required to get notifications.');
            }
            // Th√™m timeout cho truy v·∫•n
            const notifications = await Notification.find({ userId })
                .sort({ createdAt: -1 })
                .limit(50)
                .maxTimeMS(5000); // Gi·ªõi h·∫°n 50 th√¥ng b√°o m·ªõi nh·∫•t, timeout 5s
            return notifications;
        } catch (error) {
            console.error('‚ùå Error in getNotifications service:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u m·ªôt th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
     * @param {String} notificationId ID c·ªßa th√¥ng b√°o
     * @param {String} userId ID c·ªßa ng∆∞·ªùi d√πng (ƒë·ªÉ x√°c th·ª±c)
     * @returns {Promise<Object>} Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
     */
    async markNotificationAsRead(notificationId, userId) {
        try {
            const notification = await Notification.findOneAndUpdate(
                { _id: notificationId, userId: userId },
                { read: true, readAt: new Date() },
                { new: true }
            );
            if (!notification) {
                throw new Error('Notification not found or user not authorized.');
            }
            return notification;
        } catch (error) {
            console.error('‚ùå Error in markNotificationAsRead service:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng l√† ƒë√£ ƒë·ªçc
     * @param {String} userId ID c·ªßa ng∆∞·ªùi d√πng
     * @returns {Promise<Object>} K·∫øt qu·∫£ c·ªßa thao t√°c
     */
    async markAllNotificationsAsRead(userId) {
        try {
            const result = await Notification.updateMany(
                { userId: userId, read: false },
                { $set: { read: true, readAt: new Date() } }
            );
            return { success: true, modifiedCount: result.nModified };
        } catch (error) {
            console.error('‚ùå Error in markAllNotificationsAsRead service:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i c·∫£nh b√°o h·∫øt h·∫°n trial
     */
    async sendTrialExpiryWarning(userId, daysLeft) {
        try {
            console.log(`üì® Sending trial expiry warning to user ${userId}, ${daysLeft} days left`);
            
            const user = await User.findById(userId);
            if (!user) {
                throw new Error('User not found');
            }
            
            const title = `G√≥i d√πng th·ª≠ s·∫Øp h·∫øt h·∫°n (${daysLeft} ng√†y)`;
            const message = `G√≥i d√πng th·ª≠ 7 ng√†y c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong ${daysLeft} ng√†y. H√£y n√¢ng c·∫•p ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng UniPlan!`;
            
            // Create in-app notification
            const notification = await Notification.createNotification({
                userId: userId,
                title: title,
                message: message,
                type: 'trial_expiry_warning',
                priority: daysLeft <= 1 ? 'urgent' : 'high',
                metadata: {
                    days_left: daysLeft,
                    action_url: '/plans',
                    action_text: 'Xem g√≥i n√¢ng c·∫•p'
                },
                channels: { in_app: true, email: true }
            });
            
            // Send email
            await this.sendEmail({
                to: user.email,
                subject: title,
                html: this.generateTrialExpiryEmailTemplate(user, daysLeft),
                notificationId: notification._id
            });
            
            console.log(`‚úÖ Trial expiry warning sent to ${user.email}`);
            
            return { success: true, notification };
            
        } catch (error) {
            console.error('‚ùå Error sending trial expiry warning:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i c·∫£nh b√°o h·∫øt h·∫°n g√≥i tr·∫£ ph√≠
     */
    async sendSubscriptionExpiryWarning(userId, daysLeft, planType) {
        try {
            console.log(`üì® Sending subscription expiry warning to user ${userId}, ${daysLeft} days left`);
            
            const user = await User.findById(userId);
            if (!user) {
                throw new Error('User not found');
            }
            
            const planName = planType === 'monthly' ? 'G√≥i th√°ng' : 'G√≥i nƒÉm';
            const title = `${planName} s·∫Øp h·∫øt h·∫°n (${daysLeft} ng√†y)`;
            const message = `${planName} c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong ${daysLeft} ng√†y. H√£y gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng UniPlan!`;
            
            // Create notification
            const notification = await Notification.createNotification({
                userId: userId,
                title: title,
                message: message,
                type: 'subscription_expiry_warning',
                priority: daysLeft <= 1 ? 'urgent' : 'high',
                metadata: {
                    days_left: daysLeft,
                    subscription_type: planType,
                    action_url: '/plans',
                    action_text: 'Gia h·∫°n ngay'
                },
                channels: { in_app: true, email: true }
            });
            
            // Send email
            await this.sendEmail({
                to: user.email,
                subject: title,
                html: this.generateSubscriptionExpiryEmailTemplate(user, daysLeft, planName),
                notificationId: notification._id
            });
            
            console.log(`‚úÖ Subscription expiry warning sent to ${user.email}`);
            
            return { success: true, notification };
            
        } catch (error) {
            console.error('‚ùå Error sending subscription expiry warning:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o thanh to√°n th√†nh c√¥ng
     */
    async sendPaymentSuccessNotification(userId, paymentInfo) {
        try {
            console.log(`üì® Sending payment success notification to user ${userId}`);
            
            const user = await User.findById(userId);
            if (!user) {
                throw new Error('User not found');
            }
            
            const title = 'Thanh to√°n th√†nh c√¥ng!';
            const message = `Thanh to√°n ${paymentInfo.planName} (${paymentInfo.amount.toLocaleString('vi-VN')} VND) ƒë√£ th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng UniPlan!`;
            
            // Create notification
            const notification = await Notification.createNotification({
                userId: userId,
                title: title,
                message: message,
                type: 'payment_successful',
                priority: 'normal',
                metadata: {
                    payment_id: paymentInfo.paymentId,
                    subscription_type: paymentInfo.planType,
                    amount: paymentInfo.amount
                },
                channels: { in_app: true, email: true }
            });
            
            // Send email
            await this.sendEmail({
                to: user.email,
                subject: title,
                html: this.generatePaymentSuccessEmailTemplate(user, paymentInfo),
                notificationId: notification._id
            });
            
            console.log(`‚úÖ Payment success notification sent to ${user.email}`);
            
            return { success: true, notification };
            
        } catch (error) {
            console.error('‚ùå Error sending payment success notification:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o thanh to√°n th·∫•t b·∫°i
     */
    async sendPaymentFailedNotification(userId, paymentInfo, reason) {
        try {
            console.log(`üì® Sending payment failed notification to user ${userId}`);
            
            const user = await User.findById(userId);
            if (!user) {
                throw new Error('User not found');
            }
            
            const title = 'Thanh to√°n th·∫•t b·∫°i';
            const message = `Thanh to√°n ${paymentInfo.planName} kh√¥ng th√†nh c√¥ng. L√Ω do: ${reason}. Vui l√≤ng th·ª≠ l·∫°i!`;
            
            // Create notification
            const notification = await Notification.createNotification({
                userId: userId,
                title: title,
                message: message,
                type: 'payment_failed',
                priority: 'high',
                metadata: {
                    payment_id: paymentInfo.paymentId,
                    subscription_type: paymentInfo.planType,
                    failure_reason: reason,
                    action_url: '/plans',
                    action_text: 'Th·ª≠ l·∫°i'
                },
                channels: { in_app: true, email: true }
            });
            
            // Send email
            await this.sendEmail({
                to: user.email,
                subject: title,
                html: this.generatePaymentFailedEmailTemplate(user, paymentInfo, reason),
                notificationId: notification._id
            });
            
            console.log(`‚úÖ Payment failed notification sent to ${user.email}`);
            
            return { success: true, notification };
            
        } catch (error) {
            console.error('‚ùå Error sending payment failed notification:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i th√¥ng b√°o ch√†o m·ª´ng
     */
    async sendWelcomeMessage(userId) {
        try {
            console.log(`üì® Sending welcome message to user ${userId}`);
            
            const user = await User.findById(userId);
            if (!user) {
                throw new Error('User not found');
            }
            
            const title = 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi UniPlan!';
            const message = 'B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng v√† nh·∫≠n ƒë∆∞·ª£c 7 ng√†y d√πng th·ª≠ mi·ªÖn ph√≠. H√£y kh√°m ph√° t·∫•t c·∫£ t√≠nh nƒÉng c·ªßa UniPlan!';
            
            // Create notification
            const notification = await Notification.createNotification({
                userId: userId,
                title: title,
                message: message,
                type: 'welcome',
                priority: 'normal',
                metadata: {
                    action_url: '/dashboard',
                    action_text: 'B·∫Øt ƒë·∫ßu'
                },
                channels: { in_app: true, email: true }
            });
            
            // Send email
            await this.sendEmail({
                to: user.email,
                subject: title,
                html: this.generateWelcomeEmailTemplate(user),
                notificationId: notification._id
            });
            
            console.log(`‚úÖ Welcome message sent to ${user.email}`);
            
            return { success: true, notification };
            
        } catch (error) {
            console.error('‚ùå Error sending welcome message:', error);
            throw error;
        }
    }
    
    /**
     * G·ª≠i email
     */    async sendEmail({ to, subject, html, notificationId }) {
        try {
            if (!this.emailTransporter) {
                console.warn('‚ö†Ô∏è Email transporter not available, skipping email send');
                return { success: false, reason: 'Email transporter not configured' };
            }
            
            const mailOptions = {
                from: `"UniPlan" <${process.env.EMAIL_USER}>`,
                to: to,
                subject: subject,
                html: html
            };
            
            const result = await this.emailTransporter.sendMail(mailOptions);
            
            // Update notification
            if (notificationId) {
                await Notification.findByIdAndUpdate(notificationId, {
                    'sent_channels.email': true,
                    'sent_channels.email_sent_at': new Date()
                });
            }
            
            console.log(`üìß Email sent successfully to ${to}`);
            return result;
            
        } catch (error) {
            console.error('‚ùå Error sending email:', error);
            throw error;
        }
    }
    
    /**
     * Email templates
     */
    generateTrialExpiryEmailTemplate(user, daysLeft) {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #ff6b35;">‚è∞ G√≥i d√πng th·ª≠ s·∫Øp h·∫øt h·∫°n!</h2>
            <p>Xin ch√†o <strong>${user.fullname || user.email}</strong>,</p>
            <p>G√≥i d√πng th·ª≠ 7 ng√†y c·ªßa b·∫°n t·∫°i UniPlan s·∫Ω h·∫øt h·∫°n trong <strong>${daysLeft} ng√†y</strong>.</p>
            <p>ƒê·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng tuy·ªát v·ªùi c·ªßa UniPlan, h√£y n√¢ng c·∫•p g√≥i ngay h√¥m nay!</p>
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL}/plans" 
                   style="background-color: #ff6b35; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                   N√¢ng c·∫•p ngay
                </a>
            </div>
            <p><em>ƒê·ªôi ng≈© UniPlan</em></p>
        </div>
        `;
    }
    
    generateSubscriptionExpiryEmailTemplate(user, daysLeft, planName) {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #ff6b35;">‚è∞ ${planName} s·∫Øp h·∫øt h·∫°n!</h2>
            <p>Xin ch√†o <strong>${user.fullname || user.email}</strong>,</p>
            <p>${planName} c·ªßa b·∫°n t·∫°i UniPlan s·∫Ω h·∫øt h·∫°n trong <strong>${daysLeft} ng√†y</strong>.</p>
            <p>H√£y gia h·∫°n ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng UniPlan m√† kh√¥ng b·ªã gi√°n ƒëo·∫°n!</p>
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL}/plans" 
                   style="background-color: #ff6b35; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                   Gia h·∫°n ngay
                </a>
            </div>
            <p><em>ƒê·ªôi ng≈© UniPlan</em></p>
        </div>
        `;
    }
    
    generatePaymentSuccessEmailTemplate(user, paymentInfo) {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #28a745;">‚úÖ Thanh to√°n th√†nh c√¥ng!</h2>
            <p>Xin ch√†o <strong>${user.fullname || user.email}</strong>,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng!</p>
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
                <p><strong>Chi ti·∫øt thanh to√°n:</strong></p>
                <ul>
                    <li>G√≥i: ${paymentInfo.planName}</li>
                    <li>S·ªë ti·ªÅn: ${paymentInfo.amount.toLocaleString('vi-VN')} VND</li>
                    <li>M√£ ƒë∆°n h√†ng: ${paymentInfo.orderId}</li>
                </ul>
            </div>
            <p>B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng t·∫•t c·∫£ t√≠nh nƒÉng ngay b√¢y gi·ªù!</p>
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL}/dashboard" 
                   style="background-color: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                   V√†o Dashboard
                </a>
            </div>
            <p><em>ƒê·ªôi ng≈© UniPlan</em></p>
        </div>
        `;
    }
    
    generatePaymentFailedEmailTemplate(user, paymentInfo, reason) {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #dc3545;">‚ùå Thanh to√°n th·∫•t b·∫°i</h2>
            <p>Xin ch√†o <strong>${user.fullname || user.email}</strong>,</p>
            <p>Thanh to√°n c·ªßa b·∫°n kh√¥ng th√†nh c√¥ng.</p>
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
                <p><strong>Chi ti·∫øt:</strong></p>
                <ul>
                    <li>G√≥i: ${paymentInfo.planName}</li>
                    <li>L√Ω do: ${reason}</li>
                    <li>M√£ ƒë∆°n h√†ng: ${paymentInfo.orderId}</li>
                </ul>
            </div>
            <p>Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu c·∫ßn h·ªó tr·ª£.</p>
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL}/plans" 
                   style="background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                   Th·ª≠ l·∫°i
                </a>
            </div>
            <p><em>ƒê·ªôi ng≈© UniPlan</em></p>
        </div>
        `;
    }
    
    generateWelcomeEmailTemplate(user) {
        return `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #007bff;">üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi UniPlan!</h2>
            <p>Xin ch√†o <strong>${user.fullname || user.email}</strong>,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω UniPlan! B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c <strong>7 ng√†y d√πng th·ª≠ mi·ªÖn ph√≠</strong>.</p>
            <div style="background-color: #e7f3ff; padding: 20px; border-radius: 5px; margin: 20px 0;">
                <p><strong>Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m:</strong></p>
                <ul>
                    <li>T·∫°o v√† qu·∫£n l√Ω project</li>
                    <li>L√†m vi·ªác nh√≥m hi·ªáu qu·∫£</li>
                    <li>Theo d√µi ti·∫øn ƒë·ªô c√¥ng vi·ªác</li>
                    <li>V√† nhi·ªÅu t√≠nh nƒÉng kh√°c...</li>
                </ul>
            </div>
            <div style="text-align: center; margin: 30px 0;">
                <a href="${process.env.FRONTEND_URL}/dashboard" 
                   style="background-color: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold;">
                   B·∫Øt ƒë·∫ßu ngay
                </a>
            </div>
            <p><em>Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi!<br>ƒê·ªôi ng≈© UniPlan</em></p>
        </div>
        `;
    }
}

module.exports = new NotificationService();
