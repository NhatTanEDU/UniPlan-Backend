// backend/scripts/admin-upgrade-user.js
//node scripts/admin-upgrade-user.js admin1@gmail.com yearly
//
//node scripts/admin-upgrade-user.js 6846ffc96b1914ede2f998cd monthly
// ki·ªÉm tra g√≥i
//node scripts/admin-upgrade-user.js search admin
//N√¢ng c·∫•p admin_test@example.com l√™n g√≥i th√°ng b·∫±ng ID
//node scripts/admin-upgrade-user.js 6846ffc96b1914ede2f998cd monthly
//node scripts/admin-upgrade-user.js 6855a3a7736a993ccfbfa9d1 monthly
const mongoose = require('mongoose');
const User = require('../models/user.model');
require('dotenv').config();

// K·∫øt n·ªëi database
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/uniplan');
        console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error.message);
        process.exit(1);
    }
};

// Function n√¢ng c·∫•p user
const upgradeUser = async (identifier, planType) => {
    try {
        console.log(`üîÑ ƒêang t√¨m ki·∫øm user: ${identifier}`);
        
        // T√¨m user theo email ho·∫∑c ID
        let user;
        if (mongoose.Types.ObjectId.isValid(identifier)) {
            user = await User.findById(identifier);
        } else {
            user = await User.findOne({ email: identifier });
        }
        
        if (!user) {
            console.error(`‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi identifier: ${identifier}`);
            return false;
        }
        
        console.log(`üë§ T√¨m th·∫•y user: ${user.email}`);
        console.log(`üì¶ G√≥i hi·ªán t·∫°i: ${user.current_plan_type}`);
        
        // L∆∞u th√¥ng tin c≈© ƒë·ªÉ log
        const oldPlan = user.getPlanDisplayInfo();
        
        // N√¢ng c·∫•p g√≥i
        user.upgradeToSubscription(planType);
        
        // L∆∞u thay ƒë·ªïi
        await user.save();
        
        // L·∫•y th√¥ng tin g√≥i m·ªõi
        const newPlan = user.getPlanDisplayInfo();
        
        console.log('‚úÖ N√¢ng c·∫•p th√†nh c√¥ng!');
        console.log(`üìä Th√¥ng tin c·∫≠p nh·∫≠t:`);
        console.log(`   - Email: ${user.email}`);
        console.log(`   - G√≥i c≈©: ${oldPlan.name}`);
        console.log(`   - G√≥i m·ªõi: ${newPlan.name}`);
        console.log(`   - Ng√†y b·∫Øt ƒë·∫ßu: ${user.subscription_start_date.toLocaleString('vi-VN')}`);
        console.log(`   - Ng√†y h·∫øt h·∫°n: ${user.subscription_end_date.toLocaleString('vi-VN')}`);
        console.log(`   - Tr·∫°ng th√°i thanh to√°n: ${user.payment_status}`);
        
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói n√¢ng c·∫•p user:', error.message);
        return false;
    }
};

// Function hi·ªÉn th·ªã menu l·ª±a ch·ªçn
const showMenu = () => {
    console.log('\nüéØ ADMIN - N√ÇNG C·∫§P G√ìI USER');
    console.log('=====================================');
    console.log('C√°ch s·ª≠ d·ª•ng:');
    console.log('node scripts/admin-upgrade-user.js <email_ho·∫∑c_id> <g√≥i>');
    console.log('');
    console.log('C√°c g√≥i c√≥ s·∫µn:');
    console.log('- monthly: G√≥i 1 th√°ng (500,000 VND)');
    console.log('- yearly: G√≥i 1 nƒÉm (3,000,000 VND)');
    console.log('');
    console.log('V√≠ d·ª•:');
    console.log('node scripts/admin-upgrade-user.js admin1@gmail.com yearly');
    console.log('node scripts/admin-upgrade-user.js 507f1f77bcf86cd799439011 monthly');
    console.log('=====================================\n');
};

// Function t√¨m v√† hi·ªÉn th·ªã user
const findAndShowUsers = async (searchTerm = '') => {
    try {
        let users;
        if (searchTerm) {
            // T√¨m theo email ch·ª©a t·ª´ kh√≥a
            users = await User.find({ 
                email: { $regex: searchTerm, $options: 'i' } 
            }).limit(10).select('email current_plan_type trial_start_date subscription_end_date createdAt');
        } else {
            // Hi·ªÉn th·ªã 10 user ƒë·∫ßu ti√™n
            users = await User.find({}).limit(10).select('email current_plan_type trial_start_date subscription_end_date createdAt');
        }
        
        console.log(`\nüë• T√¨m th·∫•y ${users.length} user${searchTerm ? ` ch·ª©a "${searchTerm}"` : ''}:`);
        console.log('=====================================');
        users.forEach((user, index) => {
            const planInfo = user.getPlanDisplayInfo();
            console.log(`${index + 1}. ${user.email}`);
            console.log(`   - ID: ${user._id}`);
            console.log(`   - G√≥i: ${planInfo.name}`);
            console.log(`   - T·∫°o l√∫c: ${user.createdAt.toLocaleString('vi-VN')}`);
            console.log('');
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói t√¨m ki·∫øm user:', error.message);
    }
};

// Main function
const main = async () => {
    try {
        await connectDB();
        
        const args = process.argv.slice(2);
        
        // N·∫øu kh√¥ng c√≥ tham s·ªë, hi·ªÉn th·ªã menu
        if (args.length === 0) {
            showMenu();
            
            // Hi·ªÉn th·ªã m·ªôt s·ªë user m·∫´u
            console.log('üìã M·ªôt s·ªë user trong h·ªá th·ªëng:');
            await findAndShowUsers();
            
            console.log('üí° Tip: B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm user b·∫±ng:');
            console.log('node scripts/admin-upgrade-user.js search <t·ª´_kh√≥a>');
            
        } else if (args[0] === 'search') {
            // T√¨m ki·∫øm user
            const searchTerm = args[1] || '';
            await findAndShowUsers(searchTerm);
            
        } else if (args.length === 2) {
            // N√¢ng c·∫•p user
            const [identifier, planType] = args;
            
            // Validate plan type
            if (!['monthly', 'yearly'].includes(planType)) {
                console.error('‚ùå G√≥i kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: monthly, yearly');
                process.exit(1);
            }
            
            const success = await upgradeUser(identifier, planType);
            
            if (success) {
                console.log('üéâ Ho√†n th√†nh n√¢ng c·∫•p!');
            } else {
                console.log('üí• N√¢ng c·∫•p th·∫•t b·∫°i!');
                process.exit(1);
            }
            
        } else {
            console.error('‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá!');
            showMenu();
            process.exit(1);
        }
        
        console.log('\nüîí ƒê√≥ng k·∫øt n·ªëi database...');
        await mongoose.connection.close();
        console.log('‚úÖ Ho√†n t·∫•t!');
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error);
        process.exit(1);
    }
};

// Ch·∫°y script
if (require.main === module) {
    main();
}

module.exports = { upgradeUser, connectDB };
