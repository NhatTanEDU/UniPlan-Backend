// test-env-variables.js
// Script ki·ªÉm tra xem environment variables c√≥ ƒë∆∞·ª£c ƒë·ªçc ƒë√∫ng kh√¥ng
require('dotenv').config();

console.log('üîç Ki·ªÉm tra Environment Variables...');
console.log('=====================================');

// Ki·ªÉm tra c√°c bi·∫øn c∆° b·∫£n
console.log('üìä C√°c bi·∫øn c∆° b·∫£n:');
console.log('   PORT:', process.env.PORT || 'KH√îNG T√åM TH·∫§Y');
console.log('   MONGO_URI:', process.env.MONGO_URI ? 'C√ì' : 'KH√îNG T√åM TH·∫§Y');
console.log('   JWT_SECRET:', process.env.JWT_SECRET ? 'C√ì' : 'KH√îNG T√åM TH·∫§Y');

console.log('\nüìä C√°c bi·∫øn Supabase:');
console.log('   SUPABASE_URL:', process.env.SUPABASE_URL || 'KH√îNG T√åM TH·∫§Y');
console.log('   SUPABASE_SERVICE_KEY:', process.env.SUPABASE_SERVICE_KEY ? `C√ì (${process.env.SUPABASE_SERVICE_KEY.substring(0, 20)}...)` : 'KH√îNG T√åM TH·∫§Y');
console.log('   SUPABASE_BUCKET_NAME:', process.env.SUPABASE_BUCKET_NAME || 'KH√îNG T√åM TH·∫§Y');

console.log('\nüß™ Ki·ªÉm tra t√≠nh h·ª£p l·ªá:');

// Ki·ªÉm tra SUPABASE_URL c√≥ h·ª£p l·ªá kh√¥ng
try {
    if (process.env.SUPABASE_URL) {
        new URL(process.env.SUPABASE_URL);
        console.log('   ‚úÖ SUPABASE_URL h·ª£p l·ªá');
    } else {
        console.log('   ‚ùå SUPABASE_URL kh√¥ng t·ªìn t·∫°i');
    }
} catch (error) {
    console.log('   ‚ùå SUPABASE_URL kh√¥ng h·ª£p l·ªá:', error.message);
}

// Ki·ªÉm tra service key c√≥ ƒë√∫ng format JWT kh√¥ng
if (process.env.SUPABASE_SERVICE_KEY) {
    if (process.env.SUPABASE_SERVICE_KEY.startsWith('eyJ')) {
        console.log('   ‚úÖ SUPABASE_SERVICE_KEY c√≥ v·∫ª h·ª£p l·ªá (JWT format)');
    } else {
        console.log('   ‚ö†Ô∏è  SUPABASE_SERVICE_KEY kh√¥ng ƒë√∫ng format JWT');
    }
} else {
    console.log('   ‚ùå SUPABASE_SERVICE_KEY kh√¥ng t·ªìn t·∫°i');
}

console.log('\n=====================================');
console.log('‚úÖ Ki·ªÉm tra ho√†n t·∫•t!');

// Test Supabase connection
console.log('\nüîó Test k·∫øt n·ªëi Supabase...');
const { createClient } = require('@supabase/supabase-js');

try {
    const supabase = createClient(
        process.env.SUPABASE_URL,
        process.env.SUPABASE_SERVICE_KEY
    );
    
    console.log('   ‚úÖ Supabase client t·∫°o th√†nh c√¥ng');
    
    // Test th·ª≠ list buckets
    supabase.storage.listBuckets()
        .then(({ data, error }) => {
            if (error) {
                console.log('   ‚ùå L·ªói khi test connection:', error.message);
            } else {
                console.log('   ‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng!');
                console.log('   üìÅ Buckets hi·ªán c√≥:', data.map(b => b.name).join(', '));
                
                // Ki·ªÉm tra bucket c·∫ßn thi·∫øt
                const requiredBucket = process.env.SUPABASE_BUCKET_NAME || 'uniplan-upload-file';
                if (data.find(b => b.name === requiredBucket)) {
                    console.log(`   ‚úÖ Bucket "${requiredBucket}" ƒë√£ t·ªìn t·∫°i`);
                } else {
                    console.log(`   ‚ö†Ô∏è  Bucket "${requiredBucket}" ch∆∞a t·ªìn t·∫°i`);
                }
            }
        })
        .catch(err => {
            console.log('   ‚ùå L·ªói khi test connection:', err.message);
        });
        
} catch (error) {
    console.log('   ‚ùå Kh√¥ng th·ªÉ t·∫°o Supabase client:', error.message);
}
