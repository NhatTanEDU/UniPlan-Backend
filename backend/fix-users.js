// Script ƒë·ªÉ s·ª≠a d·ªØ li·ªáu users c√≥ full_name = "undefined"
const mongoose = require('mongoose');
const User = require('./models/user.model');

async function fixUserData() {
  try {
    await mongoose.connect('mongodb://localhost:27017/uniplan', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ Connected to MongoDB');
    
    // T√¨m t·∫•t c·∫£ users c√≥ full_name b·ªã l·ªói
    const badUsers = await User.find({ 
      $or: [
        { full_name: "undefined" },
        { full_name: { $exists: false } },
        { full_name: null },
        { full_name: '' },
        { full_name: { $regex: /^\s*$/ } }
      ]
    }).select('_id email full_name');
    
    console.log(`\nüîç Found ${badUsers.length} users with bad full_name`);
    
    // S·ª≠a t·ª´ng user m·ªôt
    let fixedCount = 0;
    for (let user of badUsers) {
      // T·∫°o t√™n t·ª´ email
      const emailPart = user.email.split('@')[0];
      let newName;
      
      // T·∫°o t√™n d·ª±a tr√™n email
      if (emailPart.includes('admin')) {
        newName = 'System Administrator';
      } else if (emailPart.includes('user1')) {
        newName = 'Test User 1';
      } else if (emailPart.includes('user2')) {
        newName = 'Test User 2';
      } else if (emailPart.includes('user3')) {
        newName = 'Test User 3';
      } else if (emailPart.includes('user4')) {
        newName = 'Test User 4';
      } else if (emailPart.includes('tan')) {
        newName = 'Tan Nguyen';
      } else if (emailPart.includes('ghost')) {
        newName = 'Ghost User';
      } else {
        // T·∫°o t√™n t·ª´ ph·∫ßn ƒë·∫ßu c·ªßa email
        newName = emailPart.charAt(0).toUpperCase() + emailPart.slice(1).replace(/[0-9_]/g, ' ').trim();
        if (newName.length < 3) {
          newName = 'User ' + emailPart;
        }
      }
      
      // Update user
      await User.findByIdAndUpdate(user._id, { full_name: newName });
      console.log(`‚úÖ Fixed user ${user._id}: "${user.full_name}" -> "${newName}"`);
      fixedCount++;
    }
    
    console.log(`\nüéâ Successfully fixed ${fixedCount} users`);
    
    // Ki·ªÉm tra l·∫°i
    const remainingBadUsers = await User.countDocuments({ 
      $or: [
        { full_name: "undefined" },
        { full_name: { $exists: false } },
        { full_name: null },
        { full_name: '' },
        { full_name: { $regex: /^\s*$/ } }
      ]
    });
    
    console.log(`\nüìä Remaining users with bad full_name: ${remainingBadUsers}`);
    
    // Hi·ªÉn th·ªã 5 users ƒë√£ s·ª≠a ƒë·ªÉ ki·ªÉm tra
    console.log('\nüîç Sample of fixed users:');
    const sampleUsers = await User.find({}).select('_id email full_name').limit(5);
    sampleUsers.forEach(user => {
      console.log(`- ${user.email} -> ${user.full_name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ Disconnected from MongoDB');
  }
}

fixUserData();
