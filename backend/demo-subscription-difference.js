// backend/demo-subscription-difference.js
const mongoose = require('mongoose');
const User = require('./models/user.model');
require('dotenv').config();

const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/uniplan');
        console.log('‚úÖ Connected to MongoDB');
    } catch (error) {
        console.error('‚ùå Error connecting to MongoDB:', error.message);
        process.exit(1);
    }
};

const demoSubscriptionDifference = async () => {
    try {
        console.log('üìö DEMO: S·ª± kh√°c bi·ªát gi·ªØa Trial v√† Premium User\n');
        
        // 1. T√¨m user trial
        console.log('üÜì === USER TRIAL (thanhtoan@gmail.com) ===');
        const trialUser = await User.findOne({ email: 'thanhtoan@gmail.com' });
        if (trialUser) {
            console.log('üìä Database values:');
            console.log('  - current_plan_type:', trialUser.current_plan_type);
            console.log('  - trial_start_date:', trialUser.trial_start_date);
            console.log('  - trial_end_date:', trialUser.trial_end_date);
            console.log('  - subscription_start_date:', trialUser.subscription_start_date); // ‚Üê NULL
            console.log('  - subscription_end_date:', trialUser.subscription_end_date);     // ‚Üê NULL
            console.log('  - payment_status:', trialUser.payment_status);
            
            console.log('\nüîç API Response s·∫Ω l√†:');
            console.log('  - subscriptionType:', trialUser.current_plan_type);
            console.log('  - subscriptionStart:', trialUser.subscription_start_date);      // ‚Üê NULL
            console.log('  - subscriptionEnd:', trialUser.subscription_end_date);          // ‚Üê NULL
            console.log('  - isPremium:', ['monthly', 'yearly'].includes(trialUser.current_plan_type));
            
            console.log('\nüí° T·∫†I SAO NULL?');
            console.log('  ‚úÖ User ch∆∞a thanh to√°n g√≥i n√†o');
            console.log('  ‚úÖ ƒêang d√πng trial mi·ªÖn ph√≠ 7 ng√†y');
            console.log('  ‚úÖ subscription_start/end ch·ªâ c√≥ khi THANH TO√ÅN');
        }
        
        console.log('\n' + '='.repeat(60) + '\n');
        
        // 2. T√¨m user premium (n·∫øu c√≥)
        console.log('üí∞ === USER PREMIUM (ƒë√£ thanh to√°n) ===');
        const premiumUser = await User.findOne({ 
            current_plan_type: { $in: ['monthly', 'yearly'] },
            subscription_start_date: { $ne: null }
        });
        
        if (premiumUser) {
            console.log('üìä Database values:');
            console.log('  - current_plan_type:', premiumUser.current_plan_type);
            console.log('  - trial_start_date:', premiumUser.trial_start_date);
            console.log('  - trial_end_date:', premiumUser.trial_end_date);
            console.log('  - subscription_start_date:', premiumUser.subscription_start_date); // ‚Üê C√ì GI√Å TR·ªä
            console.log('  - subscription_end_date:', premiumUser.subscription_end_date);     // ‚Üê C√ì GI√Å TR·ªä
            console.log('  - payment_status:', premiumUser.payment_status);
            
            console.log('\nüîç API Response s·∫Ω l√†:');
            console.log('  - subscriptionType:', premiumUser.current_plan_type);
            console.log('  - subscriptionStart:', premiumUser.subscription_start_date);      // ‚Üê C√ì GI√Å TR·ªä
            console.log('  - subscriptionEnd:', premiumUser.subscription_end_date);          // ‚Üê C√ì GI√Å TR·ªä
            console.log('  - isPremium:', ['monthly', 'yearly'].includes(premiumUser.current_plan_type));
            
            console.log('\nüí° T·∫†I SAO C√ì GI√Å TR·ªä?');
            console.log('  ‚úÖ User ƒë√£ thanh to√°n g√≥i monthly/yearly');
            console.log('  ‚úÖ subscription_start = ng√†y thanh to√°n');
            console.log('  ‚úÖ subscription_end = ng√†y h·∫øt h·∫°n (30/365 ng√†y sau)');
        } else {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y user premium n√†o trong database');
            console.log('üí° Mu·ªën test user premium, h√£y:');
            console.log('   1. D√πng script admin-upgrade-user.js');
            console.log('   2. Ho·∫∑c thanh to√°n qua MoMo');
        }
        
        console.log('\n' + '='.repeat(60) + '\n');
        
        // 3. Gi·∫£i th√≠ch chi ti·∫øt
        console.log('üìö === GI·∫¢I TH√çCH CHI TI·∫æT ===');
        console.log('');
        console.log('üîÑ Flow ho·∫°t ƒë·ªông:');
        console.log('1. User ƒëƒÉng k√Ω ‚Üí free_trial (7 ng√†y)');
        console.log('   ‚îú‚îÄ current_plan_type = "free_trial"');
        console.log('   ‚îú‚îÄ trial_start_date = ng√†y ƒëƒÉng k√Ω');
        console.log('   ‚îú‚îÄ trial_end_date = 7 ng√†y sau');
        console.log('   ‚îú‚îÄ subscription_start_date = NULL ‚Üê CH∆ØA THANH TO√ÅN');
        console.log('   ‚îî‚îÄ subscription_end_date = NULL ‚Üê CH∆ØA THANH TO√ÅN');
        console.log('');
        console.log('2. User thanh to√°n ‚Üí monthly/yearly');
        console.log('   ‚îú‚îÄ current_plan_type = "monthly"/"yearly"');
        console.log('   ‚îú‚îÄ subscription_start_date = ng√†y thanh to√°n ‚Üê C√ì GI√Å TR·ªä');
        console.log('   ‚îú‚îÄ subscription_end_date = ng√†y h·∫øt h·∫°n ‚Üê C√ì GI√Å TR·ªä');
        console.log('   ‚îî‚îÄ trial dates v·∫´n gi·ªØ nguy√™n (l·ªãch s·ª≠)');
        console.log('');
        console.log('üí° K·∫æT LU·∫¨N:');
        console.log('‚úÖ NULL l√† B√åNH TH∆Ø·ªúNG cho user ch∆∞a thanh to√°n');
        console.log('‚úÖ Frontend d·ª±a v√†o isPremium ƒë·ªÉ hi·ªÉn th·ªã UI');
        console.log('‚úÖ subscriptionStart/End ch·ªâ quan tr·ªçng khi isPremium = true');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
};

const main = async () => {
    try {
        await connectDB();
        await demoSubscriptionDifference();
        await mongoose.connection.close();
        console.log('\n‚úÖ Demo completed!');
    } catch (error) {
        console.error('‚ùå Error:', error);
    }
};

if (require.main === module) {
    main();
}
