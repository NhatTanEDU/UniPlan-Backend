// backend/routes/subscription.routes.js
const express = require('express');
const router = express.Router();
const subscriptionController = require('../controllers/subscriptionController');

// S·ª≠a l·∫°i c√°ch import cho ƒë√∫ng
const authenticateToken = require('../middlewares/auth.middleware'); 
const { checkSubscriptionStatus } = require('../middleware/checkSubscription');
const User = require('../models/user.model');

// Debug imports
console.log('üîç subscriptionController:', typeof subscriptionController);
console.log('üîç subscriptionController.getSubscriptionStatus:', typeof subscriptionController.getSubscriptionStatus);
console.log('üîç authenticateToken:', typeof authenticateToken);
console.log('üîç checkSubscriptionStatus:', typeof checkSubscriptionStatus);

/**
 * @route   GET /api/subscription/status
 * @desc    L·∫•y tr·∫°ng th√°i g√≥i hi·ªán t·∫°i
 * @access  Private
 */
router.get('/status',
    authenticateToken,
    subscriptionController.getSubscriptionStatus
);

/**
 * @route   POST /api/subscription/upgrade
 * @desc    N√¢ng c·∫•p g√≥i subscription
 * @access  Private
 */
router.post('/upgrade',
    authenticateToken,
    checkSubscriptionStatus,
    subscriptionController.upgradeSubscription
);

/**
 * @route   POST /api/subscription/cancel
 * @desc    H·ªßy g√≥i subscription
 * @access  Private
 */
router.post('/cancel',
    authenticateToken,
    checkSubscriptionStatus,
    subscriptionController.cancelSubscription
);

/**
 * @route   GET /api/subscription/history
 * @desc    L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi g√≥i
 * @access  Private
 */
router.get('/history',
    authenticateToken,
    subscriptionController.getSubscriptionHistory
);

/**
 * @route   GET /api/subscription/expiring
 * @desc    L·∫•y danh s√°ch users s·∫Øp h·∫øt h·∫°n (Admin only)
 * @access  Private (Admin)
 */
router.get('/expiring',
    authenticateToken,
    subscriptionController.getExpiringSubscriptions
);

/**
 * @route   POST /api/subscription/send-warning
 * @desc    G·ª≠i c·∫£nh b√°o h·∫øt h·∫°n th·ªß c√¥ng (Admin only)
 * @access  Private (Admin)
 */
router.post('/send-warning',
    authenticateToken,
    subscriptionController.sendExpiryWarning
);

/**
 * @route   GET /api/subscription/stats
 * @desc    L·∫•y th·ªëng k√™ subscription (Admin only)
 * @access  Private (Admin)
 */
router.get('/stats',
    authenticateToken,
    subscriptionController.getSubscriptionStats
);

router.get('/notifications', authenticateToken, subscriptionController.getNotifications);

router.post('/notifications/mark-read', authenticateToken, subscriptionController.markNotificationAsRead);

router.post('/notifications/mark-all-read', authenticateToken, subscriptionController.markAllNotificationsAsRead);

/**
 * @route   POST /api/subscription/upgrade-fake
 * @desc    Fake upgrade user subscription (demo only)
 * @access  Private
 */
router.post('/upgrade-fake',
    authenticateToken,
    async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });
    // Gi·∫£ l·∫≠p n√¢ng c·∫•p g√≥i l√™n yearly (demo)
    user.current_plan_type = 'yearly';
    user.subscription_start_date = new Date();
    user.subscription_end_date = new Date(new Date().setFullYear(new Date().getFullYear() + 1));
    user.payment_status = 'completed';
    await user.save();
    return res.json({ message: 'Demo upgrade th√†nh c√¥ng', plan: user.current_plan_type });
  } catch (error) {
    console.error('L·ªói demo upgrade:', error);
    return res.status(500).json({ message: error.message });
  }
});

module.exports = router;
