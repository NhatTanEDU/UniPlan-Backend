const mongoose = require('mongoose');
const ProjectType = require('./models/projectType.model.js');
const User = require('./models/user.model.js');

async function createDefaultProjectType() {
  try {
    await mongoose.connect('mongodb://localhost:27017/uniplan');
    console.log('ƒê√£ k·∫øt n·ªëi MongoDB');
    
    // T√¨m user admin ƒë·ªÉ t·∫°o project type ho·∫∑c t·∫°o user test
    let adminUser = await User.findOne({ email: 'admin@gmail.com' });
    
    if (!adminUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y user admin@gmail.com');
      
      // T√¨m user b·∫•t k·ª≥ trong database
      adminUser = await User.findOne();
      
      if (!adminUser) {
        console.log('‚ùå Kh√¥ng c√≥ user n√†o trong database, t·∫°o user test...');
        // T·∫°o user test
        const bcrypt = require('bcrypt');
        const hashedPassword = await bcrypt.hash('123456', 10);
        
        adminUser = new User({
          email: 'test@gmail.com',
          name: 'Test User',
          full_name: 'Test User',
          password: hashedPassword,
          role: 'User',
          status: 'Offline',
          isActive: true
        });
        await adminUser.save();
        console.log('‚úÖ ƒê√£ t·∫°o user test:', adminUser._id);
      } else {
        console.log('‚úÖ S·ª≠ d·ª•ng user c√≥ s·∫µn:', adminUser._id);
      }
    } else {
      console.log('‚úÖ T√¨m th·∫•y admin user:', adminUser._id);
    }
    
    const existing = await ProjectType.findOne({ name: 'Kh√¥ng ph√¢n lo·∫°i', userId: adminUser._id });
    if (!existing) {
      const defaultType = new ProjectType({
        name: 'Kh√¥ng ph√¢n lo·∫°i',
        description: 'Ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh cho c√°c d·ª± √°n',
        userId: adminUser._id
      });
      await defaultType.save();
      console.log('‚úÖ ƒê√£ t·∫°o project type m·∫∑c ƒë·ªãnh:', defaultType.toObject());
    } else {
      console.log('‚ÑπÔ∏è Project type m·∫∑c ƒë·ªãnh ƒë√£ t·ªìn t·∫°i:', existing.toObject());
    }
    
    // T·∫°o th√™m m·ªôt s·ªë project type kh√°c
    const types = [
      { name: 'Web Development', description: 'C√°c d·ª± √°n ph√°t tri·ªÉn web' },
      { name: 'Mobile App', description: 'C√°c d·ª± √°n ·ª©ng d·ª•ng di ƒë·ªông' },
      { name: 'Marketing', description: 'C√°c d·ª± √°n marketing v√† qu·∫£ng c√°o' },
      { name: 'Research', description: 'C√°c d·ª± √°n nghi√™n c·ª©u' }
    ];
    
    for (const type of types) {
      const existingType = await ProjectType.findOne({ name: type.name, userId: adminUser._id });
      if (!existingType) {
        const newType = new ProjectType({
          ...type,
          userId: adminUser._id
        });
        await newType.save();
        console.log(`‚úÖ ƒê√£ t·∫°o project type: ${type.name}`);
      } else {
        console.log(`‚ÑπÔ∏è Project type ƒë√£ t·ªìn t·∫°i: ${type.name}`);
      }
    }
    
    // Hi·ªÉn th·ªã t·∫•t c·∫£ project types
    const allTypes = await ProjectType.find();
    console.log('\nüìã Danh s√°ch t·∫•t c·∫£ project types:');
    allTypes.forEach(type => {
      console.log(`- ${type.name} (ID: ${type._id})`);
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

createDefaultProjectType();
