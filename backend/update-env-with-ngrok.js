const fs = require('fs');
const path = require('path');
const http = require('http');

class SimpleEnvUpdater {
    constructor() {
        this.envPath = path.join(__dirname, '.env');
    }

    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`[${timestamp}] ${message}`);
    }

    async getNgrokUrl() {
        this.log('üîç ƒêang l·∫•y URL t·ª´ ngrok API...');
        
        return new Promise((resolve, reject) => {
            const req = http.get('http://127.0.0.1:4040/api/tunnels', (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const tunnels = JSON.parse(data);
                        const httpsTunnel = tunnels.tunnels.find(tunnel => 
                            tunnel.proto === 'https' && tunnel.config.addr.includes('5000')
                        );
                        
                        if (httpsTunnel) {
                            const url = httpsTunnel.public_url;
                            this.log(`‚úÖ T√¨m th·∫•y ngrok URL: ${url}`);
                            resolve(url);
                        } else {
                            reject(new Error('Kh√¥ng t√¨m th·∫•y HTTPS tunnel cho port 5000'));
                        }
                    } catch (error) {
                        reject(new Error(`L·ªói parse JSON: ${error.message}`));
                    }
                });
            });
            
            req.on('error', (error) => {
                reject(new Error(`L·ªói k·∫øt n·ªëi ngrok API: ${error.message}\nƒê·∫£m b·∫£o ngrok ƒëang ch·∫°y: ngrok http 5000`));
            });
            
            req.setTimeout(5000, () => {
                req.destroy();
                reject(new Error('Timeout khi l·∫•y ngrok URL'));
            });
        });
    }

    updateEnvFile(ngrokUrl) {
        this.log('üìù ƒêang c·∫≠p nh·∫≠t file .env...');
        
        try {
            let envContent = fs.readFileSync(this.envPath, 'utf8');
            
            // Backup original file
            const backupPath = `${this.envPath}.backup.${Date.now()}`;
            fs.writeFileSync(backupPath, envContent);
            this.log(`üíæ ƒê√£ backup file .env g·ªëc t·∫°i: ${backupPath}`);
            
            // Update MOMO_REDIRECT_URL
            const redirectUrlPattern = /MOMO_REDIRECT_URL\s*=\s*.*/;
            const newRedirectUrl = `MOMO_REDIRECT_URL=${ngrokUrl}/api/payment/momo/return`;
            
            if (redirectUrlPattern.test(envContent)) {
                envContent = envContent.replace(redirectUrlPattern, newRedirectUrl);
                this.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t MOMO_REDIRECT_URL');
            } else {
                envContent += `\n${newRedirectUrl}`;
                this.log('‚ûï ƒê√£ th√™m MOMO_REDIRECT_URL');
            }
            
            // Update MOMO_IPN_URL
            const ipnUrlPattern = /MOMO_IPN_URL\s*=\s*.*/;
            const newIpnUrl = `MOMO_IPN_URL=${ngrokUrl}/api/payment/momo/ipn`;
            
            if (ipnUrlPattern.test(envContent)) {
                envContent = envContent.replace(ipnUrlPattern, newIpnUrl);
                this.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t MOMO_IPN_URL');
            } else {
                envContent += `\n${newIpnUrl}`;
                this.log('‚ûï ƒê√£ th√™m MOMO_IPN_URL');
            }
            
            // Write updated content
            fs.writeFileSync(this.envPath, envContent);
            
            this.log('üéâ ƒê√£ c·∫≠p nh·∫≠t file .env th√†nh c√¥ng!');
            this.log(`üîó Redirect URL: ${ngrokUrl}/api/payment/momo/return`);
            this.log(`üîó IPN URL: ${ngrokUrl}/api/payment/momo/ipn`);
            this.log('');
            this.log('üìã B∆Ø·ªöC TI·∫æP THEO:');
            this.log('1. Restart backend server ƒë·ªÉ load .env m·ªõi');
            this.log('2. Ch·∫°y test: node test-momo-integration.js');
            this.log('3. Th·ª≠ thanh to√°n v·ªõi QR code m·ªõi');
            
            return true;
        } catch (error) {
            this.log(`‚ùå L·ªói c·∫≠p nh·∫≠t .env: ${error.message}`);
            return false;
        }
    }

    async run() {
        try {
            this.log('üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t .env v·ªõi ngrok URL...');
            
            // Get ngrok URL
            const ngrokUrl = await this.getNgrokUrl();
            
            // Update .env file
            const success = this.updateEnvFile(ngrokUrl);
            
            if (success) {
                this.log('‚úÖ Ho√†n th√†nh!');
            } else {
                throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t .env');
            }
            
        } catch (error) {
            this.log(`‚ùå L·ªói: ${error.message}`);
            this.log('');
            this.log('üîß C√ÅCH KH·∫ÆC PH·ª§C:');
            this.log('1. ƒê·∫£m b·∫£o ngrok ƒëang ch·∫°y: D:\\Official_Project\\Project_UniPlan\\dowload\\ngrok-v3-stable-windows-amd64\\ngrok.exe http 5000');
            this.log('2. Ki·ªÉm tra ngrok web interface: http://127.0.0.1:4040');
            this.log('3. Ch·∫°y l·∫°i script n√†y: node update-env-with-ngrok.js');
            process.exit(1);
        }
    }
}

// Run the updater
if (require.main === module) {
    const updater = new SimpleEnvUpdater();
    updater.run();
}

module.exports = SimpleEnvUpdater;
