// Project Management Service - Menu 6
// Qu·∫£n l√Ω d·ª± √°n trong teams
const { MESSAGES, ENDPOINTS, DELAYS } = require('../config/constants');
const apiService = require('./apiService');

class ProjectService {
    constructor() {
        this.results = [];
        this.teamsList = [];
        this.projectsList = [];
        this.createdProjects = [];
        this.selectedTeam = null;
    }

    // Menu 6: Qu·∫£n l√Ω d·ª± √°n
    async executeProjectManagement() {
        try {
            console.log('\n' + '='.repeat(60));
            console.log('üìã MENU 6: QU·∫¢N L√ù D·ª∞ √ÅN');
            console.log('='.repeat(60));
            console.log(MESSAGES.PROJECT_MANAGEMENT.START);

            // B∆∞·ªõc 1: L·∫•y danh s√°ch teams
            console.log('\nüîç B∆∞·ªõc 1: L·∫•y danh s√°ch teams...');
            const teamsResult = await this.getTeamsList();
            if (!teamsResult.success) {
                throw new Error(teamsResult.error);
            }

            // B∆∞·ªõc 2: Ch·ªçn team ƒë·ªÉ t·∫°o d·ª± √°n
            console.log('\nüéØ B∆∞·ªõc 2: Ch·ªçn team ƒë·ªÉ qu·∫£n l√Ω d·ª± √°n...');
            this.selectedTeam = this.selectTeamForProject();
            console.log(`‚úÖ ƒê√£ ch·ªçn team: "${this.selectedTeam.team_name}"`);

            // B∆∞·ªõc 3: Xem d·ª± √°n hi·ªán t·∫°i c·ªßa team
            console.log('\nüìÇ B∆∞·ªõc 3: Ki·ªÉm tra d·ª± √°n hi·ªán t·∫°i...');
            await this.checkExistingProjects();

            // B∆∞·ªõc 4: T·∫°o d·ª± √°n m·ªõi
            console.log('\n‚ûï B∆∞·ªõc 4: T·∫°o d·ª± √°n m·ªõi...');
            const createResults = await this.createMultipleProjects();

            // B∆∞·ªõc 5: Qu·∫£n l√Ω d·ª± √°n (update, search)
            console.log('\nüõ†Ô∏è B∆∞·ªõc 5: Th·ª±c hi·ªán c√°c thao t√°c qu·∫£n l√Ω...');
            await this.executeProjectOperations();

            // B∆∞·ªõc 6: X√≥a m·ªôt s·ªë d·ª± √°n test
            console.log('\nüóëÔ∏è B∆∞·ªõc 6: D·ªçn d·∫πp d·ª± √°n test...');
            await this.cleanupTestProjects();

            // T·ªïng k·∫øt
            const summary = this.generateSummary();
            console.log('\nüìä K·∫æT QU·∫¢ QU·∫¢N L√ù D·ª∞ √ÅN:');
            console.log(summary);

            return {
                success: true,
                data: {
                    teamSelected: this.selectedTeam.team_name,
                    projectsCreated: this.createdProjects.length,
                    results: this.results,
                    summary: summary
                }
            };        } catch (error) {
            const errorMsg = `L·ªói trong qu·∫£n l√Ω d·ª± √°n: ${error.message}`;
            console.log(`\n‚ùå ${errorMsg}`);
            console.log('üîç Chi ti·∫øt l·ªói:', {
                selectedTeam: this.selectedTeam?.team_name || 'None',
                results: this.results
            });

            return {
                success: false,
                error: errorMsg,
                details: error
            };
        }
    }

    // L·∫•y danh s√°ch teams
    async getTeamsList() {
        try {
            const result = await apiService.apiCall('GET', ENDPOINTS.TEAMS_LIST);
            
            if (!result.success) {
                throw new Error(result.error);
            }

            this.teamsList = Array.isArray(result.data) ? result.data : 
                           (result.data.teams || []);

            console.log(`‚úÖ T√¨m th·∫•y ${this.teamsList.length} teams`);
            
            if (this.teamsList.length > 0) {
                console.log('üìã Danh s√°ch teams:');
                this.teamsList.forEach((team, index) => {
                    console.log(`  ${index + 1}. ${team.team_name} (${team.members?.length || 0} th√†nh vi√™n)`);
                });
            }

            return {
                success: true,
                data: this.teamsList
            };

        } catch (error) {
            return {
                success: false,
                error: `L·ªói l·∫•y danh s√°ch teams: ${error.message}`
            };
        }
    }

    // Ch·ªçn team ƒë·ªÉ t·∫°o d·ª± √°n
    selectTeamForProject() {
        if (this.teamsList.length === 0) {
            throw new Error('Kh√¥ng c√≥ teams ƒë·ªÉ ch·ªçn');
        }

        // Ch·ªçn team ƒë·∫ßu ti√™n ho·∫∑c team c√≥ nhi·ªÅu th√†nh vi√™n nh·∫•t
        return this.teamsList.reduce((maxTeam, currentTeam) => {
            const currentMembers = currentTeam.members?.length || 0;
            const maxMembers = maxTeam.members?.length || 0;
            return currentMembers > maxMembers ? currentTeam : maxTeam;
        });
    }

    // Ki·ªÉm tra d·ª± √°n hi·ªán t·∫°i
    async checkExistingProjects() {
        try {
            console.log('üîç L·∫•y danh s√°ch d·ª± √°n hi·ªán t·∫°i...');
            
            const result = await apiService.apiCall('GET', `/teams/${this.selectedTeam._id}/projects`);
            
            if (result.success) {
                this.projectsList = Array.isArray(result.data) ? result.data : 
                                  (result.data.projects || []);
                
                console.log(`üìÇ Team hi·ªán c√≥ ${this.projectsList.length} d·ª± √°n:`);
                
                if (this.projectsList.length > 0) {
                    this.projectsList.forEach((project, index) => {
                        console.log(`  ${index + 1}. üìã ${project.project_name || project.name}`);
                        console.log(`     üìù ${project.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`);
                        console.log(`     üìÖ T·∫°o: ${new Date(project.created_at).toLocaleDateString()}`);
                    });
                } else {
                    console.log('  ‚ÑπÔ∏è Team ch∆∞a c√≥ d·ª± √°n n√†o');
                }
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch d·ª± √°n hi·ªán t·∫°i');
                this.projectsList = [];
            }

        } catch (error) {
            console.log(`‚ö†Ô∏è L·ªói ki·ªÉm tra d·ª± √°n: ${error.message}`);
            this.projectsList = [];
        }
    }    // T·∫°o nhi·ªÅu d·ª± √°n
    async createMultipleProjects() {
        const projectsToCreate = [
            {
                name: `üöÄ D·ª± √°n Test Auto ${Math.floor(Math.random() * 9000 + 1000)}`,
                description: 'D·ª± √°n test t·ª± ƒë·ªông ƒë∆∞·ª£c t·∫°o b·ªüi h·ªá th·ªëng ki·ªÉm tra',
                priority: 'High',
                status: 'Active'
            },
            {
                name: `üì± App Mobile ${Math.floor(Math.random() * 900 + 100)}`,
                description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông cho team',
                priority: 'Medium',
                status: 'Active'
            },
            {
                name: `üåê Website Portal ${Math.floor(Math.random() * 90 + 10)}`,
                description: 'X√¢y d·ª±ng portal qu·∫£n l√Ω n·ªôi b·ªô',
                priority: 'Low',
                status: 'Archived'
            }
        ];

        const results = [];

        for (let i = 0; i < projectsToCreate.length; i++) {
            const projectData = projectsToCreate[i];
            console.log(`\n‚ûï T·∫°o d·ª± √°n: ${projectData.name}`);
            console.log(`   üìù M√¥ t·∫£: ${projectData.description}`);
            console.log(`   üéØ ∆Øu ti√™n: ${projectData.priority}`);
            console.log(`   üìä Tr·∫°ng th√°i: ${projectData.status}`);

            try {
                const createResult = await this.createProject(projectData);
                
                const result = {
                    projectName: projectData.name,
                    description: projectData.description,
                    priority: projectData.priority,
                    status: projectData.status,
                    success: createResult.success,
                    message: createResult.success ? 
                            MESSAGES.PROJECT_MANAGEMENT.CREATE_SUCCESS : 
                            createResult.error,
                    projectId: createResult.success ? 
                              (createResult.data?.project?._id || createResult.data?._id) : null,
                    timestamp: new Date().toLocaleString(),
                    operation: 'CREATE'
                };

                results.push(result);
                this.results.push(result);

                if (createResult.success) {
                    this.createdProjects.push({
                        id: result.projectId,
                        name: projectData.name,
                        ...projectData
                    });
                    console.log(`   ‚úÖ ${MESSAGES.PROJECT_MANAGEMENT.CREATE_SUCCESS}`);
                } else {
                    console.log(`   ‚ùå L·ªói: ${createResult.error}`);
                }

            } catch (error) {
                const errorResult = {
                    projectName: projectData.name,
                    description: projectData.description,
                    success: false,
                    message: `L·ªói kh√¥ng mong mu·ªën: ${error.message}`,
                    timestamp: new Date().toLocaleString(),
                    operation: 'CREATE'
                };

                results.push(errorResult);
                this.results.push(errorResult);
                console.log(`   ‚ùå L·ªói kh√¥ng mong mu·ªën: ${error.message}`);            }

            await new Promise(resolve => setTimeout(resolve, DELAYS.SHORT));
        }

        return results;
    }    // L·∫•y project type m·∫∑c ƒë·ªãnh
    async getDefaultProjectType() {
        try {
            // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch project types
            const result = await apiService.apiCall('GET', '/project-types');
            
            if (result.success && result.data && result.data.length > 0) {
                // T√¨m project type m·∫∑c ƒë·ªãnh ho·∫∑c l·∫•y c√°i ƒë·∫ßu ti√™n
                const defaultType = result.data.find(type => type.is_default) || result.data[0];
                console.log(`üìã S·ª≠ d·ª•ng project type: ${defaultType.type_name} (ID: ${defaultType._id})`);
                return defaultType._id;
            } else {
                // Fallback: s·ª≠ d·ª•ng ObjectId gi·∫£ ƒë·ªÉ test
                console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y project type, s·ª≠ d·ª•ng ID m·∫∑c ƒë·ªãnh');
                return '507f1f77bcf86cd799439011'; // ObjectId gi·∫£ cho test
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è L·ªói l·∫•y project type: ${error.message}, s·ª≠ d·ª•ng ID m·∫∑c ƒë·ªãnh`);
            return '507f1f77bcf86cd799439011'; // ObjectId gi·∫£ cho test
        }
    }

    // T·∫°o d·ª± √°n
    async createProject(projectData) {
        try {
            // Get default project type first
            const defaultProjectType = await this.getDefaultProjectType();
            
            const payload = {
                project_name: projectData.name,
                description: projectData.description,
                team_id: this.selectedTeam._id,
                priority: projectData.priority || 'Medium',  // Fixed: use correct enum
                status: projectData.status || 'Active',      // Fixed: use correct enum
                project_type_id: defaultProjectType,         // Fixed: add required field
                start_date: new Date().toISOString(),
                end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 ng√†y sau
            };

            console.log('üì§ Payload t·∫°o d·ª± √°n:', {
                project_name: payload.project_name,
                team_id: payload.team_id,
                priority: payload.priority,
                status: payload.status,
                project_type_id: payload.project_type_id
            });

            const result = await apiService.apiCall('POST', ENDPOINTS.PROJECTS, payload);

            if (!result.success) {
                throw new Error(result.error);
            }

            return {
                success: true,
                data: result.data
            };

        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    // Th·ª±c hi·ªán c√°c thao t√°c qu·∫£n l√Ω d·ª± √°n
    async executeProjectOperations() {
        const operations = [];

        try {
            // Thao t√°c 1: T√¨m ki·∫øm d·ª± √°n
            console.log('\nüîç Thao t√°c 1: T√¨m ki·∫øm d·ª± √°n...');
            const searchResult = await this.searchProjects();            operations.push(searchResult);

            await new Promise(resolve => setTimeout(resolve, DELAYS.SHORT));

            // Thao t√°c 2: C·∫≠p nh·∫≠t d·ª± √°n
            if (this.createdProjects.length > 0) {
                console.log('\nüìù Thao t√°c 2: C·∫≠p nh·∫≠t d·ª± √°n...');
                const updateResult = await this.updateProject();
                operations.push(updateResult);
            }            await new Promise(resolve => setTimeout(resolve, DELAYS.SHORT));

            // Thao t√°c 3: L·∫•y chi ti·∫øt d·ª± √°n
            if (this.createdProjects.length > 0) {
                console.log('\nüìã Thao t√°c 3: L·∫•y chi ti·∫øt d·ª± √°n...');
                const detailResult = await this.getProjectDetails();
                operations.push(detailResult);
            }

            return operations;

        } catch (error) {
            console.log(`‚ö†Ô∏è L·ªói trong thao t√°c qu·∫£n l√Ω: ${error.message}`);
            return operations;
        }
    }

    // T√¨m ki·∫øm d·ª± √°n
    async searchProjects() {
        try {
            console.log('üîç T√¨m ki·∫øm t·∫•t c·∫£ d·ª± √°n c·ªßa team...');
            
            const result = await apiService.apiCall('GET', `/teams/${this.selectedTeam._id}/projects`);
            
            if (!result.success) {
                throw new Error(result.error);
            }

            const projects = Array.isArray(result.data) ? result.data : 
                           (result.data.projects || []);

            console.log(`üìÇ T√¨m th·∫•y ${projects.length} d·ª± √°n:`);
            projects.forEach((project, index) => {
                console.log(`  ${index + 1}. üìã ${project.project_name || project.name}`);
                console.log(`     üìù ${project.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`);
                console.log(`     üéØ ∆Øu ti√™n: ${project.priority || 'N/A'}`);
                console.log(`     üìä Tr·∫°ng th√°i: ${project.status || 'N/A'}`);
            });

            const searchResult = {
                operation: 'SEARCH',
                success: true,
                message: `T√¨m th·∫•y ${projects.length} d·ª± √°n`,
                projectsFound: projects.length,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(searchResult);
            return searchResult;

        } catch (error) {
            const errorResult = {
                operation: 'SEARCH',
                success: false,
                message: `L·ªói t√¨m ki·∫øm: ${error.message}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(errorResult);
            return errorResult;
        }
    }    // C·∫≠p nh·∫≠t d·ª± √°n
    async updateProject() {
        try {
            const projectToUpdate = this.createdProjects[0];
            const newData = {
                description: `üìù M√¥ t·∫£ ƒë√£ c·∫≠p nh·∫≠t l√∫c ${new Date().toLocaleTimeString()}`,
                priority: 'High',
                status: 'Active'
            };

            console.log(`üìù C·∫≠p nh·∫≠t d·ª± √°n: ${projectToUpdate.name}`);
            console.log(`   üìù M√¥ t·∫£ m·ªõi: ${newData.description}`);
            console.log(`   üéØ ∆Øu ti√™n m·ªõi: ${newData.priority}`);
            console.log(`   üìä Tr·∫°ng th√°i m·ªõi: ${newData.status}`);

            const result = await apiService.apiCall(
                'PUT', 
                `/projects/${projectToUpdate.id}`, 
                newData
            );

            const updateResult = {
                operation: 'UPDATE',
                projectName: projectToUpdate.name,
                projectId: projectToUpdate.id,
                success: result.success,
                message: result.success ? 
                        'C·∫≠p nh·∫≠t d·ª± √°n th√†nh c√¥ng' : 
                        `L·ªói c·∫≠p nh·∫≠t: ${result.error}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(updateResult);

            if (result.success) {
                console.log('   ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng');
            } else {
                console.log(`   ‚ùå L·ªói: ${result.error}`);
            }

            return updateResult;

        } catch (error) {
            const errorResult = {
                operation: 'UPDATE',
                success: false,
                message: `L·ªói c·∫≠p nh·∫≠t: ${error.message}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(errorResult);
            return errorResult;
        }
    }

    // L·∫•y chi ti·∫øt d·ª± √°n
    async getProjectDetails() {
        try {
            const project = this.createdProjects[0];
            
            console.log(`üìã L·∫•y chi ti·∫øt d·ª± √°n: ${project.name}`);

            const result = await apiService.apiCall('GET', `/projects/${project.id}`);

            if (result.success) {
                const projectData = result.data.project || result.data;
                console.log('   üìã Chi ti·∫øt d·ª± √°n:');
                console.log(`   üìù T√™n: ${projectData.project_name || projectData.name}`);
                console.log(`   üìÑ M√¥ t·∫£: ${projectData.description || 'N/A'}`);
                console.log(`   üéØ ∆Øu ti√™n: ${projectData.priority || 'N/A'}`);
                console.log(`   üìä Tr·∫°ng th√°i: ${projectData.status || 'N/A'}`);
                console.log(`   üìÖ T·∫°o: ${new Date(projectData.created_at).toLocaleString()}`);
            }

            const detailResult = {
                operation: 'GET_DETAILS',
                projectName: project.name,
                projectId: project.id,
                success: result.success,
                message: result.success ? 
                        'L·∫•y chi ti·∫øt th√†nh c√¥ng' : 
                        `L·ªói l·∫•y chi ti·∫øt: ${result.error}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(detailResult);

            if (result.success) {
                console.log('   ‚úÖ L·∫•y chi ti·∫øt th√†nh c√¥ng');
            } else {
                console.log(`   ‚ùå L·ªói: ${result.error}`);
            }

            return detailResult;

        } catch (error) {
            const errorResult = {
                operation: 'GET_DETAILS',
                success: false,
                message: `L·ªói l·∫•y chi ti·∫øt: ${error.message}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(errorResult);
            return errorResult;
        }
    }

    // D·ªçn d·∫πp d·ª± √°n test
    async cleanupTestProjects() {
        try {
            if (this.createdProjects.length === 0) {
                console.log('‚ÑπÔ∏è Kh√¥ng c√≥ d·ª± √°n n√†o ƒë·ªÉ d·ªçn d·∫πp');
                return;
            }

            // X√≥a d·ª± √°n cu·ªëi c√πng ƒë·ªÉ test ch·ª©c nƒÉng x√≥a
            const projectToDelete = this.createdProjects[this.createdProjects.length - 1];
            
            console.log(`üóëÔ∏è X√≥a d·ª± √°n test: ${projectToDelete.name}`);

            const result = await apiService.apiCall('DELETE', `/projects/${projectToDelete.id}`);

            const deleteResult = {
                operation: 'DELETE',
                projectName: projectToDelete.name,
                projectId: projectToDelete.id,
                success: result.success,
                message: result.success ? 
                        'X√≥a d·ª± √°n th√†nh c√¥ng' : 
                        `L·ªói x√≥a: ${result.error}`,
                timestamp: new Date().toLocaleString()
            };

            this.results.push(deleteResult);

            if (result.success) {
                console.log('   ‚úÖ X√≥a th√†nh c√¥ng');
                // X√≥a kh·ªèi danh s√°ch local
                this.createdProjects = this.createdProjects.filter(p => p.id !== projectToDelete.id);
            } else {
                console.log(`   ‚ùå L·ªói: ${result.error}`);
            }

        } catch (error) {
            console.log(`‚ö†Ô∏è L·ªói d·ªçn d·∫πp: ${error.message}`);
        }
    }

    // T·∫°o b√°o c√°o t·ªïng k·∫øt
    generateSummary() {
        const total = this.results.length;
        const successful = this.results.filter(r => r.success).length;
        const failed = total - successful;

        // Th·ªëng k√™ theo operation
        const operationStats = {};
        this.results.forEach(result => {
            const op = result.operation || 'UNKNOWN';
            if (!operationStats[op]) {
                operationStats[op] = { total: 0, success: 0, failed: 0 };
            }
            operationStats[op].total++;
            if (result.success) {
                operationStats[op].success++;
            } else {
                operationStats[op].failed++;
            }
        });

        let summary = `\nüìä T·ªîNG K·∫æT QU·∫¢N L√ù D·ª∞ √ÅN:\n`;
        summary += `   ‚Ä¢ Team ƒë√£ ch·ªçn: ${this.selectedTeam?.team_name || 'N/A'}\n`;
        summary += `   ‚Ä¢ D·ª± √°n ƒë√£ t·∫°o: ${this.createdProjects.length}\n`;
        summary += `   ‚Ä¢ T·ªïng thao t√°c: ${total}\n`;
        summary += `   ‚Ä¢ Th√†nh c√¥ng: ${successful} ‚úÖ\n`;
        summary += `   ‚Ä¢ Th·∫•t b·∫°i: ${failed} ‚ùå\n`;
        summary += `   ‚Ä¢ T·ª∑ l·ªá th√†nh c√¥ng: ${total > 0 ? Math.round((successful/total) * 100) : 0}%\n`;

        if (Object.keys(operationStats).length > 0) {
            summary += `\nüìã TH·ªêNG K√ä THEO THAO T√ÅC:\n`;
            Object.entries(operationStats).forEach(([operation, stats]) => {
                summary += `   ‚Ä¢ ${operation}: ${stats.success}/${stats.total} th√†nh c√¥ng\n`;
            });
        }

        if (this.createdProjects.length > 0) {
            summary += `\nüìã D·ª∞ √ÅN ƒê√É T·∫†O:\n`;
            this.createdProjects.forEach((project, index) => {
                summary += `   ${index + 1}. ${project.name}\n`;
                summary += `      üìù ${project.description}\n`;
                summary += `      üéØ ∆Øu ti√™n: ${project.priority}\n`;
            });
        }

        return summary;
    }

    // L·∫•y k·∫øt qu·∫£ test
    getResults() {
        return {
            results: this.results,
            selectedTeam: this.selectedTeam,
            teamsList: this.teamsList,
            projectsList: this.projectsList,
            createdProjects: this.createdProjects,
            summary: this.generateSummary()
        };
    }

    // Reset service
    reset() {
        this.results = [];
        this.teamsList = [];
        this.projectsList = [];
        this.createdProjects = [];
        this.selectedTeam = null;
    }
}

module.exports = new ProjectService();
