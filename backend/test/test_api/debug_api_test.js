const axios = require('axios');

// C·∫•u h√¨nh test
const BASE_URL = 'http://localhost:5000/api';
let authToken = '';

// T√†i kho·∫£n Admin ƒë·ªÉ test
const ADMIN_ACCOUNT = {
    email: 'Admin1@gmail.com',
    password: '123456'
};

// Function helper ƒë·ªÉ g·ªçi API
const apiCall = async (method, url, data = null) => {
    try {
        console.log(`üîó ƒêang g·ªçi API: ${method} ${BASE_URL}${url}`);
        
        const config = {
            method,
            url: `${BASE_URL}${url}`,
            headers: {
                'Content-Type': 'application/json',
                ...(authToken && { 'Authorization': `Bearer ${authToken}` })
            },
            ...(data && { data }),
            timeout: 10000 // 10 gi√¢y timeout
        };

        console.log('üì§ Request config:', {
            method: config.method,
            url: config.url,
            headers: config.headers,
            data: config.data
        });

        const response = await axios(config);
        
        console.log('‚úÖ Response th√†nh c√¥ng:', {
            status: response.status,
            statusText: response.statusText,
            dataKeys: Object.keys(response.data || {}),
            dataType: typeof response.data
        });
        
        return { 
            success: true, 
            data: response.data, 
            status: response.status,
            statusText: response.statusText 
        };
    } catch (error) {
        console.log('‚ùå L·ªói API call:');
        console.log('   - Message:', error.message);
        console.log('   - Code:', error.code);
        
        if (error.response) {
            console.log('   - Response Status:', error.response.status);
            console.log('   - Response Data:', error.response.data);
            console.log('   - Response Headers:', error.response.headers);
        } else if (error.request) {
            console.log('   - Request ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng c√≥ response');
            console.log('   - Request:', error.request);
        }
        
        return { 
            success: false, 
            error: error.response?.data?.message || error.message,
            status: error.response?.status || 500,
            fullError: error
        };
    }
};

// 1. Test k·∫øt n·ªëi c∆° b·∫£n
async function testBasicConnection() {
    console.log('\nüîç KI·ªÇM TRA K·∫æT N·ªêI C∆† B·∫¢N');
    console.log('==============================');
    
    try {
        // Test endpoint auth/login ƒë·ªÉ ki·ªÉm tra server (kh√¥ng c·∫ßn auth)
        const response = await axios.post('http://localhost:5000/api/auth/login', {
            email: 'test@test.com',
            password: 'wrong'
        }, { 
            timeout: 5000,
            validateStatus: function (status) {
                // Ch·∫•p nh·∫≠n c·∫£ status 400 (bad request) v√¨ ƒë√≥ c≈©ng l√† response t·ª´ server
                return status < 500;
            }
        });
        console.log('‚úÖ Server ƒëang ch·∫°y v√† ph·∫£n h·ªìi');
        console.log('   - Status:', response.status);
        console.log('   - Server c√≥ th·ªÉ x·ª≠ l√Ω requests');
        return true;
    } catch (error) {
        if (error.code === 'ECONNREFUSED') {
            console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server');
            console.log('   - Server ch∆∞a ch·∫°y ho·∫∑c kh√¥ng listen tr√™n port 5000');
            console.log('üí° H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y: npm start ho·∫∑c node server.js');
            return false;
        } else {
            console.log('‚úÖ Server ƒëang ch·∫°y (nh·∫≠n ƒë∆∞·ª£c response)');
            console.log('   - Error:', error.message);
            console.log('   - Nh∆∞ng server c√≥ th·ªÉ ph·∫£n h·ªìi, ti·∫øp t·ª•c test...');
            return true;
        }
    }
}

// 2. Test ƒëƒÉng nh·∫≠p
async function testLogin() {
    console.log('\nüîê KI·ªÇM TRA ƒêƒÇNG NH·∫¨P');
    console.log('======================');
    
    const result = await apiCall('POST', '/auth/login', {
        email: ADMIN_ACCOUNT.email,
        password: ADMIN_ACCOUNT.password
    });

    if (result.success) {
        authToken = result.data.token;
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
        console.log('   - User:', result.data.user?.name || result.data.user?.full_name);
        console.log('   - Email:', result.data.user?.email);
        console.log('   - Token c√≥:', authToken ? 'C√≥' : 'Kh√¥ng c√≥');
        return true;
    } else {
        console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
        console.log('   - L·ªói:', result.error);
        console.log('üí° Ki·ªÉm tra t√†i kho·∫£n Admin1@gmail.com c√≥ t·ªìn t·∫°i kh√¥ng');
        return false;
    }
}

// 3. Test API Users chi ti·∫øt
async function testUsersAPI() {
    console.log('\nüë• KI·ªÇM TRA API USERS CHI TI·∫æT');
    console.log('===============================');
    
    // Test kh√¥ng c√≥ auth
    console.log('üìù Test GET /users (kh√¥ng c√≥ auth):');
    let result = await apiCall('GET', '/users');
    console.log('   - K·∫øt qu·∫£:', result.success ? 'Th√†nh c√¥ng' : `L·ªói: ${result.error}`);
    
    if (!authToken) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ token, b·ªè qua test c√≥ auth');
        return false;
    }
    
    // Test c√≥ auth
    console.log('\nüìù Test GET /users (c√≥ auth):');
    result = await apiCall('GET', '/users');
    
    if (result.success) {
        console.log('‚úÖ API /users ho·∫°t ƒë·ªông t·ªët');
        console.log('   - Data structure:', typeof result.data);
        console.log('   - Keys:', Object.keys(result.data || {}));
        
        if (result.data.data && result.data.data.users) {
            console.log('   - S·ªë users:', result.data.data.users.length);
            console.log('   - User ƒë·∫ßu ti√™n:', result.data.data.users[0]?.full_name || 'N/A');
        } else if (result.data.users) {
            console.log('   - S·ªë users:', result.data.users.length);
            console.log('   - User ƒë·∫ßu ti√™n:', result.data.users[0]?.full_name || 'N/A');
        } else {
            console.log('   - C·∫•u tr√∫c data kh√¥ng nh∆∞ mong ƒë·ª£i');
            console.log('   - Full data:', JSON.stringify(result.data, null, 2));
        }
        return true;
    } else {
        console.log('‚ùå API /users l·ªói:', result.error);
        return false;
    }
}

// 4. Test API Personal Members chi ti·∫øt
async function testPersonalMembersAPI() {
    console.log('\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ KI·ªÇM TRA API PERSONAL MEMBERS CHI TI·∫æT');
    console.log('==============================================');
    
    if (!authToken) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ token, b·ªè qua test');
        return false;
    }
    
    // Test endpoint c∆° b·∫£n
    console.log('üìù Test GET /personal-members:');
    let result = await apiCall('GET', '/personal-members');
    
    if (result.success) {
        console.log('‚úÖ API /personal-members ho·∫°t ƒë·ªông');
        console.log('   - Data structure:', typeof result.data);
        console.log('   - Keys:', Object.keys(result.data || {}));
        
        if (result.data.members) {
            console.log('   - S·ªë members:', result.data.members.length);
            if (result.data.members.length > 0) {
                console.log('   - Member ƒë·∫ßu ti√™n:', JSON.stringify(result.data.members[0], null, 2));
            }
        } else {
            console.log('   - Kh√¥ng c√≥ field "members"');
            console.log('   - Full data:', JSON.stringify(result.data, null, 2));
        }
        return true;
    } else {
        console.log('‚ùå API /personal-members l·ªói:', result.error);
        
        // Test endpoint kh√°c
        console.log('\nüìù Test c√°c endpoint kh√°c:');
        
        // Test search endpoint
        console.log('üìù Test GET /personal-members/search:');
        result = await apiCall('GET', '/personal-members/search');
        console.log('   - K·∫øt qu·∫£:', result.success ? 'Th√†nh c√¥ng' : `L·ªói: ${result.error}`);
        
        return false;
    }
}

// 5. Test c√°c endpoints kh√°c
async function testOtherEndpoints() {
    console.log('\nüîç KI·ªÇM TRA C√ÅC ENDPOINTS KH√ÅC');
    console.log('==============================');
    
    if (!authToken) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ token, b·ªè qua test');
        return;
    }
    
    const endpoints = [
        '/teams',
        '/admin',
        '/notifications'
    ];
    
    for (const endpoint of endpoints) {
        console.log(`üìù Test GET ${endpoint}:`);
        const result = await apiCall('GET', endpoint);
        console.log(`   - K·∫øt qu·∫£: ${result.success ? 'Th√†nh c√¥ng' : `L·ªói: ${result.error}`}`);
    }
}

// 6. Ki·ªÉm tra middleware v√† auth
async function testAuthMiddleware() {
    console.log('\nüõ°Ô∏è KI·ªÇM TRA MIDDLEWARE AUTH');
    console.log('============================');
    
    // Test v·ªõi token kh√¥ng h·ª£p l·ªá
    console.log('üìù Test v·ªõi token kh√¥ng h·ª£p l·ªá:');
    const oldToken = authToken;
    authToken = 'invalid-token-123';
    
    let result = await apiCall('GET', '/users');
    console.log(`   - K·∫øt qu·∫£: ${result.success ? 'Th√†nh c√¥ng (l·ªói!)' : `L·ªói nh∆∞ mong ƒë·ª£i: ${result.error}`}`);
    
    // Test v·ªõi token r·ªóng
    console.log('üìù Test v·ªõi token r·ªóng:');
    authToken = '';
    
    result = await apiCall('GET', '/users');
    console.log(`   - K·∫øt qu·∫£: ${result.success ? 'Th√†nh c√¥ng (l·ªói!)' : `L·ªói nh∆∞ mong ƒë·ª£i: ${result.error}`}`);
    
    // Kh√¥i ph·ª•c token
    authToken = oldToken;
    console.log('üìù Test v·ªõi token h·ª£p l·ªá sau khi kh√¥i ph·ª•c:');
    result = await apiCall('GET', '/users');
    console.log(`   - K·∫øt qu·∫£: ${result.success ? 'Th√†nh c√¥ng' : `L·ªói: ${result.error}`}`);
}

// Main function ch·∫°y t·∫•t c·∫£ test
async function runAllDebugTests() {
    console.log('üöÄ B·∫ÆT ƒê·∫¶U DEBUG API TEST');
    console.log('==========================');
    console.log('üéØ M·ª•c ti√™u: T√¨m nguy√™n nh√¢n l·ªói "undefined" trong APIs');
    console.log('');
    
    try {
        // B∆∞·ªõc 1: Ki·ªÉm tra server c√≥ ch·∫°y kh√¥ng
        const serverOK = await testBasicConnection();
        if (!serverOK) {
            console.log('\nüõë D·ª™NG TEST: Server kh√¥ng ch·∫°y');
            return;
        }
        
        // B∆∞·ªõc 2: Test ƒëƒÉng nh·∫≠p
        const loginOK = await testLogin();
        if (!loginOK) {
            console.log('\n‚ö†Ô∏è TI·∫æP T·ª§C TEST m√† kh√¥ng c√≥ auth');
        }
        
        // B∆∞·ªõc 3: Test API Users
        await testUsersAPI();
        
        // B∆∞·ªõc 4: Test API Personal Members
        await testPersonalMembersAPI();
        
        // B∆∞·ªõc 5: Test middleware auth
        if (loginOK) {
            await testAuthMiddleware();
        }
        
        // B∆∞·ªõc 6: Test c√°c endpoints kh√°c
        await testOtherEndpoints();
        
        console.log('\nüéä HO√ÄN TH√ÄNH DEBUG TEST');
        console.log('========================');
        console.log('üìã H√£y xem k·∫øt qu·∫£ ·ªü tr√™n ƒë·ªÉ x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ');
        
    } catch (error) {
        console.log('\nüí• L·ªñI NGHI√äM TR·ªåNG TRONG DEBUG TEST:');
        console.log('====================================');
        console.log('Error:', error.message);
        console.log('Stack:', error.stack);
    }
}

// Menu ƒë·ªÉ ch·ªçn test c·ª• th·ªÉ
async function showDebugMenu() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    function ask(question) {
        return new Promise(resolve => rl.question(question, resolve));
    }
    
    console.log('\nüõ†Ô∏è DEBUG MENU - CH·ªåN TEST C·ª§ TH·ªÇ');
    console.log('===============================');
    console.log('1. Ch·∫°y t·∫•t c·∫£ tests');
    console.log('2. Ch·ªâ test k·∫øt n·ªëi server');
    console.log('3. Ch·ªâ test ƒëƒÉng nh·∫≠p');
    console.log('4. Ch·ªâ test API Users');
    console.log('5. Ch·ªâ test API Personal Members');
    console.log('6. Ch·ªâ test Auth Middleware');
    console.log('0. Tho√°t');
    console.log('');
    
    const choice = await ask('Ch·ªçn option (0-6): ');
    
    switch (choice.trim()) {
        case '1':
            await runAllDebugTests();
            break;
        case '2':
            await testBasicConnection();
            break;
        case '3':
            await testLogin();
            break;
        case '4':
            await testLogin();
            await testUsersAPI();
            break;
        case '5':
            await testLogin();
            await testPersonalMembersAPI();
            break;
        case '6':
            await testLogin();
            await testAuthMiddleware();
            break;
        case '0':
            console.log('üëã T·∫°m bi·ªát!');
            rl.close();
            return;
        default:
            console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá');
    }
    
    console.log('\nüîÑ Quay l·∫°i menu...');
    rl.close();
    setTimeout(() => showDebugMenu(), 1000);
}

// Ch·∫°y ngay l·∫≠p t·ª©c ho·∫∑c hi·ªÉn th·ªã menu
if (process.argv.includes('--auto')) {
    runAllDebugTests();
} else {
    showDebugMenu();
}
