const Project = require("../models/project.model.js");
const ProjectType = require('../models/projectType.model.js');
const Kanban = require('../models/kanban.model.js'); // Import Kanban model
const mongoose = require('mongoose');
const axios = require('axios');

// Helper function to get or create default project type
const getOrCreateDefaultProjectType = async (userId) => {
  try {
    let defaultType = await ProjectType.findOne({ name: "Kh√¥ng ph√¢n lo·∫°i", userId });
    if (!defaultType) {
      try {
        defaultType = await ProjectType.create({
          name: "Kh√¥ng ph√¢n lo·∫°i",
          userId,
          description: "Ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh cho c√°c d·ª± √°n"
        });
        console.log('Created new default project type:', defaultType._id);
      } catch (createError) {
        // N·∫øu c√≥ l·ªói duplicate key, th·ª≠ t√¨m l·∫°i (c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi request kh√°c)
        if (createError.code === 11000) {
          console.log('Project type already exists, finding it...');
          defaultType = await ProjectType.findOne({ name: "Kh√¥ng ph√¢n lo·∫°i", userId });
          if (!defaultType) {
            // Th·ª≠ t√¨m global default (kh√¥ng c√≥ userId)
            defaultType = await ProjectType.findOne({ name: "Kh√¥ng ph√¢n lo·∫°i" });
            if (!defaultType) {
              throw new Error('Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh');
            } else {
              console.log('Found global default project type:', defaultType._id);
            }
          } else {
            console.log('Found user-specific default project type:', defaultType._id);
          }
        } else {
          throw createError;
        }
      }
    } else {
      console.log('Found existing default project type:', defaultType._id);
    }
    return defaultType._id;
  } catch (error) {
    console.error('L·ªói khi t·∫°o/t√¨m ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh:', error);
    throw error;
  }
};

// THAY TH·∫æ H√ÄM createProject B·∫∞NG PHI√äN B·∫¢N M·ªöI C√ì AUTO-MEMBER (KH√îNG D√ôNG TRANSACTION)
exports.createProject = async (req, res) => {
  const reqId = `[createProject-${Date.now()}]`;
  console.log(`${reqId} [1] B·∫Øt ƒë·∫ßu t·∫°o d·ª± √°n m·ªõi...`);
  
  try {
    const { project_name, description, start_date, end_date, status, priority, project_type_id, team_id } = req.body;
    const userId = req.user.userId;

    console.log(`${reqId} [2] D·ªØ li·ªáu ƒë·∫ßu v√†o:`, req.body);

    if (!project_name) {
      return res.status(400).json({ message: 'T√™n d·ª± √°n l√† b·∫Øt bu·ªôc' });
    }

    // T√¨m ho·∫∑c t·∫°o ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh
    let finalProjectTypeId = project_type_id;
    if (!project_type_id) {
      console.log(`${reqId} [2.1] Project type ID not provided, using helper function...`);
      try {
        finalProjectTypeId = await getOrCreateDefaultProjectType(userId);
      } catch (error) {
        return res.status(500).json({ message: 'L·ªói khi t·∫°o ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh', error: error.message });
      }
    }

    // B∆∞·ªõc 1: T·∫°o d·ª± √°n m·ªõi
    console.log(`${reqId} [3] ƒêang t·∫°o document Project...`);
    const newProject = new Project({
      project_name,
      description,
      start_date: start_date || new Date(),
      end_date: end_date || new Date(new Date().setMonth(new Date().getMonth() + 1)),
      status: status || 'Planning',
      priority: priority || 'Medium',
      project_type_id: finalProjectTypeId,
      team_id: team_id || null,
      created_by: userId,
      is_deleted: false,
      deleted_at: null
    });
    
    const savedProject = await newProject.save();
    console.log(`${reqId} [4] ƒê√£ t·∫°o Project th√†nh c√¥ng v·ªõi ID: ${savedProject._id}`);

    // --- LOGIC M·ªöI QUAN TR·ªåNG ---
    // B∆∞·ªõc 2: T·ª± ƒë·ªông th√™m ng∆∞·ªùi t·∫°o d·ª± √°n v√†o l√†m th√†nh vi√™n v·ªõi vai tr√≤ Qu·∫£n tr·ªã vi√™n
    console.log(`${reqId} [5] ƒêang t·ª± ƒë·ªông th√™m ng∆∞·ªùi t·∫°o l√†m Project Owner...`);
    const ProjectMember = require('../models/projectMember.model');
    
    const projectOwner = new ProjectMember({
        project_id: savedProject._id,
        user_id: userId,
        role_in_project: 'Qu·∫£n tr·ªã vi√™n', // G√°n vai tr√≤ cao nh·∫•t cho ng∆∞·ªùi t·∫°o
        is_active: true
    });

    await projectOwner.save();
    console.log(`${reqId} [6] ƒê√£ th√™m Owner v√†o ProjectMember th√†nh c√¥ng.`);
    // ----------------------------

    // B∆∞·ªõc 3: T·∫°o b·∫£ng Kanban m·∫∑c ƒë·ªãnh cho d·ª± √°n
    console.log(`${reqId} [7] ƒêang t·∫°o Kanban m·∫∑c ƒë·ªãnh...`);
    const newKanban = new Kanban({
        project_id: savedProject._id,
        name: `B·∫£ng Kanban cho ${savedProject.project_name}`,
        created_by: userId
    });
    
    const savedKanban = await newKanban.save();
    console.log(`${reqId} [8] ƒê√£ t·∫°o Kanban th√†nh c√¥ng v·ªõi ID: ${savedKanban._id}`);

    // B∆∞·ªõc 4: Li√™n k·∫øt Kanban v·ªõi Project
    savedProject.kanban_id = savedKanban._id;
    await savedProject.save();
    console.log(`${reqId} [9] ƒê√£ li√™n k·∫øt Kanban v·ªõi Project.`);

    // Populate the project before sending it back
    const populatedProject = await Project.findById(savedProject._id)
      .populate('project_type_id', 'name description')
      .populate('created_by', 'full_name email');

    // Emit socket event khi t·∫°o d·ª± √°n th√†nh c√¥ng
    if (req.server?.io) {
      req.server.io.to(userId).emit('project_changed', { action: 'create', project: populatedProject });
    }
    
    res.status(201).json({ 
        message: 'T·∫°o d·ª± √°n v√† b·∫£ng Kanban th√†nh c√¥ng',
        project: populatedProject,
        kanban: savedKanban 
    });

  } catch (error) {
    console.error(`‚ùå L·ªói nghi√™m tr·ªçng trong ${reqId}:`, error);
    if (!res.headersSent) {
      res.status(500).json({ message: 'L·ªói server khi t·∫°o d·ª± √°n', error: error.message });
    }
  }
};

// L·∫•y danh s√°ch d·ª± √°n c·ªßa user (bao g·ªìm c·∫£ d·ª± √°n ƒë∆∞·ª£c m·ªùi v√†o v√† d·ª± √°n ƒë√£ t·∫°o)
exports.getMyProjects = async (req, res) => {
  const reqId = `[getMyProjects-${req.user.userId.slice(-4)}-${Date.now()}]`;
  const startTime = Date.now();
  
  console.log(`${reqId} [1] B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch d·ª± √°n (bao g·ªìm d·ª± √°n ƒë∆∞·ª£c m·ªùi v√† d·ª± √°n ƒë√£ t·∫°o)...`);
  
  try {
    const userId = new mongoose.Types.ObjectId(req.user.userId);
    console.log(`${reqId} [2] ƒêang t√¨m c√°c d·ª± √°n m√† user ID: ${userId} l√† th√†nh vi√™n ho·∫∑c ng∆∞·ªùi t·∫°o...`);

    // Import ProjectMember model
    const ProjectMember = require('../models/projectMember.model');
    
    // B∆∞·ªõc 1: T√¨m t·∫•t c·∫£ c√°c b·∫£n ghi ProjectMember c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    console.log(`${reqId} [3] ƒêang truy v·∫•n ProjectMember...`);
    const membershipStart = Date.now();
    
    const userMemberships = await ProjectMember.find({ user_id: userId });
    
    console.log(`${reqId} [3] ProjectMember query completed in ${Date.now() - membershipStart}ms. Found ${userMemberships.length} memberships.`);
    
    // B∆∞·ªõc 2: L·∫•y danh s√°ch project_id t·ª´ membership
    const memberProjectIds = userMemberships.map(member => member.project_id);
    console.log(`${reqId} [4] Ng∆∞·ªùi d√πng l√† th√†nh vi√™n c·ªßa ${memberProjectIds.length} d·ª± √°n.`);

    // B∆∞·ªõc 3: T√¨m t·∫•t c·∫£ c√°c d·ª± √°n m√† user c√≥ quy·ªÅn truy c·∫≠p (th√†nh vi√™n HO·∫∂C ng∆∞·ªùi t·∫°o)
    console.log(`${reqId} [5] ƒêang truy v·∫•n chi ti·∫øt c√°c d·ª± √°n...`);
    const projectsStart = Date.now();
    
    const projects = await Project.find({
      $or: [
        { '_id': { $in: memberProjectIds } }, // D·ª± √°n m√† user l√† th√†nh vi√™n
        { 'created_by': userId } // D·ª± √°n m√† user l√† ng∆∞·ªùi t·∫°o
      ],
      'is_deleted': false // Ch·ªâ l·∫•y c√°c d·ª± √°n ch∆∞a b·ªã x√≥a
    })
    .populate('created_by', 'full_name email avatar_url') // L·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o  
    .populate('project_type_id', 'name') // L·∫•y th√¥ng tin lo·∫°i d·ª± √°n
    .sort({ created_at: -1 }); // S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t

    console.log(`${reqId} [5] Projects query completed in ${Date.now() - projectsStart}ms. Found ${projects.length} projects.`);

    console.log(`${reqId} [FINAL] Chu·∫©n b·ªã g·ª≠i response. Total time: ${Date.now() - startTime}ms`);
    
    if (!res.headersSent) {
      res.status(200).json(projects);
    }

  } catch (error) {
    console.error(`‚ùå L·ªói nghi√™m tr·ªçng trong ${reqId}:`, {
      error: error.message,
      stack: error.stack,
      totalTime: Date.now() - startTime + 'ms'
    });
    
    if (!res.headersSent) {
      res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch d·ª± √°n", error: error.message });
    } else {
      console.error(`üö® ${reqId} Headers already sent - cannot send error response`);
    }
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt 1 d·ª± √°n
exports.getProjectById = async (req, res) => {
  const { id } = req.params;
  const reqId = `[getProjectById-${id.slice(-4)}-${Date.now()}]`;
  
  console.log(`${reqId} [1] B·∫Øt ƒë·∫ßu l·∫•y chi ti·∫øt d·ª± √°n ID: ${id}`);
  try {
    const userId = new mongoose.Types.ObjectId(req.user.userId);
    const projectId = new mongoose.Types.ObjectId(id);

    // Import ProjectMember model
    const ProjectMember = require('../models/projectMember.model');

    // B∆∞·ªõc 1: T√¨m d·ª± √°n
    console.log(`${reqId} [2] ƒêang t√¨m d·ª± √°n trong DB...`);
    const project = await Project.findOne({ _id: projectId, is_deleted: false });

    if (!project) {
      console.warn(`${reqId} [FAIL] Kh√¥ng t√¨m th·∫•y d·ª± √°n v·ªõi ID: ${id}`);
      return res.status(404).json({ message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.' });
    }
    console.log(`${reqId} [3] ƒê√£ t√¨m th·∫•y d·ª± √°n: ${project.project_name}`);

    // B∆∞·ªõc 2: Ki·ªÉm tra quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng
    // Ng∆∞·ªùi d√πng c√≥ quy·ªÅn n·∫øu:
    // a) H·ªç l√† ng∆∞·ªùi t·∫°o ra d·ª± √°n (project.created_by)
    // b) H·ªç l√† th√†nh vi√™n trong b·∫£ng ProjectMember

    console.log(`${reqId} [4] ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p c·ªßa user: ${userId}`);
    const isOwner = project.created_by.equals(userId);
    
    let isMember = false;
    if (!isOwner) {
      const membership = await ProjectMember.findOne({
        project_id: projectId,
        user_id: userId
      });
      isMember = !!membership; // true n·∫øu t√¨m th·∫•y, false n·∫øu kh√¥ng
    }

    if (!isOwner && !isMember) {
      console.warn(`${reqId} [FAIL] User ${userId} kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ª± √°n.`);
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ª± √°n n√†y.' });
    }

    console.log(`${reqId} [5] User c√≥ quy·ªÅn truy c·∫≠p. Owner: ${isOwner}, Member: ${isMember}.`);
    
    // N·∫øu c√≥ quy·ªÅn, populate th√™m th√¥ng tin c·∫ßn thi·∫øt v√† tr·∫£ v·ªÅ
    console.log(`${reqId} [FINAL] Chu·∫©n b·ªã g·ª≠i response v·ªÅ client.`);
    await project.populate('project_type_id', 'name');
    await project.populate('kanban_id'); // Populate kanban_id ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin Kanban
    await project.populate('created_by', 'full_name email avatar_url');
    
    res.status(200).json(project);

  } catch (error) {
    console.error(`‚ùå L·ªói nghi√™m tr·ªçng trong ${reqId}:`, error);
    if (!res.headersSent) {
      res.status(500).json({ message: 'L·ªói server khi l·∫•y chi ti·∫øt d·ª± √°n' });
    }
  }
};

// X√≥a m·ªÅm d·ª± √°n
exports.softDeleteProject = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId;

    const project = await Project.findOneAndUpdate(
      { _id: id, created_by: userId },
      { is_deleted: true, deleted_at: new Date() },
      { new: true }
    );

    if (!project) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ª± √°n ho·∫∑c kh√¥ng c√≥ quy·ªÅn" });
    }

    // Populate the project before sending response
    const populatedProject = await Project.findById(project._id)
      .populate('project_type_id', 'name description')
      .populate('created_by', 'full_name email');

    if (req.server?.io) {
      req.server.io.to(userId).emit('project_changed');
    }

    res.json({ message: "ƒê√£ x√≥a d·ª± √°n (·∫©n t·∫°m th·ªùi)", project: populatedProject });
  } catch (error) {
    console.error('L·ªói x√≥a m·ªÅm d·ª± √°n:', error);
    res.status(500).json({ message: "L·ªói khi x√≥a d·ª± √°n", error: error.message });
  }
};

// Kh√¥i ph·ª•c d·ª± √°n
exports.restoreProject = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.userId;

    const project = await Project.findOneAndUpdate(
      { _id: id, created_by: userId, is_deleted: true },
      { is_deleted: false, deleted_at: null },
      { new: true }
    );

    if (!project) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ kh√¥i ph·ª•c" });
    }

    // Populate the project before sending response
    const populatedProject = await Project.findById(project._id)
      .populate('project_type_id', 'name description')
      .populate('created_by', 'full_name email');

    if (req.server?.io) {
      req.server.io.to(userId).emit('project_changed');
    }

    res.json({ message: "ƒê√£ kh√¥i ph·ª•c d·ª± √°n", project: populatedProject });
  } catch (error) {
    console.error('L·ªói kh√¥i ph·ª•c d·ª± √°n:', error);
    res.status(500).json({ message: "L·ªói khi kh√¥i ph·ª•c d·ª± √°n", error: error.message });
  }
};

// Ch·ªânh s·ª≠a d·ª± √°n
exports.updateProject = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { project_name, description, status, priority, start_date, end_date, project_type_id, team_id } = req.body;
    const userId = req.user.userId;

    // Validate projectId
    if (!projectId || projectId === 'undefined' || !mongoose.Types.ObjectId.isValid(projectId)) {
      return res.status(400).json({ message: 'ID d·ª± √°n kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu' });
    }

    const project = await Project.findOne({ _id: projectId, is_deleted: false });
    if (!project) {
      return res.status(404).json({ message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i' });
    }

    if (project.created_by.toString() !== userId) {
      return res.status(403).json({ message: 'Ch·ªâ ng∆∞·ªùi t·∫°o d·ª± √°n m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a' });
    }

    if (project_type_id) {
      const type = await ProjectType.findById(project_type_id);
      if (!type) {
        return res.status(400).json({ message: 'Lo·∫°i d·ª± √°n kh√¥ng h·ª£p l·ªá' });
      }
    }

    // Validate team_id if provided
    if (team_id) {
      const Team = require('../models/team.model');
      const team = await Team.findById(team_id);
      if (!team) {
        return res.status(400).json({ message: 'Team kh√¥ng t·ªìn t·∫°i' });
      }
    }

    // --- B·∫ÆT ƒê·∫¶U LOGGING ---
    console.log(`[DEBUG] Updating Project ID: ${projectId}`);
    // Log d·ªØ li·ªáu g·ªëc tr∆∞·ªõc khi thay ƒë·ªïi
    console.log('[DEBUG] Original Data:', JSON.stringify(project.toObject(), null, 2));
    // Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ request
    console.log('[DEBUG] Received Updates:', JSON.stringify({ project_name, description, status, priority, start_date, end_date, project_type_id, team_id }, null, 2));

    const changedFields = {};

    // G√°n gi√° tr·ªã v√† ghi nh·∫≠n c√°c tr∆∞·ªùng ƒë√£ thay ƒë·ªïi
    if (project_name && project.project_name !== project_name) {
      changedFields.project_name = { from: project.project_name, to: project_name };
      project.project_name = project_name;
    }
    if (description !== undefined && project.description !== description) {
      changedFields.description = { from: project.description, to: description };
      project.description = description;
    }
    if (status && project.status !== status) {
      changedFields.status = { from: project.status, to: status };
      project.status = status;
    }
    if (priority && project.priority !== priority) {
      changedFields.priority = { from: project.priority, to: priority };
      project.priority = priority;
    }
    if (start_date && project.start_date !== start_date) {
      changedFields.start_date = { from: project.start_date, to: start_date };
      project.start_date = start_date;
    }
    if (end_date && project.end_date !== end_date) {
      changedFields.end_date = { from: project.end_date, to: end_date };
      project.end_date = end_date;
    }
    if (project_type_id && project.project_type_id.toString() !== project_type_id) {
      changedFields.project_type_id = { from: project.project_type_id, to: project_type_id };
      project.project_type_id = project_type_id;
    }
    if (team_id !== undefined && project.team_id?.toString() !== team_id?.toString()) {
      changedFields.team_id = { from: project.team_id, to: team_id };
      project.team_id = team_id;
    }

    if (Object.keys(changedFields).length > 0) {
      console.log('[DEBUG] Fields Changed:', JSON.stringify(changedFields, null, 2));
      project.updated_at = new Date();
      await project.save();
      console.log(`[DEBUG] Project ${projectId} update saved to DB.`);
      
      // üîÑ Sync team members to project members when team_id changes
      if (changedFields.team_id && team_id) {
        try {
          console.log(`üîÑ Team ID changed from ${changedFields.team_id.from} to ${changedFields.team_id.to}, syncing team members...`);
          const syncResult = await syncTeamMembersToProject(projectId, team_id);
          console.log('üîÑ Team member sync result:', syncResult);
        } catch (syncError) {
          console.error('‚ùå Error syncing team members to project during update:', syncError);
          // Don't fail the update operation if sync fails, just log the error
        }
      }
    } else {
      console.log(`[DEBUG] No actual changes detected for Project ${projectId}.`);
    }
    // --- K·∫æT TH√öC LOGGING ---

    // IMPORTANT: Repopulate the project before sending it back
    const populatedProject = await Project.findById(project._id)
      .populate('project_type_id', 'name description') // << THIS LINE IS KEY
      .populate('created_by', 'full_name email');

    // Emit socket event khi c·∫≠p nh·∫≠t d·ª± √°n th√†nh c√¥ng
    if (req.server?.io) {
      req.server.io.to(userId).emit('project_changed', { action: 'update', project: populatedProject });
    }

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t d·ª± √°n th√†nh c√¥ng', project: populatedProject });
  } catch (error) {
    console.error('L·ªói c·∫≠p nh·∫≠t d·ª± √°n:', error);
    if (error.name === 'CastError') {
      return res.status(400).json({ message: 'ID d·ª± √°n kh√¥ng h·ª£p l·ªá' });
    }
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t d·ª± √°n', error: error.message });
  }
};

// L·∫•y th√¥ng tin chi ti·∫øt 1 d·ª± √°n t·ª´ API
exports.getProjectDetailsFromAPI = async (req, res) => {
  try {
    const { projectId } = req.params;
    const response = await axios.get(`/projects/${projectId}`);
    res.status(200).json(response.data);
  } catch (error) {
    console.error('L·ªói l·∫•y chi ti·∫øt d·ª± √°n t·ª´ API:', error);
    res.status(500).json({ message: 'L·ªói khi l·∫•y chi ti·∫øt d·ª± √°n t·ª´ API', error: error.message });
  }
};

// ==== TEAM PROJECT METHODS ====

// L·∫•y danh s√°ch d·ª± √°n c·ªßa team - GET /api/teams/:teamId/projects
exports.getTeamProjects = async (req, res) => {
  const reqId = `[getTeamProjects-${Date.now()}]`;
  const startTime = Date.now();
  
  console.log(`${reqId} [1] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω getTeamProjects...`);
  
  try {
    const { teamId } = req.params;
    const currentUserId = req.user.userId;
    
    console.log(`${reqId} [2] L·∫•y d·ª± √°n cho team: ${teamId}, user: ${currentUserId}`);

    // Import TeamMember model
    const TeamMember = require('../models/teamMember.model');
    const Team = require('../models/team.model');

    // Ki·ªÉm tra team t·ªìn t·∫°i
    console.log(`${reqId} [3] ƒêang ki·ªÉm tra team t·ªìn t·∫°i...`);
    const teamCheckStart = Date.now();
    
    const team = await Team.findOne({ _id: teamId, is_deleted: false });
    
    console.log(`${reqId} [3] Ki·ªÉm tra team ho√†n th√†nh trong ${Date.now() - teamCheckStart}ms. Team exists: ${!!team}`);
    
    if (!team) {
      if (!res.headersSent) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√≥m' });
      }
      return;
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p (ph·∫£i l√† th√†nh vi√™n c·ªßa team)
    console.log(`${reqId} [4] ƒêang ki·ªÉm tra quy·ªÅn th√†nh vi√™n...`);
    const memberCheckStart = Date.now();
    
    const currentMember = await TeamMember.findOne({
      team_id: teamId,
      user_id: currentUserId,
      is_active: true
    });
    
    console.log(`${reqId} [4] Ki·ªÉm tra quy·ªÅn ho√†n th√†nh trong ${Date.now() - memberCheckStart}ms. Is member: ${!!currentMember}`);

    if (!currentMember) {
      if (!res.headersSent) {
        return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem d·ª± √°n c·ªßa nh√≥m n√†y' });
      }
      return;
    }

    // L·∫•y danh s√°ch d·ª± √°n c·ªßa team
    console.log(`${reqId} [5] ƒêang l·∫•y danh s√°ch d·ª± √°n c·ªßa team...`);
    const projectsQueryStart = Date.now();
    
    const projects = await Project.find({ 
      team_id: teamId, 
      is_deleted: false 
    }).populate('project_type_id', 'name description')
      .populate('created_by', 'full_name email')
      .sort({ created_at: -1 });
    
    console.log(`${reqId} [5] Truy v·∫•n d·ª± √°n ho√†n th√†nh trong ${Date.now() - projectsQueryStart}ms. Found ${projects.length} projects`);

    console.log(`${reqId} [FINAL] Chu·∫©n b·ªã g·ª≠i response v·ªÅ client. Total time: ${Date.now() - startTime}ms`);

    if (!res.headersSent) {
      res.json({
        message: 'L·∫•y danh s√°ch d·ª± √°n th√†nh c√¥ng',
        team: {
          id: team._id,
          name: team.team_name,
          description: team.description
        },
        projects: projects.map(project => ({
          _id: project._id,
          project_name: project.project_name,
          description: project.description,
          status: project.status,
          priority: project.priority,
          start_date: project.start_date,
          end_date: project.end_date,
          team_id: project.team_id,
          project_type_id: project.project_type_id ? {
            _id: project.project_type_id._id,
            name: project.project_type_id.name
          } : null,
          created_by: project.created_by ? project.created_by._id : null,
          created_at: project.created_at,
          updated_at: project.updated_at
        })),
        total: projects.length
      });
    }

  } catch (error) {
    console.error(`‚ùå L·ªói nghi√™m tr·ªçng trong ${reqId}:`, {
      error: error.message,
      stack: error.stack,
      totalTime: Date.now() - startTime + 'ms'
    });
    
    if (!res.headersSent) {
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    } else {
      console.error(`üö® ${reqId} Headers already sent - cannot send error response`);
    }
  }
};

// G√°n d·ª± √°n v√†o team - POST /api/teams/:teamId/projects
exports.assignProjectToTeam = async (req, res) => {
  try {
    const { teamId } = req.params;
    const { project_id, project_name, description, start_date, end_date, status, priority, project_type_id } = req.body;
    const currentUserId = req.user.userId;

    // Import TeamMember model
    const TeamMember = require('../models/teamMember.model');
    const Team = require('../models/team.model');

    // Ki·ªÉm tra quy·ªÅn (Admin ho·∫∑c Editor)
    const currentMember = await TeamMember.findOne({
      team_id: teamId,
      user_id: currentUserId,
      role: { $in: ['Admin', 'Editor'] },
      is_active: true
    });

    if (!currentMember) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn g√°n d·ª± √°n cho nh√≥m' });
    }

    // Ki·ªÉm tra team t·ªìn t·∫°i
    const team = await Team.findOne({ _id: teamId, is_deleted: false });
    if (!team) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√≥m' });
    }

    let project;

    if (project_id) {
      // G√°n d·ª± √°n c√≥ s·∫µn v√†o team
      project = await Project.findOne({ _id: project_id, is_deleted: false });
      if (!project) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
      }

      // Ki·ªÉm tra d·ª± √°n ƒë√£ ƒë∆∞·ª£c g√°n cho team kh√°c ch∆∞a
      if (project.team_id && project.team_id.toString() !== teamId) {
        return res.status(400).json({ message: 'D·ª± √°n ƒë√£ ƒë∆∞·ª£c g√°n cho nh√≥m kh√°c' });
      }

      // G√°n d·ª± √°n v√†o team
      project.team_id = teamId;
      await project.save();
      
      // ƒê·ªìng b·ªô h√≥a team members sang project members
      await syncTeamMembersToProject(project._id, teamId);

    } else {
      // T·∫°o d·ª± √°n m·ªõi v√† g√°n v√†o team
      if (!project_name) {
        return res.status(400).json({ message: 'T√™n d·ª± √°n l√† b·∫Øt bu·ªôc' });
      }

      // T√¨m ho·∫∑c t·∫°o ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh
      let finalProjectTypeId = project_type_id;
      if (!project_type_id) {
        try {
          finalProjectTypeId = await getOrCreateDefaultProjectType(currentUserId);
        } catch (error) {
          return res.status(500).json({ message: 'L·ªói khi t·∫°o ph√¢n lo·∫°i m·∫∑c ƒë·ªãnh', error: error.message });
        }
      }

      project = new Project({
        project_name,
        description,
        start_date: start_date || new Date(),
        end_date: end_date || new Date(new Date().setMonth(new Date().getMonth() + 1)),
        status: status || 'Planning',
        priority: priority || 'Medium',
        project_type_id: finalProjectTypeId,
        team_id: teamId,
        created_by: currentUserId,
        is_deleted: false
      });

      await project.save();
    }

    // Populate th√¥ng tin c·∫ßn thi·∫øt
    const populatedProject = await Project.findById(project._id)
      .populate('project_type_id', 'name description')
      .populate('created_by', 'full_name email');

    // Sync team members to project members when a project is assigned to a team
    if (teamId) {
      try {
        const syncResult = await syncTeamMembersToProject(project._id, teamId);
        console.log('üîÑ Sync result:', syncResult);
      } catch (syncError) {
        console.error('‚ùå Error syncing team members to project:', syncError);
      }
    }

    res.status(201).json({
      message: project_id ? 'G√°n d·ª± √°n v√†o nh√≥m th√†nh c√¥ng' : 'T·∫°o v√† g√°n d·ª± √°n v√†o nh√≥m th√†nh c√¥ng',
      project: {
        id: populatedProject._id,
        name: populatedProject.project_name,
        description: populatedProject.description,
        status: populatedProject.status,
        priority: populatedProject.priority,
        start_date: populatedProject.start_date,
        end_date: populatedProject.end_date,
        team_id: populatedProject.team_id,
        project_type: populatedProject.project_type_id ? {
          id: populatedProject.project_type_id._id,
          name: populatedProject.project_type_id.name
        } : null,
        created_by: populatedProject.created_by ? {
          id: populatedProject.created_by._id,
          name: populatedProject.created_by.full_name
        } : null,
        created_at: populatedProject.created_at
      }
    });

  } catch (error) {
    console.error('Error assigning project to team:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// G·ª° d·ª± √°n kh·ªèi team - DELETE /api/teams/:teamId/projects/:projectId
exports.removeProjectFromTeam = async (req, res) => {
  try {
    const { teamId, projectId } = req.params;
    const currentUserId = req.user.userId;

    // Import TeamMember model
    const TeamMember = require('../models/teamMember.model');
    const Team = require('../models/team.model');

    // Ki·ªÉm tra quy·ªÅn (Admin ho·∫∑c Editor)
    const currentMember = await TeamMember.findOne({
      team_id: teamId,
      user_id: currentUserId,
      role: { $in: ['Admin', 'Editor'] },
      is_active: true
    });

    if (!currentMember) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª° d·ª± √°n kh·ªèi nh√≥m' });
    }

    // Ki·ªÉm tra team t·ªìn t·∫°i
    const team = await Team.findOne({ _id: teamId, is_deleted: false });
    if (!team) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√≥m' });
    }

    // Ki·ªÉm tra project t·ªìn t·∫°i v√† ƒë√£ ƒë∆∞·ª£c g√°n cho team n√†y
    const project = await Project.findOne({ 
      _id: projectId, 
      team_id: teamId,
      is_deleted: false 
    });

    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n ho·∫∑c d·ª± √°n kh√¥ng thu·ªôc nh√≥m n√†y' });
    }

    // G·ª° d·ª± √°n kh·ªèi team (set team_id = null)
    project.team_id = null;
    project.updated_at = new Date();
    await project.save();

    // Emit socket event n·∫øu c√≥
    if (req.server?.io) {
      req.server.io.to(currentUserId).emit('project_changed', { 
        action: 'remove_from_team', 
        project: project,
        teamId: teamId 
      });
    }

    res.json({
      message: 'G·ª° d·ª± √°n kh·ªèi nh√≥m th√†nh c√¥ng',
      project: {
        id: project._id,
        name: project.project_name,
        description: project.description,
        team_id: project.team_id // Should be null now
      }
    });

  } catch (error) {
    console.error('Error removing project from team:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh s√°ch project c√≥ th·ªÉ g√°n v√†o team (projects kh√¥ng thu·ªôc team n√†o ho·∫∑c thu·ªôc user hi·ªán t·∫°i)
exports.getAvailableProjects = async (req, res) => {
  try {
    const userId = req.user.userId;
    
    // L·∫•y c√°c project m√† user t·∫°o v√† ch∆∞a ƒë∆∞·ª£c g√°n v√†o team n√†o
    // ho·∫∑c user c√≥ quy·ªÅn truy c·∫≠p (created_by = userId)
    const projects = await Project.find({
      created_by: userId,
      $or: [
        { team_id: { $exists: false } }, // Projects not assigned to any team
        { team_id: null } // Or team_id is null
      ],
      is_deleted: { $ne: true } // Exclude soft-deleted projects
    })
    .populate('project_type_id', 'name description')
    .sort({ created_at: -1 });

    res.json({
      projects: projects,
      total: projects.length
    });

  } catch (error) {
    console.error('Error getting available projects:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// T√¨m ki·∫øm project theo t√™n ho·∫∑c m√¥ t·∫£
exports.searchProjects = async (req, res) => {
  try {
    const userId = req.user.userId;
    const { query } = req.query;
    
    if (!query || query.trim() === '') {
      return res.status(400).json({ message: 'Query parameter is required' });
    }

    // T√¨m ki·∫øm c√°c project m√† user t·∫°o v√† ch∆∞a ƒë∆∞·ª£c g√°n v√†o team
    const searchRegex = new RegExp(query.trim(), 'i');
    const projects = await Project.find({
      created_by: userId,
      $or: [
        { team_id: { $exists: false } }, // Projects not assigned to any team
        { team_id: null } // Or team_id is null
      ],
      is_deleted: { $ne: true }, // Exclude soft-deleted projects
      $and: [
        {
          $or: [
            { project_name: searchRegex },
            { description: searchRegex }
          ]
        }
      ]
    })
    .populate('project_type_id', 'name description')
    .sort({ created_at: -1 })
    .limit(20); // Limit results to prevent performance issues

    res.json({
      projects: projects,
      total: projects.length,
      query: query
    });

  } catch (error) {
    console.error('Error searching projects:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// Helper function to sync team members to project members (exported for reuse)
const syncTeamMembersToProject = async (projectId, teamId) => {
  try {
    console.log('üîÑ Syncing team members to project members...', { projectId, teamId });
    
    // Validate input parameters
    if (!projectId || !teamId) {
      throw new Error('projectId and teamId are required for sync operation');
    }

    // Validate ObjectId format
    if (!mongoose.Types.ObjectId.isValid(projectId) || !mongoose.Types.ObjectId.isValid(teamId)) {
      throw new Error('Invalid projectId or teamId format');
    }
    
    const TeamMember = require('../models/teamMember.model');
    const ProjectMember = require('../models/projectMember.model');
    
    // Get all active team members with validation
    const teamMembers = await TeamMember.find({
      team_id: teamId,
      is_active: true
    }).populate('user_id', '_id name email');
    
    console.log(`üìã Found ${teamMembers.length} team members to sync`);
    
    if (teamMembers.length === 0) {
      console.log('‚ÑπÔ∏è No active team members found to sync');
      return {
        success: true,
        teamMembersCount: 0,
        newProjectMembersCount: 0,
        existingProjectMembersCount: 0
      };
    }
    
    // Get existing project members to avoid duplicates
    const existingProjectMembers = await ProjectMember.find({
      project_id: projectId,
      is_active: true
    });
    
    const existingUserIds = existingProjectMembers.map(pm => pm.user_id.toString());
    console.log(`üìã Found ${existingProjectMembers.length} existing project members`);
      // Add team members to project members if they don't already exist
    const newProjectMembers = [];
    const validationErrors = [];
    
    for (const teamMember of teamMembers) {
      try {
        // Validate team member data
        if (!teamMember.user_id || !teamMember.user_id._id) {
          console.warn(`‚ö†Ô∏è Skipping team member with invalid user_id:`, teamMember);
          validationErrors.push(`Team member ${teamMember._id} has invalid user_id`);
          continue;
        }

        const userId = teamMember.user_id._id.toString();
        
        if (!existingUserIds.includes(userId)) {
          // Map team roles to project roles with proper validation
          let projectRole = 'Ng∆∞·ªùi xem'; // Default role
          
          // Enhanced role mapping with validation
          switch (teamMember.role) {
            case 'Admin':
              projectRole = 'Qu·∫£n tr·ªã vi√™n';
              break;
            case 'Editor':
              projectRole = 'Bi√™n t·∫≠p vi√™n';
              break;
            case 'Member':
              projectRole = 'Ng∆∞·ªùi xem';
              break;
            default:
              console.warn(`‚ö†Ô∏è Unknown team role: ${teamMember.role}, defaulting to 'Ng∆∞·ªùi xem'`);
              projectRole = 'Ng∆∞·ªùi xem';
          }
          
          console.log(`üë§ Mapping team member: ${teamMember.role} -> ${projectRole}`);
          
          // Create project member with validation
          const projectMemberData = {
            project_id: projectId,
            user_id: teamMember.user_id._id,
            role_in_project: projectRole,
            joined_at: new Date(),
            is_active: true
          };

          // Validate the project member data before creating
          const projectMember = new ProjectMember(projectMemberData);
          
          // Run validation without saving
          const validationError = projectMember.validateSync();
          if (validationError) {
            console.error(`‚ùå Validation error for team member ${userId}:`, validationError.message);
            validationErrors.push(`Validation failed for user ${userId}: ${validationError.message}`);
            continue;
          }
          
          newProjectMembers.push(projectMember);
        }
      } catch (memberError) {
        console.error(`‚ùå Error processing team member ${teamMember._id}:`, memberError);
        validationErrors.push(`Error processing team member ${teamMember._id}: ${memberError.message}`);
      }
    }
    
    // Insert new project members with batch validation
    let insertedCount = 0;
    if (newProjectMembers.length > 0) {
      try {
        const insertResult = await ProjectMember.insertMany(newProjectMembers, {
          ordered: false, // Continue inserting even if some fail
          rawResult: true
        });
        insertedCount = insertResult.insertedCount || newProjectMembers.length;
        console.log(`‚úÖ Added ${insertedCount} new project members from team`);
      } catch (insertError) {
        // Handle duplicate key errors gracefully
        if (insertError.code === 11000) {
          console.warn('‚ö†Ô∏è Some duplicate project members detected, continuing...');
          // Count successful inserts from the error details
          const writeErrors = insertError.writeErrors || [];
          insertedCount = newProjectMembers.length - writeErrors.length;
          console.log(`‚úÖ Added ${insertedCount} new project members (${writeErrors.length} duplicates skipped)`);
        } else {
          throw insertError;
        }
      }
    } else {
      console.log('‚ÑπÔ∏è No new project members to add - all team members already exist');
    }
    
    // Log validation errors if any
    if (validationErrors.length > 0) {
      console.warn(`‚ö†Ô∏è Encountered ${validationErrors.length} validation errors during sync:`, validationErrors);
    }
    
    return {
      success: true,
      teamMembersCount: teamMembers.length,
      newProjectMembersCount: insertedCount,
      existingProjectMembersCount: existingProjectMembers.length,
      validationErrors: validationErrors.length > 0 ? validationErrors : undefined
    };
  } catch (error) {
    console.error('‚ùå Error syncing team members to project:', error);
    return {
      success: false,
      error: error.message,
      stack: error.stack
    };
  }
};

// Export the sync function for external use
module.exports.syncTeamMembersToProject = syncTeamMembersToProject;

// API endpoint ƒë·ªÉ ƒë·ªìng b·ªô h√≥a team members sang project members th·ªß c√¥ng
exports.manualSyncTeamMembers = async (req, res) => {
  try {
    const { projectId } = req.params;
    const currentUserId = req.user.userId;

    // Ki·ªÉm tra project t·ªìn t·∫°i v√† user c√≥ quy·ªÅn
    const project = await Project.findOne({ 
      _id: projectId, 
      is_deleted: false 
    }).populate('team_id');

    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
    }

    // Ki·ªÉm tra quy·ªÅn: ph·∫£i l√† creator c·ªßa project ho·∫∑c Admin/Editor c·ªßa team
    let hasPermission = project.created_by.toString() === currentUserId;

    if (!hasPermission && project.team_id) {
      const TeamMember = require('../models/teamMember.model');
      const teamMember = await TeamMember.findOne({
        team_id: project.team_id,
        user_id: currentUserId,
        role: { $in: ['Admin', 'Editor'] },
        is_active: true
      });
      hasPermission = !!teamMember;
    }

    if (!hasPermission) {
      return res.status(403).json({ 
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªìng b·ªô h√≥a th√†nh vi√™n cho d·ª± √°n n√†y' 
      });
    }

    if (!project.team_id) {
      return res.status(400).json({ 
        message: 'D·ª± √°n n√†y ch∆∞a ƒë∆∞·ª£c g√°n cho team n√†o' 
      });
    }

    // Th·ª±c hi·ªán ƒë·ªìng b·ªô
    const syncResult = await syncTeamMembersToProject(projectId, project.team_id);

    if (syncResult.success) {
      res.json({
        message: 'ƒê·ªìng b·ªô h√≥a th√†nh vi√™n th√†nh c√¥ng',
        syncResult: {
          teamMembersCount: syncResult.teamMembersCount,
          newProjectMembersAdded: syncResult.newProjectMembersCount,
          existingProjectMembers: syncResult.existingProjectMembersCount,
          totalProjectMembersNow: syncResult.existingProjectMembersCount + syncResult.newProjectMembersCount
        }
      });
    } else {
      res.status(500).json({
        message: 'L·ªói khi ƒë·ªìng b·ªô h√≥a th√†nh vi√™n',
        error: syncResult.error
      });
    }

  } catch (error) {
    console.error('Error in manual sync team members:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};
