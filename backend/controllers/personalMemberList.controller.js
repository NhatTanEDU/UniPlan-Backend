// backend/controllers/personalMemberList.controller.js
const PersonalMemberList = require('../models/personalMemberList.model');
const User = require('../models/user.model');
const mongoose = require('mongoose');

// L·∫•y danh s√°ch th√†nh vi√™n c√° nh√¢n c·ªßa user hi·ªán t·∫°i
exports.getPersonalMembers = async (req, res) => {
    try {
        const ownerId = new mongoose.Types.ObjectId(req.user.id);

        // 1. ƒê·ªåC T·∫§T C·∫¢ THAM S·ªê T·ª™ QUERY
        const {
            page = 1,
            limit = 10,
            search = '',
            sortBy = 'added_at', // M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo ng√†y th√™m
            sortOrder = 'desc'  // M·∫∑c ƒë·ªãnh m·ªõi nh·∫•t l√™n ƒë·∫ßu
        } = req.query;

        const skip = (parseInt(page) - 1) * parseInt(limit);

        // 2. X√ÇY D·ª∞NG LOGIC $match V√Ä $sort ƒê·ªòNG
        let matchStage = { 
            owner_user_id: ownerId,
            is_active: true  // Ch·ªâ l·∫•y th√†nh vi√™n active
        };

        // X√¢y d·ª±ng object s·∫Øp x·∫øp ƒë·ªông
        const sort = {};
        const sortFieldMapping = {
            'name': 'member_user_data.full_name', // S·∫Øp x·∫øp theo t√™n c·ªßa user ƒë∆∞·ª£c populate
            'added_at': 'added_at'
        };
        const mappedSortField = sortFieldMapping[sortBy] || 'added_at';
        sort[mappedSortField] = sortOrder === 'asc' ? 1 : -1;

        // B·∫Øt ƒë·∫ßu x√¢y d·ª±ng pipeline
        let pipeline = [
            { $match: matchStage },
            {
                $lookup: {
                    from: 'users',
                    localField: 'member_user_id',
                    foreignField: '_id',
                    as: 'member_user_data'
                }
            },
            {
                $unwind: "$member_user_data" // Chuy·ªÉn m·∫£ng th√†nh object ƒë·ªÉ d·ªÖ truy v·∫•n
            }
        ];

        // Th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm n·∫øu c√≥
        if (search) {
            pipeline.push({
                $match: {
                    $or: [
                        { 'member_user_data.full_name': { $regex: search, $options: 'i' } },
                        { 'member_user_data.email': { $regex: search, $options: 'i' } },
                        { 'custom_role': { $regex: search, $options: 'i' } }
                    ]
                }
            });
        }

        // Pipeline ƒë·ªÉ ƒë·∫øm t·ªïng s·ªë k·∫øt qu·∫£ (tr∆∞·ªõc khi ph√¢n trang)
        const countPipeline = [...pipeline, { $count: "total" }];

        // 3. TH√äM LOGIC S·∫ÆP X·∫æP V√Ä PH√ÇN TRANG V√ÄO PIPELINE CH√çNH
        pipeline.push(
            { $sort: sort }, // <-- √Åp d·ª•ng s·∫Øp x·∫øp ƒë·ªông
            { $skip: skip },
            { $limit: parseInt(limit) },
            {
                $project: { // Ch·ªâ l·∫•y nh·ªØng tr∆∞·ªùng c·∫ßn thi·∫øt
                    _id: 1,
                    custom_role: 1,
                    notes: 1,
                    is_active: 1,
                    added_at: 1,
                    member_user_id: "$member_user_data" // L·∫•y to√†n b·ªô object user ƒë√£ populate
                }
            }
        );

        // Ch·∫°y c·∫£ hai pipeline song song v·ªõi timeout ƒë·ªÉ tƒÉng t·ªëc
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Database query timeout')), 25000)
        );
        
        const [members, totalResult] = await Promise.race([
            Promise.all([
                PersonalMemberList.aggregate(pipeline),
                PersonalMemberList.aggregate(countPipeline)
            ]),
            timeoutPromise
        ]);

        const total = totalResult.length > 0 ? totalResult[0].total : 0;
        const totalPages = Math.ceil(total / parseInt(limit));

        res.status(200).json({
            success: true,
            message: 'L·∫•y danh s√°ch th√†nh vi√™n th√†nh c√¥ng',
            data: members,
            pagination: {
                current_page: parseInt(page),
                total_pages: totalPages,
                total_items: total,
                items_per_page: parseInt(limit)
            }
        });

    } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi l·∫•y danh s√°ch th√†nh vi√™n',
                error: error.message
            });
        }
    }
};

// Th√™m th√†nh vi√™n m·ªõi v√†o danh s√°ch c√° nh√¢n
exports.addPersonalMember = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { member_user_id, custom_role, notes } = req.body;
        console.log('üîç DEBUG addPersonalMember - ownerId:', ownerId);
        console.log('üîç DEBUG addPersonalMember - member_user_id:', member_user_id);
        console.log('üîç DEBUG addPersonalMember - body:', req.body);

        // Ki·ªÉm tra input
        if (!member_user_id) {
            return res.status(400).json({
                success: false,
                message: 'ID th√†nh vi√™n l√† b·∫Øt bu·ªôc'
            });
        }

        // Ki·ªÉm tra member_user_id c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(member_user_id)) {
            return res.status(400).json({
                success: false,
                message: 'ID th√†nh vi√™n kh√¥ng h·ª£p l·ªá'
            });
        }

        // Ki·ªÉm tra user t·ªìn t·∫°i
        const memberUser = await User.findById(member_user_id);
        if (!memberUser) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y'
            });
        }

        // Ki·ªÉm tra kh√¥ng cho ph√©p th√™m ch√≠nh m√¨nh
        if (ownerId === member_user_id) {
            return res.status(400).json({
                success: false,
                message: 'Kh√¥ng th·ªÉ th√™m ch√≠nh m√¨nh v√†o danh s√°ch th√†nh vi√™n'
            });
        }

        // Ki·ªÉm tra th√†nh vi√™n ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingMember = await PersonalMemberList.findOne({
            owner_user_id: ownerId,
            member_user_id: member_user_id
        });

        if (existingMember) {
            if (existingMember.is_active) {
                return res.status(409).json({
                    success: false,
                    message: 'Th√†nh vi√™n n√†y ƒë√£ c√≥ trong danh s√°ch c·ªßa b·∫°n'
                });
            } else {
                // N·∫øu ƒë√£ t·ªìn t·∫°i nh∆∞ng is_active = false, th√¨ k√≠ch ho·∫°t l·∫°i
                existingMember.is_active = true;
                existingMember.custom_role = custom_role || existingMember.custom_role;
                existingMember.notes = notes || existingMember.notes;
                existingMember.added_at = new Date();
                
                await existingMember.save();
                  const populatedMember = await PersonalMemberList.findById(existingMember._id)
                    .populate('member_user_id', 'name full_name email avatar_url online_status role');

                return res.status(200).json({
                    success: true,
                    message: 'ƒê√£ k√≠ch ho·∫°t l·∫°i th√†nh vi√™n trong danh s√°ch',
                    data: populatedMember
                });
            }
        }

        // T·∫°o th√†nh vi√™n m·ªõi
        const newMember = new PersonalMemberList({
            owner_user_id: ownerId,
            member_user_id,
            custom_role,
            notes
        });

        await newMember.save();        // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
        const populatedMember = await PersonalMemberList.findById(newMember._id)
            .populate('member_user_id', 'name full_name email avatar_url online_status role');

        res.status(201).json({
            success: true,
            message: 'Th√™m th√†nh vi√™n v√†o danh s√°ch th√†nh c√¥ng',
            data: populatedMember
        });
    } catch (error) {
        console.error('L·ªói khi th√™m th√†nh vi√™n:', error);
        
        // Ki·ªÉm tra response ƒë√£ ƒë∆∞·ª£c g·ª≠i ch∆∞a
        if (res.headersSent) {
            return;
        }
        
        // X·ª≠ l√Ω l·ªói unique constraint
        if (error.code === 11000) {
            return res.status(409).json({
                success: false,
                message: 'Th√†nh vi√™n n√†y ƒë√£ c√≥ trong danh s√°ch c·ªßa b·∫°n'
            });
        }
        
        return res.status(500).json({
            success: false,
            message: 'L·ªói server khi th√™m th√†nh vi√™n',
            error: error.message
        });
    }
};

// C·∫≠p nh·∫≠t th√¥ng tin th√†nh vi√™n trong danh s√°ch
exports.updatePersonalMember = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { id } = req.params;
        const { custom_role, notes, is_active } = req.body;

        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                success: false,
                message: 'ID kh√¥ng h·ª£p l·ªá'
            });
        }

        // T√¨m v√† c·∫≠p nh·∫≠t
        const member = await PersonalMemberList.findOneAndUpdate(
            { 
                _id: id, 
                owner_user_id: ownerId 
            },
            { 
                custom_role, 
                notes, 
                is_active,
                ...(is_active !== undefined && { added_at: new Date() })
            },
            { new: true }
        ).populate('member_user_id', 'name email avatar_url online_status role');

        if (!member) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong danh s√°ch c·ªßa b·∫°n'
            });
        }

        res.status(200).json({
            success: true,
            message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh vi√™n th√†nh c√¥ng',
            data: member
        });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t th√†nh vi√™n:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi c·∫≠p nh·∫≠t th√†nh vi√™n',
                error: error.message
            });
        }
    }
};

// X√≥a th√†nh vi√™n kh·ªèi danh s√°ch (soft delete)
exports.removePersonalMember = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { id } = req.params;

        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                success: false,
                message: 'ID kh√¥ng h·ª£p l·ªá'
            });
        }

        // Soft delete - ch·ªâ set is_active = false
        const member = await PersonalMemberList.findOneAndUpdate(
            { 
                _id: id, 
                owner_user_id: ownerId 
            },
            { 
                is_active: false 
            },
            { new: true }
        ).populate('member_user_id', 'name email avatar_url online_status role');

        if (!member) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong danh s√°ch c·ªßa b·∫°n'
            });
        }

        res.status(200).json({
            success: true,
            message: 'ƒê√£ x√≥a th√†nh vi√™n kh·ªèi danh s√°ch',
            data: member
        });
    } catch (error) {
        console.error('L·ªói khi x√≥a th√†nh vi√™n:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi x√≥a th√†nh vi√™n',
                error: error.message
            });
        }
    }
};

// X√≥a vƒ©nh vi·ªÖn th√†nh vi√™n kh·ªèi danh s√°ch
exports.permanentDeletePersonalMember = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { id } = req.params;

        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                success: false,
                message: 'ID kh√¥ng h·ª£p l·ªá'
            });
        }

        // X√≥a vƒ©nh vi·ªÖn
        const member = await PersonalMemberList.findOneAndDelete({
            _id: id,
            owner_user_id: ownerId
        });

        if (!member) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong danh s√°ch c·ªßa b·∫°n'
            });
        }

        res.status(200).json({
            success: true,
            message: 'ƒê√£ x√≥a vƒ©nh vi·ªÖn th√†nh vi√™n kh·ªèi danh s√°ch',
            data: { id: member._id }
        });
    } catch (error) {
        console.error('L·ªói khi x√≥a vƒ©nh vi·ªÖn th√†nh vi√™n:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi x√≥a vƒ©nh vi·ªÖn th√†nh vi√™n',
                error: error.message
            });
        }
    }
};

// T√¨m ki·∫øm ng∆∞·ªùi d√πng ƒë·ªÉ th√™m v√†o danh s√°ch
exports.searchUsersToAdd = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { query, page = 1, limit = 10 } = req.query;

        console.log('üîç DEBUG searchUsersToAdd - ownerId:', ownerId);
        console.log('üîç DEBUG searchUsersToAdd - query:', query);

        if (!query || query.trim().length < 2) {
            return res.status(400).json({
                success: false,
                message: 'T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±'
            });
        }

        const skip = (page - 1) * limit;

        // T√¨m ki·∫øm user theo t√™n ho·∫∑c email
        const searchRegex = new RegExp(query.trim(), 'i');
        
        // L·∫•y danh s√°ch ID c·ªßa nh·ªØng ng∆∞·ªùi ƒë√£ c√≥ trong danh s√°ch
        const existingMemberIds = await PersonalMemberList.find({
            owner_user_id: ownerId,
            is_active: true
        }).distinct('member_user_id');
        
        console.log('üîç DEBUG searchUsersToAdd - existingMemberIds:', existingMemberIds);
        
        // Th√™m ch√≠nh owner v√†o danh s√°ch lo·∫°i tr·ª´
        existingMemberIds.push(new mongoose.Types.ObjectId(ownerId));
        
        // X√¢y d·ª±ng ƒëi·ªÅu ki·ªán t√¨m ki·∫øm - th·ª≠ c·∫£ isActive v√† is_active
        const searchConditions = {
            _id: { $nin: existingMemberIds },
            $and: [
                {
                    $or: [
                        { isActive: true },
                        { is_active: true },
                        { isActive: { $ne: false } },
                        { is_active: { $ne: false } }
                    ]
                }
            ],
            $or: [
                { full_name: searchRegex },
                { name: searchRegex },
                { email: searchRegex }
            ]
        };

        console.log('üîç DEBUG searchUsersToAdd - searchConditions:', JSON.stringify(searchConditions, null, 2));

        // T·∫°o timeout promise
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Search query timeout')), 15000)
        );

        // T√¨m ki·∫øm users v·ªõi timeout
        const [users, total] = await Promise.race([
            Promise.all([
                User.find(searchConditions)
                    .select('full_name name email avatar_url online_status role isActive is_active')
                    .skip(skip)
                    .limit(parseInt(limit))
                    .sort({ full_name: 1 }),
                User.countDocuments(searchConditions)
            ]),
            timeoutPromise
        ]);
        
        console.log('üîç DEBUG searchUsersToAdd - found users:', users.length);
        if (users.length > 0) {
            console.log('üîç DEBUG searchUsersToAdd - first user:', users[0]);
        }

        console.log('üîç DEBUG searchUsersToAdd - total count:', total);

        res.status(200).json({
            success: true,
            message: 'T√¨m ki·∫øm ng∆∞·ªùi d√πng th√†nh c√¥ng',
            data: users,
            pagination: {
                current_page: parseInt(page),
                total_pages: Math.ceil(total / limit),
                total_items: total,
                items_per_page: parseInt(limit)
            }
        });
    } catch (error) {
        console.error('L·ªói khi t√¨m ki·∫øm ng∆∞·ªùi d√πng:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi t√¨m ki·∫øm ng∆∞·ªùi d√πng',
                error: error.message
            });
        }
    }
};

// L·∫•y chi ti·∫øt m·ªôt th√†nh vi√™n trong danh s√°ch
exports.getPersonalMemberDetail = async (req, res) => {
    try {
        const ownerId = req.user.id;
        const { id } = req.params;

        // Ki·ªÉm tra ID h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({
                success: false,
                message: 'ID kh√¥ng h·ª£p l·ªá'
            });
        }

        const member = await PersonalMemberList.findOne({
            _id: id,
            owner_user_id: ownerId
        }).populate('member_user_id', 'name email avatar_url online_status role current_plan_type');

        if (!member) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n trong danh s√°ch c·ªßa b·∫°n'
            });
        }

        res.status(200).json({
            success: true,
            message: 'L·∫•y chi ti·∫øt th√†nh vi√™n th√†nh c√¥ng',
            data: member
        });
    } catch (error) {
        console.error('L·ªói khi l·∫•y chi ti·∫øt th√†nh vi√™n:', error);
        if (!res.headersSent) {
            return res.status(500).json({
                success: false,
                message: 'L·ªói server khi l·∫•y chi ti·∫øt th√†nh vi√™n',
                error: error.message
            });
        }
    }
};
