const TeamMember = require('../models/teamMember.model');
const ProjectMember = require('../models/projectMember.model');
const Team = require('../models/team.model');
const Project = require('../models/project.model');
const responseHelper = require('../utils/responseHelper');

// L·∫•y role c·ªßa user trong m·ªôt team c·ª• th·ªÉ
exports.getUserTeamRole = async (req, res) => {
  try {
    const { teamId } = req.params;
    const userId = req.user.userId || req.user.id;

    console.log('üîç [DEBUG] Getting user role for team:', { teamId, userId });

    // Ki·ªÉm tra team c√≥ t·ªìn t·∫°i
    const team = await Team.findOne({ _id: teamId, is_deleted: false });
    if (!team) {
      return res.status(404).json({ 
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y nh√≥m' 
      });    }

    // T√¨m role c·ªßa user trong team
    const membership = await TeamMember.findOne({
      team_id: teamId,
      user_id: userId,
      is_active: true
    }).populate('user_id', 'full_name email avatar_url');

    if (!membership) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m n√†y'
      });
    }

    const response = {
      success: true,
      data: {
        teamId,
        teamName: team.team_name,
        userId,
        userRole: membership.role,
        joinedAt: membership.joined_at,
        isActive: membership.is_active,
        user: membership.user_id,
        permissions: getTeamPermissions(membership.role)
      }
    };

    console.log('‚úÖ [DEBUG] User role found:', response.data);
    res.json(response);

  } catch (error) {
    console.error('‚ùå [ERROR] Getting user team role:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y th√¥ng tin vai tr√≤',
      error: error.message
    });
  }
};

// L·∫•y role c·ªßa user trong m·ªôt project c·ª• th·ªÉ
exports.getUserProjectRole = async (req, res) => {
  try {
    const { projectId } = req.params;
    const userId = req.user.userId || req.user.id;

    console.log('üîç [DEBUG] Getting user role for project:', { projectId, userId });

    // Ki·ªÉm tra project c√≥ t·ªìn t·∫°i
    const project = await Project.findOne({ _id: projectId, is_deleted: false });
    if (!project) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n'
      });
    }

    // T√¨m role c·ªßa user trong project
    const membership = await ProjectMember.findOne({
      project_id: projectId,
      user_id: userId,
      is_active: true
    }).populate('user_id', 'name email avatar_url');

    if (!membership) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa d·ª± √°n n√†y'
      });
    }

    const response = {
      success: true,
      data: {
        projectId,
        projectName: project.project_name,
        userId,
        userRole: membership.role_in_project,
        joinedAt: membership.joined_at,
        isActive: membership.is_active,
        user: membership.user_id,
        permissions: getProjectPermissions(membership.role_in_project)
      }
    };

    console.log('‚úÖ [DEBUG] User project role found:', response.data);
    res.json(response);

  } catch (error) {
    console.error('‚ùå [ERROR] Getting user project role:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y th√¥ng tin vai tr√≤',
      error: error.message
    });
  }
};

// L·∫•y t·∫•t c·∫£ roles c·ªßa user trong t·∫•t c·∫£ teams v√† projects
exports.getAllUserRoles = async (req, res) => {
  try {
    const userId = req.user.userId || req.user.id;    console.log('üîç [DEBUG] Getting all roles for user:', userId);

    // L·∫•y t·∫•t c·∫£ team memberships
    const teamMemberships = await TeamMember.find({
      user_id: userId,
      is_active: true
    })
    .populate('team_id', 'team_name description created_by')
    .populate('user_id', 'full_name email avatar_url');

    // L·∫•y t·∫•t c·∫£ project memberships
    const projectMemberships = await ProjectMember.find({
      user_id: userId,
      is_active: true
    })
    .populate('project_id', 'project_name description created_by')
    .populate('user_id', 'name email avatar_url');

    const response = {
      success: true,
      data: {
        userId,
        teams: teamMemberships.map(membership => ({
          teamId: membership.team_id._id,
          teamName: membership.team_id.team_name,
          role: membership.role,
          joinedAt: membership.joined_at,
          permissions: getTeamPermissions(membership.role),
          isCreator: membership.team_id.created_by.toString() === userId.toString()
        })),
        projects: projectMemberships.map(membership => ({
          projectId: membership.project_id._id,
          projectName: membership.project_id.project_name,
          role: membership.role_in_project,
          joinedAt: membership.joined_at,
          permissions: getProjectPermissions(membership.role_in_project),
          isCreator: membership.project_id.created_by.toString() === userId.toString()
        }))
      }
    };

    console.log('‚úÖ [DEBUG] All user roles found:', {
      teams: response.data.teams.length,
      projects: response.data.projects.length
    });

    res.json(response);

  } catch (error) {
    console.error('‚ùå [ERROR] Getting all user roles:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y th√¥ng tin vai tr√≤',
      error: error.message
    });
  }
};

// Ki·ªÉm tra quy·ªÅn x√≥a th√†nh vi√™n c·ª• th·ªÉ
exports.checkDeletePermission = async (req, res) => {
  try {
    const { teamId, memberId } = req.params;
    const currentUserId = req.user.userId || req.user.id;

    console.log('üîç [DEBUG] Checking delete permission:', { teamId, memberId, currentUserId });

    // L·∫•y th√¥ng tin membership c·ªßa user hi·ªán t·∫°i
    const currentMembership = await TeamMember.findOne({
      team_id: teamId,
      user_id: currentUserId,
      is_active: true
    });

    if (!currentMembership) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa nh√≥m n√†y',
        canDelete: false
      });
    }    // L·∫•y th√¥ng tin member c·∫ßn x√≥a
    const targetMember = await TeamMember.findById(memberId)
      .populate('user_id', 'full_name email avatar_url');

    if (!targetMember) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n',
        canDelete: false
      });
    }

    // Ki·ªÉm tra logic quy·ªÅn
    let canDelete = false;
    let reason = '';

    if (currentMembership.role === 'Admin') {
      if (targetMember.user_id._id.toString() === currentUserId.toString()) {
        canDelete = false;
        reason = 'Admin kh√¥ng th·ªÉ t·ª± x√≥a kh·ªèi nh√≥m';
      } else {
        canDelete = true;
        reason = 'Admin c√≥ quy·ªÅn x√≥a th√†nh vi√™n kh√°c';
      }
    } else if (currentMembership.role === 'Editor') {
      if (targetMember.role === 'Member') {
        canDelete = true;
        reason = 'Editor c√≥ quy·ªÅn x√≥a Member';
      } else {
        canDelete = false;
        reason = 'Editor kh√¥ng th·ªÉ x√≥a Admin ho·∫∑c Editor kh√°c';
      }
    } else {
      canDelete = false;
      reason = 'Member kh√¥ng c√≥ quy·ªÅn x√≥a th√†nh vi√™n';
    }

    const response = {
      success: true,
      data: {
        canDelete,
        reason,
        currentUser: {
          id: currentUserId,
          role: currentMembership.role
        },
        targetMember: {
          id: targetMember._id,
          userId: targetMember.user_id._id,
          name: targetMember.user_id.full_name,
          role: targetMember.role
        }
      }
    };

    console.log('‚úÖ [DEBUG] Delete permission check result:', response.data);
    res.json(response);

  } catch (error) {
    console.error('‚ùå [ERROR] Checking delete permission:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi ki·ªÉm tra quy·ªÅn',
      error: error.message
    });
  }
};

// H√†m helper ƒë·ªÉ l·∫•y permissions c·ªßa team role
function getTeamPermissions(role) {
  const permissions = {
    Admin: [
      'view_team',
      'edit_team',
      'delete_team',
      'add_member',
      'edit_member_role',
      'delete_member',
      'manage_projects'
    ],
    Editor: [
      'view_team',
      'add_member',
      'edit_member_role_limited', // ch·ªâ c√≥ th·ªÉ s·ª≠a Member
      'delete_member_limited' // ch·ªâ c√≥ th·ªÉ x√≥a Member
    ],
    Member: [
      'view_team'
    ]
  };

  return permissions[role] || [];
}

// H√†m helper ƒë·ªÉ l·∫•y permissions c·ªßa project role
function getProjectPermissions(role) {
  const permissions = {
    Owner: [
      'view_project',
      'edit_project',
      'delete_project',
      'add_member',
      'edit_member_role',
      'delete_member',
      'manage_kanban'
    ],
    'Qu·∫£n tr·ªã vi√™n': [
      'view_project',
      'edit_project',
      'add_member',
      'edit_member_role',
      'delete_member',
      'manage_kanban'
    ],
    'Bi√™n t·∫≠p vi√™n': [
      'view_project',
      'edit_project_limited',
      'manage_kanban_limited'
    ],
    'Ng∆∞·ªùi xem': [
      'view_project'
    ]
  };
  return permissions[role] || [];
}
