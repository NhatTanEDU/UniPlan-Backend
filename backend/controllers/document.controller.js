// controllers/document.controller.js
const { createClient } = require('@supabase/supabase-js');
const { v4: uuidv4 } = require('uuid');
const Document = require('../models/document.model');

// --- C·∫§U H√åNH SUPABASE ---
const SUPABASE_URL = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL';
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || 'YOUR_SUPABASE_SERVICE_KEY';
const SUPABASE_BUCKET_NAME = process.env.SUPABASE_BUCKET_NAME || 'uniplan-upload-file';

// Kh·ªüi t·∫°o Supabase client
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// H√†m x·ª≠ l√Ω upload file
exports.uploadDocument = async (req, res) => {
    try {
        console.log('üîç DEBUG uploadDocument - Request received');
        console.log('üîç DEBUG uploadDocument - File:', req.file);
        console.log('üîç DEBUG uploadDocument - Body:', req.body);
        console.log('üîç DEBUG uploadDocument - User:', req.user);

        // 1. Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c g·ª≠i l√™n ch∆∞a
        if (!req.file) {
            return res.status(400).json({ 
                success: false,
                message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.' 
            });
        }

        // 2. L·∫•y th√¥ng tin ng·ªØ c·∫£nh t·ª´ body
        const { taskId, projectId, teamId } = req.body;
        const userId = req.user.userId; // S·ª≠ d·ª•ng userId t·ª´ auth middleware

        console.log('üîç DEBUG uploadDocument - Context:', { taskId, projectId, teamId, userId });

        // 3. T·∫°o t√™n file duy nh·∫•t ƒë·ªÉ tr√°nh tr√πng l·∫∑p tr√™n Supabase
        const fileExtension = req.file.originalname.split('.').pop();
        const newFileName = `${uuidv4()}.${fileExtension}`;
        const storagePath = `documents/${newFileName}`;

        console.log('üîç DEBUG uploadDocument - Storage path:', storagePath);

        // 4. Upload file l√™n bucket c·ªßa Supabase
        const { data, error: uploadError } = await supabase.storage
            .from(SUPABASE_BUCKET_NAME)
            .upload(storagePath, req.file.buffer, {
                contentType: req.file.mimetype,
            });

        if (uploadError) {
            console.error('‚ùå L·ªói upload l√™n Supabase:', uploadError);
            return res.status(500).json({ 
                success: false,
                message: 'L·ªói khi t·∫£i file l√™n d·ªãch v·ª• l∆∞u tr·ªØ.',
                error: uploadError.message 
            });
        }

        console.log('‚úÖ Upload th√†nh c√¥ng l√™n Supabase:', data);

        // 5. L·∫•y URL c√¥ng khai c·ªßa file v·ª´a upload
        const { data: { publicUrl } } = supabase.storage
            .from(SUPABASE_BUCKET_NAME)
            .getPublicUrl(storagePath);

        console.log('üîç DEBUG uploadDocument - Public URL:', publicUrl);

        // 6. L∆∞u th√¥ng tin file v√†o MongoDB
        const newDocument = new Document({
            fileName: req.file.originalname,
            fileUrl: publicUrl,
            fileType: req.file.mimetype,
            fileSize: req.file.size,
            storagePath: storagePath,
            taskId: taskId || null,
            projectId: projectId || null,
            teamId: teamId || null,
            uploadedBy: userId,
        });

        const savedDocument = await newDocument.save();
        console.log('‚úÖ Document saved to MongoDB:', savedDocument._id);

        // 7. Tr·∫£ v·ªÅ th√¥ng tin file ƒë√£ l∆∞u cho client
        return res.status(201).json({
            success: true,
            message: 'T·∫£i file l√™n th√†nh c√¥ng!',
            data: savedDocument,
        });

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh upload:', error);
        return res.status(500).json({ 
            success: false,
            message: 'L·ªói m√°y ch·ªß kh√¥ng x√°c ƒë·ªãnh.',
            error: error.message 
        });
    }
};

// H√†m l·∫•y danh s√°ch documents theo context
exports.getDocuments = async (req, res) => {
    try {
        const { taskId, projectId, teamId, page = 1, limit = 10 } = req.query;
        const userId = req.user.userId;

        console.log('üîç DEBUG getDocuments - Query:', { taskId, projectId, teamId, page, limit });

        // X√¢y d·ª±ng filter
        let filter = {};
        
        // Only filter by userId if it's for personal documents
        // For team/project documents, don't filter by uploadedBy
        if (!teamId && !projectId && !taskId) {
            filter.uploadedBy = userId;
        }
        
        if (taskId) filter.taskId = taskId;
        if (projectId) filter.projectId = projectId;
        if (teamId) filter.teamId = teamId;

        const skip = (page - 1) * limit;

        // L·∫•y documents v·ªõi pagination
        const documents = await Document.find(filter)
            .populate('uploadedBy', 'full_name email')
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(parseInt(limit));

        // ƒê·∫øm t·ªïng s·ªë
        const total = await Document.countDocuments(filter);

        return res.status(200).json({
            success: true,
            message: 'L·∫•y danh s√°ch t√†i li·ªáu th√†nh c√¥ng',
            data: documents,
            pagination: {
                current_page: parseInt(page),
                total_pages: Math.ceil(total / limit),
                total_items: total,
                items_per_page: parseInt(limit)
            }
        });

    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch documents:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói m√°y ch·ªß khi l·∫•y danh s√°ch t√†i li·ªáu',
            error: error.message
        });
    }
};

// H√†m x√≥a document
exports.deleteDocument = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user.userId;

        console.log('üîç DEBUG deleteDocument - ID:', id, 'User:', userId);

        // T√¨m document
        const document = await Document.findById(id);

        if (!document) {
            return res.status(404).json({
                success: false,
                message: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu'
            });
        }

        // Check permission: user must be the uploader
        if (document.uploadedBy.toString() !== userId) {
            return res.status(403).json({
                success: false,
                message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a t√†i li·ªáu n√†y'
            });
        }

        // X√≥a file tr√™n Supabase
        const { error: deleteError } = await supabase.storage
            .from(SUPABASE_BUCKET_NAME)
            .remove([document.storagePath]);

        if (deleteError) {
            console.error('‚ùå L·ªói x√≥a file tr√™n Supabase:', deleteError);
            // V·∫´n ti·∫øp t·ª•c x√≥a record trong DB ngay c·∫£ khi x√≥a file th·∫•t b·∫°i
        } else {
            console.log('‚úÖ ƒê√£ x√≥a file tr√™n Supabase:', document.storagePath);
        }

        // X√≥a record trong MongoDB
        await Document.findByIdAndDelete(id);

        return res.status(200).json({
            success: true,
            message: 'X√≥a t√†i li·ªáu th√†nh c√¥ng'
        });

    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a document:', error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói m√°y ch·ªß khi x√≥a t√†i li·ªáu',
            error: error.message
        });
    }
};