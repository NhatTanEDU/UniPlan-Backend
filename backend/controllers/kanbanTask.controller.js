const KanbanTask = require('../models/kanbanTask.model');
const Kanban = require('../models/kanban.model');
const ProjectMember = require('../models/projectMember.model');
const Project = require('../models/project.model');
const Counter = require('../models/counter.model');
const Notification = require('../models/notification.model');
const { predictTaskRisk } = require('../../services/ai.service');

// Helper function to check user permissions for kanban tasks
const canModifyTask = async (userId, kanbanId, requiredPermission = 'edit') => {
  try {
    const kanban = await Kanban.findById(kanbanId);
    if (!kanban) {
      return { hasPermission: false, error: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban' };
    }

    const project = await Project.findById(kanban.project_id);
    if (!project) {
      return { hasPermission: false, error: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' };
    }

    // Check if user is project owner - full permissions
    if (project.created_by.toString() === userId.toString()) {
      return { hasPermission: true, role: 'Qu·∫£n tr·ªã vi√™n', project };
    }

    // Check project member role
    const projectMember = await ProjectMember.findOne({
      project_id: kanban.project_id,
      user_id: userId,
      is_active: true
    });

    if (!projectMember) {
      return { hasPermission: false, error: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ª± √°n' };
    }

    const userRole = projectMember.role_in_project;

    // Define permissions based on role and required action
    const permissions = {
      'Qu·∫£n tr·ªã vi√™n': ['create', 'edit', 'delete', 'pin', 'move'],
      'Bi√™n t·∫≠p vi√™n': ['edit', 'delete', 'pin', 'move'],
      'Ng∆∞·ªùi xem': ['move'] // Only can move tasks (change status)
    };

    const userPermissions = permissions[userRole] || [];
    const hasPermission = userPermissions.includes(requiredPermission);

    return { 
      hasPermission, 
      role: userRole, 
      project,
      availablePermissions: userPermissions 
    };
  } catch (error) {
    console.error('Error checking task permissions:', error);
    return { hasPermission: false, error: 'L·ªói ki·ªÉm tra quy·ªÅn truy c·∫≠p' };
  }
};

// Toggle pin/unpin task
exports.toggleTaskPin = async (req, res) => {
  try {
    console.log('Toggle Task Pin request:', req.params);
    console.log('User:', req.user);

    const { id } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    const task = await KanbanTask.findById(id);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y task' });
    }

    // Check pin permission
    const permissionCheck = await canModifyTask(userId, task.kanban_id, 'pin');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ 
        message: permissionCheck.error || 'Kh√¥ng c√≥ quy·ªÅn ghim/b·ªè ghim task',
        userRole: permissionCheck.role 
      });
    }

    // Toggle pin status
    task.is_pinned = !task.is_pinned;
    await task.save();

    // Populate task info
    const populatedTask = await KanbanTask.findById(task._id)
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents');

    // Emit socket event v·ªõi to√†n b·ªô danh s√°ch task
    if (req.io) {
      const allTasksInKanban = await KanbanTask.find({ kanban_id: task.kanban_id })
        .populate('assigned_to', 'name email avatar')
        .populate('created_by', 'name email avatar')
        .populate('documents') // <-- **TH√äM D√íNG N√ÄY**
        .sort({ is_pinned: -1, order: 1 });

      req.io.to(task.kanban_id.toString()).emit('kanban:updated', allTasksInKanban);
    }

    res.json(populatedTask);
  } catch (error) {
    console.error('Error toggling task pin:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// T·∫°o task m·ªõi
exports.createTask = async (req, res) => {
  try {
    console.log('Create Task request:', req.body);
    console.log('User:', req.user);

    const { kanban_id, title, description, status, start_date, due_date, priority, assigned_to, color, is_pinned } = req.body;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    // Check create permission
    const permissionCheck = await canModifyTask(userId, kanban_id, 'create');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ 
        message: permissionCheck.error || 'Kh√¥ng c√≥ quy·ªÅn t·∫°o task m·ªõi. Ch·ªâ Admin v√† Editor m·ªõi c√≥ th·ªÉ t·∫°o task.',
        userRole: permissionCheck.role 
      });
    }

    const project = permissionCheck.project;

    // Validation ng√†y th√°ng
    if (start_date && due_date) {
      const startDate = new Date(start_date);
      const dueDate = new Date(due_date);
      
      if (startDate > dueDate) {
        return res.status(400).json({ 
          message: 'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c' 
        });
      }
    }

    // Validation v·ªõi ng√†y d·ª± √°n
    if (start_date && project.start_date) {
      const taskStartDate = new Date(start_date);
      const projectStartDate = new Date(project.start_date);
      
      if (taskStartDate < projectStartDate) {
        return res.status(400).json({ 
          message: 'Ng√†y b·∫Øt ƒë·∫ßu task kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu d·ª± √°n' 
        });
      }
    }

    if (due_date && project.end_date) {
      const taskDueDate = new Date(due_date);
      const projectEndDate = new Date(project.end_date);
      
      if (taskDueDate > projectEndDate) {
        return res.status(400).json({ 
          message: 'Ng√†y k·∫øt th√∫c task kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c d·ª± √°n' 
        });
      }
    }

    // L·∫•y th√¥ng tin kanban
    const kanban = await Kanban.findById(kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y Kanban' });
    }

    // Validation assigned_to ph·∫£i l√† th√†nh vi√™n d·ª± √°n ho·∫∑c team
    if (assigned_to) {
      // Ki·ªÉm tra null/undefined safety
      const isCreator = project && project.created_by && 
                       project.created_by.toString() === assigned_to.toString();
      
      if (!isCreator) {
        let hasAccess = false;
        
        // Ki·ªÉm tra trong ProjectMember tr∆∞·ªõc
        const projectMember = await ProjectMember.findOne({
          project_id: kanban.project_id,
          user_id: assigned_to,
          is_active: true
        });

        if (projectMember) {
          hasAccess = true;
        }
        
        // N·∫øu kh√¥ng c√≥ trong ProjectMember v√† project c√≥ team_id, ki·ªÉm tra TeamMember
        if (!hasAccess && project.team_id) {
          const TeamMember = require('../models/teamMember.model');
          const teamMember = await TeamMember.findOne({
            team_id: project.team_id,
            user_id: assigned_to,
            is_active: true
          });
          
          if (teamMember) {
            hasAccess = true;
            console.log(`üìã User ${assigned_to} found in team ${project.team_id}, allowing assignment`);
              // ƒê·ªìng b·ªô h√≥a team member n√†y v√†o project member ƒë·ªÉ tr√°nh l·ªói t∆∞∆°ng lai
            try {
              const existingProjectMember = await ProjectMember.findOne({
                project_id: kanban.project_id,
                user_id: assigned_to
              });
              
              if (!existingProjectMember) {
                // Map team role to project role (using correct Vietnamese enum values)
                let projectRole;
                switch (teamMember.role.toLowerCase()) { // d√πng toLowerCase() ƒë·ªÉ tr√°nh l·ªói
                    case 'admin':
                        projectRole = 'Qu·∫£n tr·ªã vi√™n';
                        break;
                    case 'editor':
                        projectRole = 'Bi√™n t·∫≠p vi√™n';
                        break;
                    case 'member':
                        projectRole = 'Ng∆∞·ªùi xem';
                        break;
                    default:
                        projectRole = 'Ng∆∞·ªùi xem';
                }
                
                const newProjectMember = new ProjectMember({
                  project_id: kanban.project_id,
                  user_id: assigned_to,
                  role_in_project: projectRole,
                  joined_at: new Date(),
                  is_active: true
                });
                
                await newProjectMember.save();
                console.log(`‚úÖ Auto-synced team member ${assigned_to} to project members with role ${projectRole}`);
              }
            } catch (syncError) {
              console.error('‚ö†Ô∏è Error auto-syncing team member to project:', syncError);
              // Kh√¥ng fail task assignment n·∫øu sync l·ªói
            }
          }
        }

        if (!hasAccess) {
          return res.status(400).json({ 
            message: 'Ng∆∞·ªùi ƒë∆∞·ª£c giao ph·∫£i l√† th√†nh vi√™n c·ªßa d·ª± √°n ho·∫∑c th√†nh vi√™n c·ªßa team ƒë∆∞·ª£c g√°n d·ª± √°n' 
          });
        }
      }
    }

    // Ki·ªÉm tra quy·ªÅn: N·∫øu l√† ng∆∞·ªùi t·∫°o d·ª± √°n th√¨ cho ph√©p
    if (project && project.created_by && userId && project.created_by.toString() === userId.toString()) {
      // S·ª≠ d·ª•ng Counter ƒë·ªÉ l·∫•y order ti·∫øp theo (atomic operation)
      const taskStatus = status || 'C·∫ßn l√†m';
      const counterName = `${kanban_id}_${taskStatus}`;
      const newOrder = await Counter.getNextSequence(counterName);
      
      // T·∫°o task m·ªõi
      const task = new KanbanTask({
        kanban_id,
        title,
        description,
        status: taskStatus,
        order: newOrder, // S·ª≠ d·ª•ng order t·ª´ counter
        start_date,
        due_date,
        created_by: userId,
        assigned_to,
        priority: priority || 'Trung b√¨nh',
        color: color || '#ffffff',
        is_pinned: is_pinned || false
      });

      await task.save();
      console.log('Created task:', task);

      // AI risk prediction
      const riskLevel = predictTaskRisk(task);
      let riskClass = 'low';
      if (riskLevel > 0.7) riskClass = 'high';
      else if (riskLevel > 0.4) riskClass = 'medium';
      // G·ª≠i notification n·∫øu r·ªßi ro cao
      if (riskLevel > 0.7 && task.assigned_to) {
        await Notification.createNotification({
          userId: task.assigned_to,
          title: 'C·∫£nh b√°o r·ªßi ro c√¥ng vi·ªác',
          message: `C√¥ng vi·ªác "${task.title}" c√≥ nguy c∆° tr·ªÖ h·∫°n cao. Vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô!`,
          type: 'task_risk_alert',
          priority: 'high',
          project_id: kanban.project_id,
          metadata: { taskId: task._id, riskLevel }
        });
      }

      // Populate th√¥ng tin assigned_to v√† created_by
      const populatedTask = await KanbanTask.findById(task._id)
        .populate('assigned_to', 'name email')
        .populate('created_by', 'name email')
        .populate('documents');
      // Th√™m riskLevel/riskClass v√†o response
      const responseTask = populatedTask.toObject();
      responseTask.riskLevel = riskLevel;
      responseTask.riskClass = riskClass;

      // Emit socket event v·ªõi to√†n b·ªô danh s√°ch task
      if (req.io) {
        const allTasksInKanban = await KanbanTask.find({ kanban_id })
          .populate('assigned_to', 'name email avatar')
          .populate('created_by', 'name email avatar')
          .populate('documents') // TH√äM D√íNG N√ÄY
          .sort({ is_pinned: -1, order: 1 });

        req.io.to(kanban_id.toString()).emit('kanban:updated', allTasksInKanban);
      }

      return res.status(201).json(responseTask);
    }

    // Ki·ªÉm tra quy·ªÅn th√†nh vi√™n
    const projectMember = await ProjectMember.findOne({
      project_id: kanban.project_id,
      user_id: userId,
      is_active: true
    });

    if (!projectMember) {
      return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
    }

    // S·ª≠ d·ª•ng Counter ƒë·ªÉ l·∫•y order ti·∫øp theo (atomic operation)
    const taskStatus = status || 'C·∫ßn l√†m';
    const counterName = `${kanban_id}_${taskStatus}`;
    const newOrder = await Counter.getNextSequence(counterName);
    
    // T·∫°o task m·ªõi
    const task = new KanbanTask({
      kanban_id,
      title,
      description,
      status: taskStatus,
      order: newOrder,
      start_date,
      due_date,
      created_by: userId,
      assigned_to,
      priority: priority || 'Trung b√¨nh',
      color: color || '#ffffff',
      is_pinned: is_pinned || false
    });

    await task.save();
    console.log('Created task:', task);

    // AI risk prediction
    const riskLevel = predictTaskRisk(task);
    let riskClass = 'low';
    if (riskLevel > 0.7) riskClass = 'high';
    else if (riskLevel > 0.4) riskClass = 'medium';
    // G·ª≠i notification n·∫øu r·ªßi ro cao
    if (riskLevel > 0.7 && task.assigned_to) {
      await Notification.createNotification({
        userId: task.assigned_to,
        title: 'C·∫£nh b√°o r·ªßi ro c√¥ng vi·ªác',
        message: `C√¥ng vi·ªác "${task.title}" c√≥ nguy c∆° tr·ªÖ h·∫°n cao. Vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô!`,
        type: 'task_risk_alert',
        priority: 'high',
        project_id: kanban.project_id,
        metadata: { taskId: task._id, riskLevel }
      });
    }

    // Populate th√¥ng tin assigned_to v√† created_by
    const populatedTask = await KanbanTask.findById(task._id)
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents'); // TH√äM D√íNG N√ÄY

    // Th√™m riskLevel/riskClass v√†o response
    const responseTask = populatedTask.toObject();
    responseTask.riskLevel = riskLevel;
    responseTask.riskClass = riskClass;

    // Emit socket event v·ªõi to√†n b·ªô danh s√°ch task
    if (req.io) {
      const allTasksInKanban = await KanbanTask.find({ kanban_id })
        .populate('assigned_to', 'name email avatar')
        .populate('created_by', 'name email avatar')
        .populate('documents') // <-- **TH√äM D√íNG N√ÄY**
        .sort({ is_pinned: -1, order: 1 });

      req.io.to(kanban_id.toString()).emit('kanban:updated', allTasksInKanban);
    }

    res.status(201).json(responseTask);
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// C·∫≠p nh·∫≠t task
exports.updateTask = async (req, res) => {
  try {
    console.log('Update Task request:', req.params, req.body);
    console.log('User:', req.user);

    const { id } = req.params;
    const { title, description, status, start_date, due_date, priority, assigned_to, color, is_pinned } = req.body;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    const task = await KanbanTask.findById(id);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y task' });
    }

    // T√¨m th√¥ng tin kanban board li√™n quan ƒë·∫øn task
    const kanban = await Kanban.findById(task.kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban li√™n quan ƒë·∫øn task n√†y' });
    }

    // Check edit permission
    const permissionCheck = await canModifyTask(userId, task.kanban_id, 'edit');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ 
        message: permissionCheck.error || 'Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a task. Ch·ªâ Admin v√† Editor m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a task.',
        userRole: permissionCheck.role 
      });
    }

    const project = permissionCheck.project;

    // Validation ng√†y th√°ng
    const newStartDate = start_date || task.start_date;
    const newDueDate = due_date || task.due_date;

    if (newStartDate && newDueDate) {
      const startDate = new Date(newStartDate);
      const dueDate = new Date(newDueDate);
      
      if (startDate > dueDate) {
        return res.status(400).json({ 
          message: 'Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c' 
        });
      }
    }

    // Validation v·ªõi ng√†y d·ª± √°n
    if (newStartDate && project.start_date) {
      const taskStartDate = new Date(newStartDate);
      const projectStartDate = new Date(project.start_date);
      
      if (taskStartDate < projectStartDate) {
        return res.status(400).json({ 
          message: 'Ng√†y b·∫Øt ƒë·∫ßu task kh√¥ng th·ªÉ tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu d·ª± √°n' 
        });
      }
    }

    if (newDueDate && project.end_date) {
      const taskDueDate = new Date(newDueDate);
      const projectEndDate = new Date(project.end_date);
      
      if (taskDueDate > projectEndDate) {
        return res.status(400).json({ 
          message: 'Ng√†y k·∫øt th√∫c task kh√¥ng th·ªÉ sau ng√†y k·∫øt th√∫c d·ª± √°n' 
        });
      }
    }

    // X·ª≠ l√Ω assigned_to - c√≥ th·ªÉ l√† string ID ho·∫∑c object ho·∫∑c null/undefined
    let assignedToId = assigned_to;
    
    // N·∫øu frontend g·ª≠i object th√¨ l·∫•y _id
    if (assigned_to && typeof assigned_to === 'object' && assigned_to._id) {
      assignedToId = assigned_to._id;
    }
    
    // N·∫øu assigned_to l√† empty string th√¨ set th√†nh null
    if (assignedToId === '') {
      assignedToId = null;
    }

    // Validation assigned_to ph·∫£i l√† th√†nh vi√™n d·ª± √°n ho·∫∑c team (n·∫øu c√≥ gi√° tr·ªã v√† kh√°c v·ªõi gi√° tr·ªã c≈©)
    if (assignedToId && assignedToId !== task.assigned_to?.toString()) {
      const isCreator = project.created_by && project.created_by.toString() === assignedToId.toString();
      
      if (!isCreator) {
        let hasAccess = false;
        
        // Ki·ªÉm tra trong ProjectMember tr∆∞·ªõc
        const projectMember = await ProjectMember.findOne({
          project_id: kanban.project_id,
          user_id: assignedToId,
          is_active: true
        });

        if (projectMember) {
          hasAccess = true;
        }
        
        // N·∫øu kh√¥ng c√≥ trong ProjectMember v√† project c√≥ team_id, ki·ªÉm tra TeamMember
        if (!hasAccess && project.team_id) {
          const TeamMember = require('../models/teamMember.model');
          const teamMember = await TeamMember.findOne({
            team_id: project.team_id,
            user_id: assignedToId,
            is_active: true
          });
          
          if (teamMember) {
            hasAccess = true;
            console.log(`üìã User ${assignedToId} found in team ${project.team_id}, allowing assignment`);
            
            // ƒê·ªìng b·ªô h√≥a team member n√†y v√†o project member ƒë·ªÉ tr√°nh l·ªói t∆∞∆°ng lai
            try {
              const existingProjectMember = await ProjectMember.findOne({
                project_id: kanban.project_id,
                user_id: assignedToId
              });
                if (!existingProjectMember) {
                // Map team role to project role (using correct Vietnamese enum values)
                let projectRole;
                switch (teamMember.role.toLowerCase()) { // d√πng toLowerCase() ƒë·ªÉ tr√°nh l·ªói
                    case 'admin':
                        projectRole = 'Qu·∫£n tr·ªã vi√™n';
                        break;
                    case 'editor':
                        projectRole = 'Bi√™n t·∫≠p vi√™n';
                        break;
                    case 'member':
                        projectRole = 'Ng∆∞·ªùi xem';
                        break;
                    default:
                        projectRole = 'Ng∆∞·ªùi xem';
                }
                
                const newProjectMember = new ProjectMember({
                  project_id: kanban.project_id,
                  user_id: assignedToId,
                  role_in_project: projectRole,
                  joined_at: new Date(),
                  is_active: true
                });
                
                await newProjectMember.save();
                console.log(`‚úÖ Auto-synced team member ${assignedToId} to project members with role ${projectRole}`);
              }
            } catch (syncError) {
              console.error('‚ö†Ô∏è Error auto-syncing team member to project:', syncError);
              // Kh√¥ng fail task assignment n·∫øu sync l·ªói
            }
          }
        }

        if (!hasAccess) {
          return res.status(400).json({ 
            message: 'Ng∆∞·ªùi ƒë∆∞·ª£c giao ph·∫£i l√† th√†nh vi√™n c·ªßa d·ª± √°n ho·∫∑c th√†nh vi√™n c·ªßa team ƒë∆∞·ª£c g√°n d·ª± √°n' 
          });
        }
      }
    }

    // C·∫≠p nh·∫≠t task - ch·ªâ c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c g·ª≠i l√™n (kh√°c undefined)
    if (title !== undefined) task.title = title;
    if (description !== undefined) task.description = description;
    if (status !== undefined) task.status = status;
    if (start_date !== undefined) task.start_date = start_date;
    if (due_date !== undefined) task.due_date = due_date;
    if (priority !== undefined) task.priority = priority;
    if (color !== undefined) task.color = color;
    if (is_pinned !== undefined) task.is_pinned = is_pinned;
    
    // X·ª≠ l√Ω assigned_to ƒë·∫∑c bi·ªát
    if (assigned_to !== undefined) {
      task.assigned_to = assignedToId; // s·ª≠ d·ª•ng assignedToId ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n
    }

    await task.save();
    console.log('Updated task:', task);

    // AI risk prediction
    const riskLevel = predictTaskRisk(task);
    let riskClass = 'low';
    if (riskLevel > 0.7) riskClass = 'high';
    else if (riskLevel > 0.4) riskClass = 'medium';
    // G·ª≠i notification n·∫øu r·ªßi ro cao
    if (riskLevel > 0.7 && task.assigned_to) {
      await Notification.createNotification({
        userId: task.assigned_to,
        title: 'C·∫£nh b√°o r·ªßi ro c√¥ng vi·ªác',
        message: `C√¥ng vi·ªác "${task.title}" c√≥ nguy c∆° tr·ªÖ h·∫°n cao. Vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô!`,
        type: 'task_risk_alert',
        priority: 'high',
        project_id: kanban.project_id,
        metadata: { taskId: task._id, riskLevel }
      });
    }

    // Populate th√¥ng tin assigned_to v√† created_by
    const populatedTask = await KanbanTask.findById(task._id)
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents');
    // Th√™m riskLevel/riskClass v√†o response
    const responseTask = populatedTask.toObject();
    responseTask.riskLevel = riskLevel;
    responseTask.riskClass = riskClass;

    // Emit socket event v·ªõi to√†n b·ªô danh s√°ch task
    if (req.io) {
      const allTasksInKanban = await KanbanTask.find({ kanban_id: task.kanban_id })
        .populate('assigned_to', 'name email avatar')
        .populate('created_by', 'name email avatar')
        .populate('documents') // TH√äM D√íNG N√ÄY
        .sort({ is_pinned: -1, order: 1 });

      req.io.to(task.kanban_id.toString()).emit('kanban:updated', allTasksInKanban);
    }

    res.json(responseTask);
  } catch (error) {
    console.error('Error updating task:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// X√≥a task
exports.deleteTask = async (req, res) => {
  try {
    console.log('Delete Task request:', req.params);
    console.log('User:', req.user);

    const { id } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    const task = await KanbanTask.findById(id);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y task' });
    }

    // Check delete permission
    const permissionCheck = await canModifyTask(userId, task.kanban_id, 'delete');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ 
        message: permissionCheck.error || 'Kh√¥ng c√≥ quy·ªÅn x√≥a task. Ch·ªâ Admin v√† Editor m·ªõi c√≥ th·ªÉ x√≥a task.',
        userRole: permissionCheck.role 
      });
    }

    const kanbanId = task.kanban_id; // L∆∞u l·∫°i tr∆∞·ªõc khi x√≥a
    await KanbanTask.findByIdAndDelete(id);
    console.log('Deleted task:', id);

    // Emit socket event v·ªõi to√†n b·ªô danh s√°ch task c√≤n l·∫°i
    if (req.io) {
      const allTasksInKanban = await KanbanTask.find({ kanban_id: kanbanId })
        .populate('assigned_to', 'name email avatar')
        .populate('created_by', 'name email avatar')
        .populate('documents') // <-- **TH√äM D√íNG N√ÄY**
        .sort({ is_pinned: -1, order: 1 });

      req.io.to(kanbanId.toString()).emit('kanban:updated', allTasksInKanban);
    }

    res.json({ message: 'X√≥a task th√†nh c√¥ng' });
  } catch (error) {
    console.error('Error deleting task:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// C·∫≠p nh·∫≠t v·ªã tr√≠ task (k√©o th·∫£)
exports.updateTaskOrder = async (req, res) => {
  try {
    console.log('Update Task Order request:', req.params, req.body);
    console.log('User:', req.user);

    const { id } = req.params; // id c√≥ th·ªÉ undefined n·∫øu g·ªçi bulk update
    const { newStatus, newOrder, tasks: reorderedTasks } = req.body; // tasks array for bulk reordering
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    // X·ª≠ l√Ω bulk update (khi kh√¥ng c√≥ id trong params)
    if (!id && reorderedTasks && Array.isArray(reorderedTasks) && reorderedTasks.length > 0) {
      // L·∫•y kanban_id t·ª´ task ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra quy·ªÅn
      const sampleTask = await KanbanTask.findById(reorderedTasks[0]._id);
      if (!sampleTask) {
        return res.status(404).json({ message: 'Task kh√¥ng t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra quy·ªÅn' });
      }

      // Check move permission (all users including viewers can move tasks to change status)
      const permissionCheck = await canModifyTask(userId, sampleTask.kanban_id, 'move');
      if (!permissionCheck.hasPermission) {
        return res.status(403).json({ 
          message: permissionCheck.error || 'Kh√¥ng c√≥ quy·ªÅn di chuy·ªÉn task.',
          userRole: permissionCheck.role 
        });
      }

      // Th·ª±c hi·ªán bulk update
      const bulkOps = reorderedTasks.map(taskUpdate => ({
        updateOne: {
          filter: { _id: taskUpdate._id, kanban_id: sampleTask.kanban_id }, // Th√™m kanban_id ƒë·ªÉ b·∫£o m·∫≠t
          update: { 
            $set: {
              status: taskUpdate.status, 
              order: taskUpdate.order 
            }
          }
        }
      }));

      const result = await KanbanTask.bulkWrite(bulkOps);
      console.log('Bulk update result:', result);
      
      // L·∫•y l·∫°i to√†n b·ªô danh s√°ch task m·ªõi nh·∫•t t·ª´ CSDL s·ª≠ d·ª•ng sampleTask ƒë√£ c√≥
      if (sampleTask && req.io) {
        const kanbanId = sampleTask.kanban_id;

        // L·∫•y l·∫°i to√†n b·ªô task c·ªßa Kanban board ƒë√≥
        const allTasksInKanban = await KanbanTask.find({ kanban_id: kanbanId })
          .populate('assigned_to', 'name email avatar')
          .populate('created_by', 'name email avatar')
          .populate('documents') // <-- **TH√äM D√íNG N√ÄY**
          .sort({ is_pinned: -1, order: 1 });

        // Ph√°t s·ª± ki·ªán ƒëi v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
        req.io.to(kanbanId.toString()).emit('kanban:updated', allTasksInKanban);
      }

      return res.json({ 
        message: 'C·∫≠p nh·∫≠t v·ªã tr√≠ tasks th√†nh c√¥ng', 
        modifiedCount: result.modifiedCount 
      });
    }

    // X·ª≠ l√Ω single task update (khi c√≥ id trong params)
    if (!id) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin task ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }

    const task = await KanbanTask.findById(id);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y task' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const kanban = await Kanban.findById(task.kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban' });
    }

    const project = await Project.findById(kanban.project_id);
    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    let hasAccess = project.created_by && project.created_by.toString() === userId.toString();

    if (!hasAccess) {
      const projectMember = await ProjectMember.findOne({
        project_id: kanban.project_id,
        user_id: userId,
        is_active: true
      });

      if (!projectMember) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
      }
      hasAccess = true;
    }

    // C·∫≠p nh·∫≠t task ƒë∆°n l·∫ª
    const oldStatus = task.status;
    task.status = newStatus || task.status;
    task.order = newOrder !== undefined ? newOrder : task.order;
    await task.save();

    console.log('Updated task order:', task);

    // L·∫•y l·∫°i to√†n b·ªô danh s√°ch task m·ªõi nh·∫•t t·ª´ CSDL
    if (req.io) {
      const allTasksInKanban = await KanbanTask.find({ kanban_id: task.kanban_id })
        .populate('assigned_to', 'name email avatar')
        .populate('created_by', 'name email avatar')
        .populate('documents') // <-- **TH√äM D√íNG N√ÄY**
        .sort({ is_pinned: -1, order: 1 });

      req.io.to(task.kanban_id.toString()).emit('kanban:updated', allTasksInKanban);
    }

    // Populate th√¥ng tin cho response
    const populatedTask = await KanbanTask.findById(task._id)
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents'); // TH√äM D√íNG N√ÄY

    res.json(populatedTask);
  } catch (error) {
    console.error('Error updating task order:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh s√°ch tasks v·ªõi s·∫Øp x·∫øp ph√π h·ª£p
exports.getTasks = async (req, res) => {
  try {
    console.log('Get Tasks request:', req.params, req.query);
    console.log('User:', req.user);

    const { kanban_id } = req.params;
    
    // Handle different auth middleware formats
    const userId = req.user?.userId || req.user?._id || req.user?.id;
    
    if (!userId) {
      return res.status(401).json({ message: 'Ch∆∞a ƒëƒÉng nh·∫≠p' });
    }

    // Ki·ªÉm tra kanban c√≥ t·ªìn t·∫°i
    const kanban = await Kanban.findById(kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const project = await Project.findById(kanban.project_id);
    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
    }

    // N·∫øu l√† ng∆∞·ªùi t·∫°o d·ª± √°n th√¨ cho ph√©p
    let hasAccess = false;
    if (project.created_by && userId) {
      hasAccess = project.created_by.toString() === userId.toString();
    }

    if (!hasAccess) {
      // Ki·ªÉm tra quy·ªÅn th√†nh vi√™n
      const projectMember = await ProjectMember.findOne({
        project_id: kanban.project_id,
        user_id: userId,
        is_active: true
      });

      if (!projectMember) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
      }
      hasAccess = true;
    }

    // L·∫•y danh s√°ch tasks v·ªõi s·∫Øp x·∫øp: pinned tasks tr∆∞·ªõc, sau ƒë√≥ theo order
    const tasks = await KanbanTask.find({ kanban_id })
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents') // TH√äM D√íNG N√ÄY
      .sort({ 
        is_pinned: -1,  // pinned tasks tr∆∞·ªõc (true = 1, false = 0, descending = true tr∆∞·ªõc)
        order: 1,       // sau ƒë√≥ s·∫Øp x·∫øp theo order tƒÉng d·∫ßn
        created_at: 1   // cu·ªëi c√πng theo th·ªùi gian t·∫°o
      });

    console.log('Retrieved tasks:', tasks.length);

    res.json(tasks);
  } catch (error) {
    console.error('Error getting tasks:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh s√°ch th√†nh vi√™n d·ª± √°n ƒë·ªÉ assign task
exports.getProjectMembers = async (req, res) => {
  try {
    console.log('Get Project Members request:', req.params);
    console.log('User:', req.user);

    const { kanban_id } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    // Ki·ªÉm tra kanban c√≥ t·ªìn t·∫°i
    const kanban = await Kanban.findById(kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const project = await Project.findById(kanban.project_id);
    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
    }

    // N·∫øu l√† ng∆∞·ªùi t·∫°o d·ª± √°n th√¨ cho ph√©p
    let hasAccess = project.created_by.toString() === userId.toString();

    if (!hasAccess) {
      // Ki·ªÉm tra quy·ªÅn th√†nh vi√™n
      const projectMember = await ProjectMember.findOne({
        project_id: kanban.project_id,
        user_id: userId,
        is_active: true
      });

      if (!projectMember) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
      }
      hasAccess = true;
    }

    // L·∫•y danh s√°ch th√†nh vi√™n d·ª± √°n
    const projectMembers = await ProjectMember.find({
      project_id: kanban.project_id,
      is_active: true
    }).populate('user_id', 'name email avatar');

    // Th√™m ng∆∞·ªùi t·∫°o d·ª± √°n v√†o danh s√°ch n·∫øu ch∆∞a c√≥
    const creatorMember = projectMembers.find(member => 
      member.user_id._id.toString() === project.created_by.toString()
    );

    let members = projectMembers.map(member => ({
      _id: member.user_id._id,
      name: member.user_id.name,
      email: member.user_id.email,
      avatar: member.user_id.avatar,
      role: member.role_in_project
    }));

    if (!creatorMember) {
      // L·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o d·ª± √°n
      const creator = await require('../models/user.model').findById(project.created_by);
      if (creator) {
        members.unshift({
          _id: creator._id,
          name: creator.name,
          email: creator.email,
          avatar: creator.avatar,
          role: 'Ng∆∞·ªùi t·∫°o'
        });
      }
    }

    console.log('Retrieved project members:', members.length);

    res.json(members);
  } catch (error) {
    console.error('Error getting project members:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y danh s√°ch t√†i li·ªáu c·ªßa m·ªôt task
exports.getTaskDocuments = async (req, res) => {
  try {
    const { taskId } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    const task = await KanbanTask.findById(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác.' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p - ch·ªâ c·∫ßn quy·ªÅn move (t·ªëi thi·ªÉu)
    const permissionCheck = await canModifyTask(userId, task.kanban_id, 'move');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem t√†i li·ªáu n√†y.' });
    }

    const Document = require('../models/document.model');
    const documents = await Document.find({ taskId })
      .populate('uploadedBy', 'name email'); // L·∫•y th√¥ng tin ng∆∞·ªùi upload

    res.json(documents || []);
  } catch (error) {
    console.error('Error getting task documents:', error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y t√†i li·ªáu.' });
  }
};

// X√≥a m·ªôt t√†i li·ªáu kh·ªèi task
exports.deleteTaskDocument = async (req, res) => {
  try {
    const { taskId, documentId } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    const task = await KanbanTask.findById(taskId);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác.' });
    }

    // Ki·ªÉm tra quy·ªÅn edit ƒë·ªÉ x√≥a t√†i li·ªáu
    const permissionCheck = await canModifyTask(userId, task.kanban_id, 'edit');
    if (!permissionCheck.hasPermission) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a t√†i li·ªáu n√†y.' });
    }

    const Document = require('../models/document.model');
    const document = await Document.findById(documentId);

    if (!document) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu.' });
    }

    // TODO: Th√™m logic x√≥a file tr√™n Cloud Storage (Supabase) ·ªü ƒë√¢y n·∫øu c·∫ßn
    // V√≠ d·ª•: await supabase.storage.from('documents').remove([document.storagePath]);

    // X√≥a kh·ªèi CSDL
    await Document.findByIdAndDelete(documentId);

    // C·∫≠p nh·∫≠t l·∫°i task, x√≥a documentId kh·ªèi m·∫£ng
    await KanbanTask.findByIdAndUpdate(taskId, { $pull: { documents: documentId } });

    res.json({ message: 'X√≥a t√†i li·ªáu th√†nh c√¥ng.' });

  } catch (error) {
    console.error('Error deleting task document:', error);
    res.status(500).json({ message: 'L·ªói server khi x√≥a t√†i li·ªáu.' });
  }
};

// C·∫≠p nh·∫≠t tr·∫°ng th√°i pin c·ªßa task
exports.toggleTaskPin = async (req, res) => {
  try {
    console.log('Toggle Task Pin request:', req.params);
    console.log('User:', req.user);

    const { id } = req.params;
    const userId = req.user.userId || req.user._id || req.user.id;

    if (!userId) {
      return res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
    }

    const task = await KanbanTask.findById(id);
    if (!task) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y task' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    const kanban = await Kanban.findById(task.kanban_id);
    if (!kanban) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£ng Kanban' });
    }

    const project = await Project.findById(kanban.project_id);
    if (!project) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    let hasAccess = project.created_by.toString() === userId.toString();

    if (!hasAccess) {
      const projectMember = await ProjectMember.findOne({
        project_id: kanban.project_id,
        user_id: userId,
        is_active: true
      });

      if (!projectMember) {
        return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' });
      }
      hasAccess = true;
    }

    // Toggle pin status
    task.is_pinned = !task.is_pinned;
    await task.save();

    console.log('Updated task pin status:', task);

    // Populate th√¥ng tin
    const populatedTask = await KanbanTask.findById(task._id)
      .populate('assigned_to', 'name email avatar')
      .populate('created_by', 'name email avatar')
      .populate('documents'); // TH√äM D√íNG N√ÄY

    // Emit socket event
    if (req.io) {
      req.io.to(task.kanban_id.toString()).emit('task:pinned', populatedTask);
    }

    res.json(populatedTask);
  } catch (error) {
    console.error('Error toggling task pin:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};