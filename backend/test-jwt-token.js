// Test JWT decoding v·ªõi token th·∫≠t t·ª´ frontend
const jwt = require('jsonwebtoken');
require('dotenv').config();

// Test JWT decoding v·ªõi token th·∫≠t t·ª´ frontend
const testToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NjU5NzE0OTM5NGE3MTU5MDQzN2E3NCIsImVtYWlsIjoiYWRtaW5AZ21haWwuY29tIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzM0NzY1NjU1LCJleHAiOjE3MzQ4NTIwNTV9.f6HFKgYAcyh6IG0FRGZ7OJEgvxGl4SnJhMKv7PGcTAE';

console.log('üîç Testing JWT Token...\n');

try {
    const decoded = jwt.verify(testToken, process.env.JWT_SECRET);
    console.log('‚úÖ Token h·ª£p l·ªá:');
    console.log('  - User ID:', decoded.id);
    console.log('  - Email:', decoded.email);        
    console.log('  - Role:', decoded.role);
    console.log('  - Issued At:', new Date(decoded.iat * 1000));
    console.log('  - Expires At:', new Date(decoded.exp * 1000));
    console.log('  - C√≤n l·∫°i:', Math.floor((decoded.exp * 1000 - Date.now()) / 1000 / 60), 'ph√∫t');
    
    // Check if token is expired
    if (decoded.exp * 1000 < Date.now()) {
        console.log('‚ö†Ô∏è  Token ƒë√£ h·∫øt h·∫°n!');
    } else {
        console.log('‚úÖ Token c√≤n hi·ªáu l·ª±c');
    }
    
} catch (error) {
    console.log('‚ùå Token kh√¥ng h·ª£p l·ªá:', error.message);
    
    if (error.name === 'TokenExpiredError') {
        console.log('‚è∞ Token ƒë√£ h·∫øt h·∫°n');
    } else if (error.name === 'JsonWebTokenError') {
        console.log('üîê Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c secret key sai');
    }
}

console.log('\nüîë JWT_SECRET ƒë∆∞·ª£c s·ª≠ d·ª•ng:', process.env.JWT_SECRET);
