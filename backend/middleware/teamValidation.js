const { body, validationResult } = require('express-validator');
const responseHelper = require('../utils/responseHelper');

// Validation rules cho vi·ªác t·∫°o team
const validateCreateTeam = [
  body('name')
    .trim()
    .notEmpty()
    .withMessage('T√™n nh√≥m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .isLength({ min: 2, max: 100 })
    .withMessage('T√™n nh√≥m ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 2-100 k√Ω t·ª±'),
  
  body('description')
    .optional()
    .trim()
    .isLength({ max: 500 })
    .withMessage('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±'),
  
  body('color')
    .optional()
    .matches(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
    .withMessage('M√†u s·∫Øc ph·∫£i l√† m√£ hex h·ª£p l·ªá (v√≠ d·ª•: #FF0000)'),
  
  body('isPublic')
    .optional()
    .isBoolean()
    .withMessage('Tr·∫°ng th√°i c√¥ng khai ph·∫£i l√† true ho·∫∑c false'),
  
  body('maxMembers')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('S·ªë l∆∞·ª£ng th√†nh vi√™n t·ªëi ƒëa ph·∫£i t·ª´ 1-100')
];

// Validation rules cho vi·ªác c·∫≠p nh·∫≠t team
const validateUpdateTeam = [
  body('name')
    .optional()
    .trim()
    .notEmpty()
    .withMessage('T√™n nh√≥m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .isLength({ min: 2, max: 100 })
    .withMessage('T√™n nh√≥m ph·∫£i c√≥ ƒë·ªô d√†i t·ª´ 2-100 k√Ω t·ª±'),
  
  body('description')
    .optional()
    .trim()
    .isLength({ max: 500 })
    .withMessage('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±'),
  
  body('color')
    .optional()
    .matches(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)
    .withMessage('M√†u s·∫Øc ph·∫£i l√† m√£ hex h·ª£p l·ªá (v√≠ d·ª•: #FF0000)'),
  
  body('isPublic')
    .optional()
    .isBoolean()
    .withMessage('Tr·∫°ng th√°i c√¥ng khai ph·∫£i l√† true ho·∫∑c false'),
  
  body('maxMembers')
    .optional()
    .isInt({ min: 1, max: 100 })
    .withMessage('S·ªë l∆∞·ª£ng th√†nh vi√™n t·ªëi ƒëa ph·∫£i t·ª´ 1-100')
];

// Validation rules cho vi·ªác th√™m th√†nh vi√™n
const validateAddMember = [
  body('userId')
    .notEmpty()
    .withMessage('ID ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .isMongoId()
    .withMessage('ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'),
  
  body('role')
    .optional()
    .isIn(['member', 'admin', 'leader'])
    .withMessage('Vai tr√≤ ph·∫£i l√† member, admin ho·∫∑c leader')
];

// Validation rules cho vi·ªác th√™m nhi·ªÅu th√†nh vi√™n
const validateAddMultipleMembers = [
  body('userIds')
    .isArray({ min: 1 })
    .withMessage('Danh s√°ch ng∆∞·ªùi d√πng ph·∫£i l√† m·∫£ng v√† kh√¥ng ƒë∆∞·ª£c r·ªóng'),
  
  body('userIds.*')
    .isMongoId()
    .withMessage('T·∫•t c·∫£ ID ng∆∞·ªùi d√πng ph·∫£i h·ª£p l·ªá'),
  
  body('role')
    .optional()
    .isIn(['member', 'admin', 'leader'])
    .withMessage('Vai tr√≤ ph·∫£i l√† member, admin ho·∫∑c leader')
];

// Validation rules cho vi·ªác g√°n d·ª± √°n
const validateAssignProject = [
  body('projectId')
    .notEmpty()
    .withMessage('ID d·ª± √°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    .isMongoId()
    .withMessage('ID d·ª± √°n kh√¥ng h·ª£p l·ªá'),
  
  body('role')
    .optional()
    .isIn(['viewer', 'contributor', 'manager'])
    .withMessage('Vai tr√≤ trong d·ª± √°n ph·∫£i l√† viewer, contributor ho·∫∑c manager')
];

// Validation rules cho t√¨m ki·∫øm v√† l·ªçc
const validateSearchAndFilter = [
  body('searchTerm')
    .optional()
    .trim()
    .isLength({ max: 100 })
    .withMessage('T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±'),
  
  body('isPublic')
    .optional()
    .isBoolean()
    .withMessage('B·ªô l·ªçc c√¥ng khai ph·∫£i l√† true ho·∫∑c false'),
  
  body('memberCount')
    .optional()
    .isObject()
    .withMessage('B·ªô l·ªçc s·ªë l∆∞·ª£ng th√†nh vi√™n ph·∫£i l√† object'),
  
  body('memberCount.min')
    .optional()
    .isInt({ min: 0 })
    .withMessage('S·ªë l∆∞·ª£ng th√†nh vi√™n t·ªëi thi·ªÉu ph·∫£i >= 0'),
  
  body('memberCount.max')
    .optional()
    .isInt({ min: 1 })
    .withMessage('S·ªë l∆∞·ª£ng th√†nh vi√™n t·ªëi ƒëa ph·∫£i >= 1'),
  
  body('createdDateRange')
    .optional()
    .isObject()
    .withMessage('B·ªô l·ªçc ng√†y t·∫°o ph·∫£i l√† object'),
  
  body('createdDateRange.from')
    .optional()
    .isISO8601()
    .withMessage('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ISO8601'),
  
  body('createdDateRange.to')
    .optional()
    .isISO8601()
    .withMessage('Ng√†y k·∫øt th√∫c ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ISO8601')
];

// Middleware x·ª≠ l√Ω l·ªói validation
const handleValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  
  if (!errors.isEmpty()) {
    const validationErrors = errors.array().map(error => ({
      field: error.param,
      message: error.msg,
      value: error.value
    }));
    
    return responseHelper.validationErrorResponse(res, validationErrors);
  }
  
  next();
};

// Middleware ki·ªÉm tra quy·ªÅn truy c·∫≠p team
const checkTeamAccess = (allowedRoles = ['member', 'admin', 'leader']) => {
  return async (req, res, next) => {
    try {
      console.log('üîç [MIDDLEWARE] checkTeamAccess called');
      const teamId = req.params.teamId;
      const userId = req.user.userId || req.user.id || req.user._id;
      
      console.log('üîç [MIDDLEWARE] Team ID:', teamId, 'User ID:', userId);
      
      // Import TeamMember model
      const TeamMember = require('../models/teamMember.model');
      
      const membership = await TeamMember.findOne({
        team_id: teamId,
        user_id: userId
      });
      
      console.log('üîç [MIDDLEWARE] Membership found:', !!membership);
      
      if (!membership) {
        console.log('‚ùå [MIDDLEWARE] No membership found');
        return responseHelper.forbiddenResponse(res, 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p nh√≥m n√†y');
      }
      
      console.log('üîç [MIDDLEWARE] User role:', membership.role);
      
      if (!allowedRoles.includes(membership.role.toLowerCase())) {
        console.log('‚ùå [MIDDLEWARE] Role not allowed:', membership.role, 'Allowed:', allowedRoles);
        return responseHelper.forbiddenResponse(res, 'B·∫°n kh√¥ng c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y');
      }
      
      req.userTeamRole = membership.role;
      console.log('‚úÖ [MIDDLEWARE] Access granted, proceeding to controller');
      next();
    } catch (error) {
      console.error('Error checking team access:', error);
      return responseHelper.errorResponse(res, 'L·ªói ki·ªÉm tra quy·ªÅn truy c·∫≠p', 500);
    }
  };
};

// Middleware ki·ªÉm tra team leader
const checkTeamLeader = async (req, res, next) => {
  try {
    const teamId = req.params.teamId;
    const userId = req.user.id;
    
    const TeamMember = require('../models/teamMember.model');
    
    const membership = await TeamMember.findOne({
      teamId: teamId,
      userId: userId,
      role: 'leader'
    });
    
    if (!membership) {
      return responseHelper.forbiddenResponse(res, 'Ch·ªâ tr∆∞·ªüng nh√≥m m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y');
    }
    
    next();
  } catch (error) {
    console.error('Error checking team leader:', error);
    return responseHelper.errorResponse(res, 'L·ªói ki·ªÉm tra quy·ªÅn tr∆∞·ªüng nh√≥m', 500);
  }
};

// Middleware ki·ªÉm tra admin ho·∫∑c leader
const checkTeamAdminOrLeader = async (req, res, next) => {
  try {
    const teamId = req.params.teamId;
    const userId = req.user.id;
    
    const TeamMember = require('../models/teamMember.model');
    
    const membership = await TeamMember.findOne({
      teamId: teamId,
      userId: userId,
      role: { $in: ['admin', 'leader'] }
    });
    
    if (!membership) {
      return responseHelper.forbiddenResponse(res, 'Ch·ªâ qu·∫£n tr·ªã vi√™n ho·∫∑c tr∆∞·ªüng nh√≥m m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y');
    }
    
    req.userTeamRole = membership.role;
    next();
  } catch (error) {
    console.error('Error checking team admin/leader:', error);
    return responseHelper.errorResponse(res, 'L·ªói ki·ªÉm tra quy·ªÅn qu·∫£n tr·ªã', 500);
  }
};

module.exports = {
  validateCreateTeam,
  validateUpdateTeam,
  validateAddMember,
  validateAddMultipleMembers,
  validateAssignProject,
  validateSearchAndFilter,
  handleValidationErrors,
  checkTeamAccess,
  checkTeamLeader,
  checkTeamAdminOrLeader
};
