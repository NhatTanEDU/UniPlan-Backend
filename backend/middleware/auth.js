const jwt = require('jsonwebtoken');
const User = require('../models/user.model');

const auth = async (req, res, next) => {
  try {
    const authHeader = req.header('Authorization');
    
    // N·∫øu kh√¥ng c√≥ header Authorization ho·∫∑c kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng "Bearer ", tr·∫£ v·ªÅ l·ªói
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Y√™u c·∫ßu token x√°c th·ª±c. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.' });
    }

    const token = authHeader.replace('Bearer ', '');
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // T√¨m user trong DB nh∆∞ng kh√¥ng l·∫•y tr∆∞·ªùng password ƒë·ªÉ b·∫£o m·∫≠t
    const user = await User.findById(decoded.id).select('-password');

    if (!user) {
      return res.status(401).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c token kh√¥ng h·ª£p l·ªá.' });
    }

    // --- PH·∫¶N LOGGING N√ÇNG C·∫§P ---
    // Ghi l·∫°i th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
    console.log('üë§ User Authenticated:', {
      userId: user._id,
      name: user.full_name,
      email: user.email,
      role: user.role,
      status: user.online_status || 'Unknown',
      isActive: user.isActive !== undefined ? user.isActive : true,
      requestMethod: req.method,
      requestPath: req.path,
      timestamp: new Date().toISOString()
    });
    // -----------------------------

    // G·∫Øn th√¥ng tin user v√†o ƒë·ªëi t∆∞·ª£ng request ƒë·ªÉ c√°c controller sau c√≥ th·ªÉ s·ª≠ d·ª•ng
    req.user = {
      userId: user._id.toString(),
      name: user.full_name,
      email: user.email,
      role: user.role,
    };

    next(); // Chuy·ªÉn quy·ªÅn ƒëi·ªÅu khi·ªÉn cho controller ho·∫∑c middleware ti·∫øp theo

  } catch (error) {
    console.error('‚ùå Auth Middleware Error:', error.message);
    res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
  }
};

module.exports = auth;
