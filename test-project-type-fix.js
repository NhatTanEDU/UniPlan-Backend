/**
 * Test script ƒë·ªÉ ki·ªÉm tra vi·ªác s·ª≠a l·ªói project_type_id
 * Ki·ªÉm tra xem project_type_id c√≥ ƒë∆∞·ª£c truy·ªÅn ƒë√∫ng t·ª´ frontend ƒë·∫øn backend kh√¥ng
 */

const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:5000/api';
let authToken = '';
let testData = {
  userId: null,
  teamId: null,
  projectTypeId: null,
  createdProjectId: null
};

// Helper function for API calls
async function apiCall(method, endpoint, data = null, includeAuth = true) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: includeAuth && authToken ? { 'Authorization': `Bearer ${authToken}` } : {},
      ...(data && { data })
    };
    
    const response = await axios(config);
    return { success: true, data: response.data };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.message || error.message,
      status: error.response?.status
    };
  }
}

// Step 1: Login
async function login() {
  console.log('\nüîê ƒêƒÇNG NH·∫¨P...');
  const loginData = {
    email: 'hieuha2003@gmail.com',
    password: '123456'
  };
  
  const result = await apiCall('POST', '/auth/login', loginData, false);
  if (result.success) {
    authToken = result.data.token;
    testData.userId = result.data.user.userId;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
    console.log(`üë§ User ID: ${testData.userId}`);
    return true;
  } else {
    console.log('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', result.error);
    return false;
  }
}

// Step 2: Get project types
async function getProjectTypes() {
  console.log('\nüìã L·∫§Y DANH S√ÅCH PROJECT TYPES...');
  const result = await apiCall('GET', '/project-types');
  
  if (result.success) {
    const projectTypes = result.data;
    console.log(`‚úÖ T√¨m th·∫•y ${projectTypes.length} project types`);
    
    // T√¨m project type kh√°c "Kh√¥ng ph√¢n lo·∫°i"
    const marketingType = projectTypes.find(pt => pt.name.toLowerCase().includes('marketing'));
    const nonDefaultType = projectTypes.find(pt => pt.name !== 'Kh√¥ng ph√¢n lo·∫°i');
    
    testData.projectTypeId = marketingType?._id || nonDefaultType?._id || projectTypes[0]?._id;
    
    if (testData.projectTypeId) {
      const selectedType = projectTypes.find(pt => pt._id === testData.projectTypeId);
      console.log(`üéØ S·ª≠ d·ª•ng project type: "${selectedType.name}" (ID: ${testData.projectTypeId})`);
      return true;
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y project type ph√π h·ª£p');
      return false;
    }
  } else {
    console.log('‚ùå L·ªói l·∫•y project types:', result.error);
    return false;
  }
}

// Step 3: Create or get a team
async function createOrGetTeam() {
  console.log('\nüë• T·∫†O HO·∫∂C L·∫§Y TEAM...');
  
  // Th·ª≠ l·∫•y team c√≥ s·∫µn tr∆∞·ªõc
  const getTeamsResult = await apiCall('GET', '/teams?limit=1');
  if (getTeamsResult.success && getTeamsResult.data.teams && getTeamsResult.data.teams.length > 0) {
    testData.teamId = getTeamsResult.data.teams[0]._id;
    console.log(`‚úÖ S·ª≠ d·ª•ng team c√≥ s·∫µn: "${getTeamsResult.data.teams[0].team_name}" (ID: ${testData.teamId})`);
    return true;
  }
  
  // N·∫øu kh√¥ng c√≥ team, t·∫°o m·ªõi
  const teamData = {
    team_name: `Test Team Project Type Fix ${Date.now()}`,
    description: 'Team ƒë·ªÉ test vi·ªác s·ª≠a l·ªói project_type_id',
    type: 'Project',
    members: []
  };
  
  const result = await apiCall('POST', '/teams', teamData);
  if (result.success) {
    testData.teamId = result.data.team._id;
    console.log(`‚úÖ T·∫°o team m·ªõi th√†nh c√¥ng: "${result.data.team.team_name}" (ID: ${testData.teamId})`);
    return true;
  } else {
    console.log('‚ùå L·ªói t·∫°o team:', result.error);
    return false;
  }
}

// Step 4: Test t·∫°o project v·ªõi project_type_id th√¥ng qua team API
async function testCreateProjectWithTypeId() {
  console.log('\nüÜï TEST T·∫†O PROJECT V·ªöI PROJECT_TYPE_ID...');
  
  const projectData = {
    project_name: `Test Project Type Fix ${Date.now()}`,
    description: 'Test project ƒë·ªÉ ki·ªÉm tra vi·ªác truy·ªÅn project_type_id t·ª´ frontend ƒë·∫øn backend',
    start_date: new Date().toISOString(),
    end_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now
    status: 'Active',
    priority: 'High',
    project_type_id: testData.projectTypeId, // üéØ ƒêI·ªÄU QUAN TR·ªåNG: Truy·ªÅn project_type_id
    team_id: testData.teamId
  };
  
  console.log('üìù Project data g·ª≠i l√™n backend:');
  console.log(JSON.stringify(projectData, null, 2));
  
  // Test t·∫°o project tr·ª±c ti·∫øp qua project API
  const result = await apiCall('POST', '/projects', projectData);
  
  if (result.success) {
    const createdProject = result.data.project;
    testData.createdProjectId = createdProject._id;
    
    console.log('‚úÖ T·∫°o project th√†nh c√¥ng!');
    console.log(`üìã Project Name: ${createdProject.project_name}`);
    console.log(`üÜî Project ID: ${createdProject._id}`);
    console.log(`üè∑Ô∏è Project Type ID trong response: ${createdProject.project_type_id}`);
    
    // Ki·ªÉm tra xem project_type_id c√≥ ƒë∆∞·ª£c l∆∞u ƒë√∫ng kh√¥ng
    if (createdProject.project_type_id === testData.projectTypeId) {
      console.log('üéâ SUCCESS: project_type_id ƒë∆∞·ª£c truy·ªÅn v√† l∆∞u ƒë√∫ng!');
      return true;
    } else {
      console.log('‚ö†Ô∏è WARNING: project_type_id kh√¥ng kh·ªõp!');
      console.log(`   Expected: ${testData.projectTypeId}`);
      console.log(`   Actual: ${createdProject.project_type_id}`);
      return false;
    }
  } else {
    console.log('‚ùå L·ªói t·∫°o project:', result.error);
    return false;
  }
}

// Step 5: Verify project trong database
async function verifyProjectInDatabase() {
  console.log('\nüîç KI·ªÇM TRA PROJECT TRONG DATABASE...');
  
  const result = await apiCall('GET', `/projects/${testData.createdProjectId}`);
  
  if (result.success) {
    const project = result.data;
    console.log('‚úÖ L·∫•y project t·ª´ database th√†nh c√¥ng');
    console.log(`üìã Project Name: ${project.project_name}`);
    console.log(`üè∑Ô∏è Project Type ID: ${project.project_type_id?._id || project.project_type_id}`);
    console.log(`üè∑Ô∏è Project Type Name: ${project.project_type_id?.name || 'N/A'}`);
    
    // Ki·ªÉm tra project type
    const actualTypeId = project.project_type_id?._id || project.project_type_id;
    if (actualTypeId === testData.projectTypeId) {
      console.log('üéâ SUCCESS: project_type_id ƒë∆∞·ª£c l∆∞u ƒë√∫ng trong database!');
      return true;
    } else {
      console.log('‚ùå FAILED: project_type_id kh√¥ng ƒë√∫ng trong database');
      console.log(`   Expected: ${testData.projectTypeId}`);
      console.log(`   Actual: ${actualTypeId}`);
      return false;
    }
  } else {
    console.log('‚ùå L·ªói l·∫•y project t·ª´ database:', result.error);
    return false;
  }
}

// Step 6: Test team projects API
async function testTeamProjectsAPI() {
  console.log('\nüë• TEST TEAM PROJECTS API...');
  
  const result = await apiCall('GET', `/teams/${testData.teamId}/projects`);
  
  if (result.success) {
    const teamProjects = result.data.projects;
    console.log(`‚úÖ L·∫•y team projects th√†nh c√¥ng: ${teamProjects.length} projects`);
    
    const testProject = teamProjects.find(p => p._id === testData.createdProjectId);
    if (testProject) {
      console.log('‚úÖ T√¨m th·∫•y test project trong team');
      console.log(`üè∑Ô∏è Project Type ID: ${testProject.project_type_id?._id || testProject.project_type_id}`);
      console.log(`üè∑Ô∏è Project Type Name: ${testProject.project_type_id?.name || 'N/A'}`);
      
      const actualTypeId = testProject.project_type_id?._id || testProject.project_type_id;
      if (actualTypeId === testData.projectTypeId) {
        console.log('üéâ SUCCESS: project_type_id ƒë√∫ng trong team projects API!');
        return true;
      } else {
        console.log('‚ùå FAILED: project_type_id kh√¥ng ƒë√∫ng trong team projects API');
        return false;
      }
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y test project trong team');
      return false;
    }
  } else {
    console.log('‚ùå L·ªói l·∫•y team projects:', result.error);
    return false;
  }
}

// Main test function
async function runTest() {
  console.log('üß™ B·∫ÆT ƒê·∫¶U TEST PROJECT_TYPE_ID FIX');
  console.log('=' .repeat(60));
  
  try {
    // Ch·∫°y c√°c b∆∞·ªõc test
    const loginSuccess = await login();
    if (!loginSuccess) return;
    
    const typesSuccess = await getProjectTypes();
    if (!typesSuccess) return;
    
    const teamSuccess = await createOrGetTeam();
    if (!teamSuccess) return;
    
    const createSuccess = await testCreateProjectWithTypeId();
    if (!createSuccess) return;
    
    const verifySuccess = await verifyProjectInDatabase();
    if (!verifySuccess) return;
    
    const teamAPISuccess = await testTeamProjectsAPI();
    
    console.log('\n' + '=' .repeat(60));
    if (createSuccess && verifySuccess && teamAPISuccess) {
      console.log('üéâ T·∫§T C·∫¢ TEST CASE TH√ÄNH C√îNG!');
      console.log('‚úÖ L·ªói project_type_id ƒë√£ ƒë∆∞·ª£c s·ª≠a ho√†n to√†n');
    } else {
      console.log('‚ùå M·ªòT S·ªê TEST CASE TH·∫§T B·∫†I');
      console.log('‚ö†Ô∏è C·∫ßn ki·ªÉm tra l·∫°i code');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runTest();
}

module.exports = { runTest };
